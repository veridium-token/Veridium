{"version":3,"sources":["../../src/models/Users.js"],"names":["uuidv4","require","nodemailer","bcrypt","log4js","logger","getLogger","level","process","env","LOG_LEVEL","i18n","path","configure","directory","join","__dirname","mongoose","transporter","createTestAccount","err","account","Error","createTransport","debug","host","port","secure","auth","user","pass","UserSchema","Schema","tenantId","type","String","unique","min","required","email","_password","failedLogins","Number","accountLocked","Boolean","read","usePushEach","timestamps","User","model","module","exports","Users","constructor","trace","createUser","userToSignUp","password","_tempPassword","save","deleteUser","id","userToDelete","findByIdAndDelete","findById","findByEmail","findOne","listUsers","allUsers","find","changePassword","newPassword","returnedUser","error","incrementFailedLogin","resetLoginFailure","resetPassword","tmpPassword","hash","mailOptions","from","to","subject","text","sendMail","info","__"],"mappings":"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","file":"Users.js","sourcesContent":["const uuidv4 = require('uuid/v4');\nconst nodemailer = require('nodemailer');\nconst bcrypt = require('bcrypt')\nconst log4js = require('log4js');\nconst logger = log4js.getLogger('Users');\nlogger.level = process.env.LOG_LEVEL || 'debug';\n\nconst i18n = require('i18n');\nconst path = require('path');\ni18n.configure({\n    directory: path.join(__dirname, '/../locales')\n});\n\nconst mongoose = require('mongoose');\nrequire('../config/initializers/database');\n\nvar transporter;\n\nnodemailer.createTestAccount((err, account) => {\n    if(err){\n        throw new Error (err);\n    }\n    transporter = nodemailer.createTransport({\n        debug: true,\n        host: 'smtp.sendgrid.net',\n        port: 465,\n        secure: true, // use TLS\n        auth: {\n            user: 'apikey',\n            pass: '<redacted>'\n        }\n    });\n});\n\nconst UserSchema = new mongoose.Schema(\n    {\n        tenantId: {\n            type: String,\n            unique: true,\n            min: [4, 'tenant id is too short'],\n            required: [true, 'Missing required tenant id.']\n        },\n        email: {\n            type: String,\n            unique: true,\n            min: [4, 'email address is too short'],\n            required: [true, 'Missing required email address.']\n        },\n        _password: {\n            type: String,\n            unique: true,\n            min: [4, 'password is too short'],\n            required: [true, 'Missing required password.']\n        },\n        failedLogins: Number,\n        accountLocked: Boolean\n    },\n    {\n        read: 'nearest',\n        usePushEach: true,\n        timestamps: true\n    }\n);\n\nconst User = mongoose.model('User', UserSchema);\n\nmodule.exports = class Users {\n    constructor() {\n        logger.trace('<init> entry');\n        logger.trace('<init> exit');\n    }\n    async createUser (userToSignUp) {\n        logger.trace('createUser entry');\n        logger.trace('userToSignUp - tenantId:' + userToSignUp.tenantId);\n        const user = await new User({tenantId: userToSignUp.tenantId, email: userToSignUp.email, _password: userToSignUp.password, _tempPassword: null, failedLogins: 0, accountLocked: false})\n        await user.save();\n        logger.trace('<createUser> exit', user);\n        return user;\n    }\n    async deleteUser (id) {\n        logger.trace('deleteUser entry');\n        const userToDelete = await User.findByIdAndDelete(id);\n        logger.trace('deleteUser exit', userToDelete);\n        return userToDelete;\n    }\n    async findById (id) {\n        logger.trace('findById entry', id);\n        const user = await User.findById(id);\n        logger.trace('findById exit', user);\n        return user;\n    }\n    async findByEmail (email) {\n        logger.trace('findByEmail entry', email);\n        const user =  await User.findOne({'email':email});\n        logger.trace('findByEmail exit', user);\n        return user;\n    }\n    async listUsers (tenantId) {\n        logger.trace('listUsers entry');\n        const allUsers = await User.find({'tenantId':tenantId});\n        logger.trace('listUsers exit', allUsers);\n        return allUsers;\n    }\n\n    async changePassword (email, newPassword) {\n        logger.trace('changePassword entry',email);\n        let user = await this.findByEmail(email);\n        if(user){\n            user._password = newPassword;\n            await user.save();\n            user.save(function (err, returnedUser) {\n                if (err){\n                    logger.error('error in changePassword save', err);\n                }else{\n                    user = returnedUser;\n                }\n            })\n        }\n        logger.trace('changePassword exit', user);\n        return user;\n    }\n\n    async incrementFailedLogin(email){\n        logger.trace('incrementFailedLogin entry', email);\n        let user = await this.findByEmail(email);\n        if(user){\n            ++user.failedLogins;\n            if(user.failedLogins > 5){\n                user.accountLocked = true;\n            }\n            user = await user.save();\n        }\n        logger.trace('incrementFailedLogin exit', user);\n        return user;\n    }\n\n    async resetLoginFailure(email){\n        logger.trace('resetLoginFailure entry', email);\n        const user = await this.findByEmail(email);\n        if(user){\n            user.failedLogins=0;\n            user.accountLocked = false;\n            await user.save();\n        }\n        logger.trace('resetLoginFailure exit',user);\n    }\n    async resetPassword(email){\n        logger.trace('resetPassword entry', email);\n        const user = await this.findByEmail(email);\n        const tmpPassword = uuidv4();\n        user.password = await bcrypt.hash(tmpPassword, 10);\n        await user.save();\n        let mailOptions = {\n            from: '\"Blockchain Token Factory\" <donotreply@ibm.com>', // sender address\n            to: email,\n            subject: 'Password reset request for Blockchain Token Factory user ' + email, // Subject line\n            text: 'Temporary password: ' + tmpPassword\n            // text: 'Hello world?', // plain text body\n            // html: '<b>Hello world?</b>' // html body\n        };\n\n        // send mail with defined transport object\n        transporter.sendMail(mailOptions, (error, info) => {\n            if (error) {\n                logger.error(i18n.__('failed.email.send'), error);\n                throw new Error(i18n.__('failed.email.send'));\n            }\n        });\n        logger.trace('resetPassword exit', user);\n        return user;\n    }\n};\n"]}