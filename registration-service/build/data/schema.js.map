{"version":3,"sources":["../../src/data/schema.js"],"names":["gql","require","typeDefs","module","exports"],"mappings":";;AAAA;;AAEA,MAAM,EAAEA,GAAF,KAAUC,QAAQ,uBAAR,CAAhB;;AAGA;AACA,MAAMC,WAAWF,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAArB;;AAqFAG,OAAOC,OAAP,GAAiBF,QAAjB","file":"schema.js","sourcesContent":["// data/schema.js\n\nconst { gql } = require('apollo-server-express');\n\n\n// Define our schema using the GraphQL schema language\nconst typeDefs = gql`\n  \"Base user type\"\n  type User {\n    \"User unique id\"\n    id: ID!\n    \"Email address for user.  Will be used as display name of user and for login\"\n    email: String!\n    \"Tenant id that the user is a member of\"\n    tenantId: String!\n  }\n  type Login {\n    \"Bearer token returned as a result of successful login\"\n    authToken: String!\n  }\n  \"Base tenant type\"\n  type Tenant {\n    \"Tenant unique id\"\n    id: ID!\n    \"The full name of the tenant\"\n    name: String!\n  }\n  type Query {\n    \"Query to find logged in user based upon Bearer token\"\n    me: User\n\n    \"Query to find list of current tenants\"\n    listTenants: [Tenant]\n    \n    \"Query to find list of current users for a given tenant\"\n    listUsers: [User]\n  }\n  type Mutation {\n    \"Create a new tenant\"\n    createTenant(\n      \"The full name of the tenant\"\n      name: String!\n    ):Tenant\n\n    \"Delete a tenant\"\n    deleteTenant(\n      \"The unique id of the tenant\"\n      id: String!\n    ): Tenant\n\n    \"Create a tenant\"\n    createUser(\n      \"Tenant unique id\"\n      tenantId: String!, \n      \"Email of the user\"\n      email: String!, \n      \"Password used to login\"\n      password: String!\n    ): User\n\n    \"Delete a user\"\n    deleteUser (\n      \"The unique id of the user\"\n      id: String!\n    ): User\n    \n    \"Login a user\"\n    login (\n      \"Email of the user\"\n      email: String!, \n      \"Password for the user\"\n      password: String!\n    ): Login\n\n    \"Change the password of a user for login\"\n    changePassword(\n      \"Email of the user\"\n      email: String!,\n      \"Current password for the user\"\n      currentpassword: String!, \n      \"New password for the user\"\n      newpassword: String!): User\n    \n    \"Send password reset for a user in case of lost password\"\n    resetPassword (\n      \"Email of the user to reset\"\n      email: String!\n    ): User!\n  }\n`;\n\nmodule.exports = typeDefs\n"]}