{"version":3,"sources":["../../src/data/resolvers.js"],"names":["Users","require","_users","Tenants","_tenants","bcrypt","jsonwebtoken","log4js","logger","getLogger","level","process","env","LOG_LEVEL","mongoose","i18n","path","configure","directory","join","__dirname","AuthenticationError","ApolloError","AuthToken","constructor","authToken","resolvers","Query","me","_","args","user","trace","Error","whoAmI","findById","id","listTenants","tenants","listUsers","users","tenantId","Mutation","createUser","email","password","existingUser","findByEmail","__","hash","deleteUser","deletedUser","login","valid","compare","_password","incrementFailedLogin","error","accountLocked","resetLoginFailure","sign","JWT_SECRET","expiresIn","resetPassword","changePassword","currentpassword","newpassword","newEncryptedPassword","toJSON","createTenant","name","existingTenant","findByName","tenantCreated","deleteTenant","deletedTenant","mongoInitializeDB","connection","once","on","tenantName","tenant","module","exports","init"],"mappings":"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","file":"resolvers.js","sourcesContent":["// data/resolvers.js\n\nconst Users  = require('../models/Users.js');\nconst _users = new Users();\n\nconst Tenants = require('../models/Tenants.js');\nconst _tenants = new Tenants();\n\nconst bcrypt = require('bcrypt');\nconst jsonwebtoken = require('jsonwebtoken');\n\nconst log4js = require('log4js');\nconst logger = log4js.getLogger('resolvers');\nlogger.level = process.env.LOG_LEVEL || 'debug';\n\nconst mongoose = require('mongoose');\nrequire('../config/initializers/database');\n\nconst i18n = require('i18n');\nconst path = require('path');\ni18n.configure({\n    directory: path.join(__dirname, '/../locales')\n});\n\nconst { AuthenticationError, ApolloError } = require ('apollo-server');\n\nclass AuthToken {\n    constructor(authToken) {\n        this.authToken = authToken;\n    }\n}\n\nconst resolvers = {\n    Query: {\n        // fetch the profile of currently authenticated user\n        async me (_, args, { user }) {\n            logger.trace('me entry', user);\n            // make sure user is logged in\n            if (!user) {\n                throw new Error('You are not authenticated!')\n            }\n            // user is authenticated\n            const whoAmI = await _users.findById(user.id)\n            logger.trace('me exit', whoAmI );\n            return whoAmI;\n        },\n        async listTenants (_, args, {  })  {\n            // return all tenants\n            logger.trace('listTenants entry');\n            const tenants =  await _tenants.listTenants();\n            logger.trace('listTenants exit', tenants);\n            return tenants;\n        },\n        async listUsers (_, args, { user })  {            \n            // return all users\n            logger.trace('listUsers entry');\n            const users =  await _users.listUsers(user.tenantId);\n            logger.trace('listUsers exit', users);\n            return users;\n        }\n    },\n    Mutation: {\n        // Handle user signup\n        async createUser (_, { tenantId, email, password }) {\n            logger.trace('createUser entry', {tenantId, email});\n            const existingUser = await _users.findByEmail (email);\n            if(existingUser){\n                throw new ApolloError(i18n.__('duplicate.user.fail'));\n            }\n            const user = await _users.createUser({\n                tenantId,\n                email,\n                password: await bcrypt.hash(password, 10)\n            })\n            if (!user) {\n                throw new Error(i18n.__('create.user.fail'))\n            }\n            logger.trace('createUser exit', user );\n            // return newly created user\n            return user;\n        },\n        async deleteUser (_, { id }) {\n            logger.trace('deleteUser entry', id);\n            const deletedUser = await _users.deleteUser(id)\n            if (!deletedUser) {\n                throw new AuthenticationError(i18n.__('no.user.id'))\n            }\n            logger.trace('deleteUser exit', deletedUser);\n            return deletedUser;\n        },\n        // Handles user login\n        async login (_, { email, password }) {\n            logger.trace('login entry', email);\n            let user = await  _users.findByEmail(email)\n            logger.trace('login user', user);\n            if (!user) {\n                throw new AuthenticationError(i18n.__('no.user.email'))\n            }\n\n            const valid = await bcrypt.compare(password, user._password)\n            if (!valid) {\n                // update failed login count\n                user = await _users.incrementFailedLogin(email)\n                logger.error('incrementFailedLogin user', user);\n                if (user.accountLocked) {\n                    throw new AuthenticationError(i18n.__('too.many.login.attempts'))\n                }else{\n                    throw new AuthenticationError(i18n.__('incorrect.password'))\n                }\n            }else{\n                await _users.resetLoginFailure(email)\n            }\n            // return json web token\n            const authToken = new AuthToken(jsonwebtoken.sign({\n                tenantId: user.tenantId,\n                id: user.id,\n                email: user.email\n            },\n            process.env.JWT_SECRET,\n            { expiresIn: '1d' }) )\n            logger.trace('login authToken', authToken);\n\n            return authToken;\n\n        },\n        async resetPassword (_, { email }) {\n            logger.trace('resetPassword entry', email);\n            let user = await _users.findByEmail(email)\n            if (!user) {\n                throw new AuthenticationError(i18n.__('no.user.email'))\n            }\n            await _users.resetPassword(email)\n            logger.trace('resetPassword exit', user );\n            return user;\n        },\n        // Handles change password\n        async changePassword(_, { email, currentpassword, newpassword }) {\n            logger.trace('changePassword entry', email);\n            var user = await _users.findByEmail(email)\n            if (!user) {\n                throw new AuthenticationError(i18n.__('no.user.email'))\n            }\n            const valid = await bcrypt.compare(currentpassword, user._password)\n            if (!valid) {\n                throw new AuthenticationError(i18n.__('incorrect.password'))\n            }\n            var newEncryptedPassword = await bcrypt.hash(newpassword, 10);\n            user = await _users.changePassword(email, newEncryptedPassword);\n            logger.trace('changePassword exit', user.toJSON() );\n            return user;\n        },\n        async createTenant (_, { name }) {\n            logger.trace('createTenant entry', name);\n            var existingTenant = await _tenants.findByName(name)\n            if(existingTenant){\n                logger.error('createTenant existing tenant throwing error', existingTenant);\n                throw new ApolloError(i18n.__('duplicate.tenant.fail'));\n            }\n            const tenantCreated = await _tenants.createTenant(name)\n            if (!tenantCreated) {\n                throw new ApolloError(i18n.__('no.tenant.fail'), 'CREATE_FAIL', {});\n            }\n            logger.trace('createTenant exit', tenantCreated);\n            return tenantCreated;\n        },\n        async deleteTenant(_, { id }) {\n            logger.trace('deleteTenant entry', id);\n            const deletedTenant = await _tenants.deleteTenant(id)\n            if (!deletedTenant) {\n                throw new ApolloError(i18n.__('no.tenant.fail'), 'DELETE_FAIL', {});\n            }\n            logger.trace('deleteTenant exit', deletedTenant);\n            return deletedTenant;\n        }\n    }\n}\n\nconst mongoInitializeDB =  function() {\n    logger.trace('Resolvers init entry');\n    mongoose.connection.once('open', function() { \n        logger.trace('Mongo DB is opened');\n    }); \n    mongoose.connection.on('connected', async function() {\n        logger.trace('Mongo DB is connected');\n        const tenantName = 'Project Lion';\n        const email = 'lion@projectlion.com';\n        const password = 'lion';\n        var tenant = await _tenants.findByName(tenantName);\n        if(!tenant){\n            tenant = await _tenants.createTenant(tenantName);\n        }\n        logger.trace('Default tenant', tenant);\n        const tenantId = tenant.id;\n        var user = await _users.findByEmail (email);\n        if(!user){\n            user = await _users.createUser({\n                tenantId, email,\n                password: await bcrypt.hash(password, 10)\n            })\n        }\n        logger.trace('Default user', user);\n    }); \n};\n\nmodule.exports.resolvers = resolvers\nmodule.exports.init = mongoInitializeDB;\n"]}