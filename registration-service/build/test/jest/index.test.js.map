{"version":3,"sources":["../../../src/test/jest/index.test.js"],"names":["chai","require","assert","log4js","logger","getLogger","level","process","env","LOG_LEVEL","uuidv4","app","mongoose","request","tenantName","describe","tenantId","userId","emailAddress","beforeAll","done","info","res","post","set","send","JSON","parse","text","listOfTenants","found","forEach","entry","id","isTrue","afterAll","deletedTenant","isNotNull","connection","close","beforeEach","oneInAMillion","Math","floor","random","createdUser","equal","email","afterEach","it","createdTenant","isNull","result","expectedResult","bearerToken","length","count","tooManyLoginsCheck","loginFailure","notExists"],"mappings":"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","file":"index.test.js","sourcesContent":["const chai = require('chai');\nconst assert = chai.assert;\nconst log4js = require('log4js');\nconst logger = log4js.getLogger('Users');\nlogger.level = process.env.LOG_LEVEL || 'debug';\nconst uuidv4 = require('uuid/v4');\n\n// application dependencies..\nconst app = require('../../app')\nconst mongoose = require('mongoose');\nrequire('../../config/initializers/database');\n\nconst request = require('supertest');\nconst tenantName = uuidv4()\n\ndescribe('outer describe', function () {\n    // Before test suite, let's create a tenant\n    // then after we are done, we delete the tenant.\n    var tenantId;\n    var userId;\n    var emailAddress;\n\n    beforeAll(async(done) => {\n        logger.info('create tenant');\n        const res = await request(app).post('/registration')\n            .set('Accept', 'application/json')\n            .set('Content-Type', 'application/json')\n            .send({'query':'mutation { createTenant(name: \"'+ tenantName + '\") {id name} }'} )\n        tenantId = JSON.parse(res.text)['data']['createTenant']['id'];\n        logger.info('beforeAll tenantId', tenantId);\n        done();\n    })\n    beforeAll(async(done) => {\n        logger.info('List tenants');\n        const res = await request(app).post('/registration')\n            .set('Accept', 'application/json')\n            .set('Content-Type', 'application/json')\n            .send({'query':'{ listTenants { id name } } '} )\n        const listOfTenants = JSON.parse(res.text)['data']['listTenants']\n        let found = false;\n        listOfTenants.forEach(function(entry) {\n            if(entry.id === tenantId){\n                found = true;\n            }\n        });\n        assert.isTrue (found, 'Failed to find tenant' + tenantId);\n        done();\n    });\n    \n    afterAll(async(done) => {\n        logger.info('Delete tenant');\n        const res = await request(app).post('/registration')\n            .set('Accept', 'application/json')\n            .set('Content-Type', 'application/json')\n            .send({'query':'mutation { deleteTenant(id:\"'+ tenantId +'\"){ id name } }'} )\n        \n        const deletedTenant = await JSON.parse(res.text)['data']['deleteTenant'];\n        assert.isNotNull(deletedTenant.id);\n        logger.info('Deleted: ' + deletedTenant);\n  \n        logger.info('Closing mongoose connection');\n        await mongoose.connection.close();\n        logger.info('After closing mongoose connection, marking done');\n        done();\n \n    });\n\n    //  End beforeAll / afterAll section\n\n    // Before each test, let's create a user\n    // then after we are done, we delete the user.\n    beforeEach(async(done) => {\n\n        var oneInAMillion = Math.floor(Math.random() * (1000000) + 1);\n        emailAddress = 'john' + oneInAMillion + '@example.com';\n        logger.info('Sign up new user: ' + emailAddress);\n\n        const res = await request(app).post('/registration')\n            .set('Accept', 'application/json')\n            .set('Content-Type', 'application/json')\n            .send({'query':'mutation { createUser (tenantId: \"'+ tenantId +'\", email: \"' + emailAddress + '\", password: \"password\") { email id tenantId }   }'} )\n        const createdUser = await JSON.parse(res.text)['data']['createUser'];\n        userId = createdUser.id;\n        logger.info('Created user with id ' + userId);\n        assert.isNotNull(createdUser.id);\n        assert.equal (createdUser.email, emailAddress);\n        assert.equal (createdUser.tenantId, tenantId);\n        done();\n    })\n    afterEach(async(done) => {\n        logger.info('Delete user by id ' + userId);\n        await request(app).post('/registration')\n            .set('Accept', 'application/json')\n            .set('Content-Type', 'application/json')\n            .send({'query':'mutation { deleteUser ( id: \"'+ userId + '\") { id } }'} )\n        done();\n\n    })\n    //  End before each / after each section\n\n    describe('Create tenant -- fail (empty tenant name)', () => {\n        it('Create tenant -- fail', async(done) => {\n            logger.info('create tenant');\n            const res = await request(app).post('/registration')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .send({'query':'mutation { createTenant(name: \"' + '\") {id name} }'} )\n            const createdTenant = await JSON.parse(res.text)['data']['createTenant'];\n            assert.isNull(createdTenant );\n            const result = JSON.parse(res.text)['errors'][0]['message'];\n            const expectedResult = 'Tenant validation failed: name: Missing required tenant name.';\n            assert.isNotNull(result )\n            assert.equal (result, expectedResult);\n            done();\n        });\n    });\n\n    describe('Create user -- fail (empty email id)', () => {\n        it('Create user -- fail', async(done) => {\n            var oneInAMillion = Math.floor(Math.random() * (1000000) + 1);\n            emailAddress = 'john' + oneInAMillion + '@example.com';\n            logger.info('Sign up new user: ' + emailAddress);\n\n            const res = await request(app).post('/registration')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .send({'query':'mutation { createUser (tenantId: \"'+ tenantId +'\", email: \"' + '\", password: \"password\") { email id tenantId }   }'} )\n            const createdUser = await JSON.parse(res.text)['data']['createUser'];\n            assert.isNull(createdUser );\n            const result = JSON.parse(res.text)['errors'][0]['message'];\n            const expectedResult = 'User validation failed: email: Missing required email address.';\n            assert.isNotNull(result )\n            assert.equal (result, expectedResult);\n            done();\n        });\n    });\n\n    describe('Create user -- fail (empty tenant id)', () => {\n        it('Create user -- fail', async(done) => {\n            var oneInAMillion = Math.floor(Math.random() * (1000000) + 1);\n            emailAddress = 'john' + oneInAMillion + '@example.com';\n            logger.info('Sign up new user: ' + emailAddress);\n\n            const res = await request(app).post('/registration')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .send({'query':'mutation { createUser (tenantId: \"'+ '\", email: \"' + emailAddress + '\", password: \"password\") { email id tenantId }   }'} )\n            const createdUser = await JSON.parse(res.text)['data']['createUser'];\n            assert.isNull(createdUser );\n            const result = JSON.parse(res.text)['errors'][0]['message'];\n            const expectedResult = 'User validation failed: tenantId: Missing required tenant id.';\n            assert.isNotNull(result )\n            assert.equal (result, expectedResult);\n            done();\n        });\n    });\n\n\n    describe('Logging in user', () => {\n        it('Login User', async(done) => {\n            logger.info('Login user');\n            let res = await request(app).post('/registration')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .send({'query':' mutation { login(email: \"' + emailAddress + '\", password: \"password\") {authToken}  }'} )\n            JSON.parse(res.text)['data']['login']\n            assert.isNotNull(JSON.parse(res.text)['data']['login'] )\n            done();\n        })\n    });\n\n    describe('Logging in user', () => {\n        var bearerToken;\n        it('Login User', async(done) => {\n            logger.info('Login user');\n            let res = await request(app).post('/registration')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .send({'query':' mutation { login(email: \"' + emailAddress + '\", password: \"password\") {authToken} }'} )\n            bearerToken = JSON.parse(res.text)['data']['login']['authToken']\n            assert.isNotNull(JSON.parse(res.text)['data']['login']['authToken'] )\n\n            logger.info('Get logged in user info');\n            res = await request(app).post('/registration')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .set('Authorization', 'Bearer ' + bearerToken)\n                .send({'query':' {me { email      }    }'} )\n            assert.isNotNull(JSON.parse(res.text)['data']['me'] );\n            done();\n        })\n    });\n\n    describe('List users', () => {\n        var bearerToken;\n        it('List Users', async(done) => {\n            logger.info('Login user');\n            let res = await request(app).post('/registration')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .send({'query':' mutation { login(email: \"' + emailAddress + '\", password: \"password\") {authToken} }'} )\n            bearerToken = JSON.parse(res.text)['data']['login']['authToken']\n            assert.isNotNull(JSON.parse(res.text)['data']['login']['authToken'] )\n\n            logger.info('Get list of users');\n            res = await request(app).post('/registration')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .set('Authorization', 'Bearer ' + bearerToken)\n                .send({'query':' {listUsers { email      }    }'} )\n            assert.isNotNull(JSON.parse(res.text)['data']['listUsers'] );\n            assert.equal(JSON.parse(res.text)['data']['listUsers'].length, 1, 'list of users count');\n            done();\n        })\n    });\n\n\n\n\n    describe('Looking myself up -- fail (no bearer)', () => {\n        it('me', async(done) => {\n            logger.info('Looking myself up -- fail (no bearer)');\n            let res = await request(app).post('/registration')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .send({'query':' {me {  email      }    }'} )\n            assert.isNull(JSON.parse(res.text)['data']['me'] );\n            assert.isNotNull(JSON.parse(res.text)['errors'][0]['message'] )\n            done();\n        })\n    });\n\n    describe('Logging in user -- fail (incorrect password)', () => {\n        it('Login User', async(done) => {\n            logger.info('Logging in user -- fail (incorrect password)');\n            let res = await request(app).post('/registration')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .send({'query':' mutation { login(email: \"' + emailAddress + '\", password: \"NOT_ACTUAL_PASSWORD\") {authToken} } '} )\n            assert.isNull(JSON.parse(res.text)['data']['login'] );\n            const result = JSON.parse(res.text)['errors'][0]['message'];\n            const expectedResult = 'Incorrect password';\n            assert.isNotNull(result )\n            assert.equal (result, expectedResult);\n            done();\n        })\n    });\n\n    describe('Logging in user -- fail (too many attempts lock account)', () => {\n        it('Login User', async (done) => {\n            async function loginFailure(count, tooManyLoginsCheck){\n                logger.info('Enter loginFailure', [count, tooManyLoginsCheck]);\n                const res = await request(app).post('/registration')\n                    .set('Accept', 'application/json')\n                    .set('Content-Type', 'application/json')\n                    .send({'query':' mutation { login(email: \"' + emailAddress + '\", password: \"NOT_ACTUAL_PASSWORD\") {authToken}  }'} )\n                assert.isNull(JSON.parse(res.text)['data']['login'] );\n                if(tooManyLoginsCheck){\n                    const result = JSON.parse(res.text)['errors'][0]['message'];\n                    const expectedResult = 'Too many failed login attempts';\n                    assert.isNotNull(result )\n                    assert.equal (result, expectedResult);\n                }else{\n                    assert.isNull(JSON.parse(res.text)['data']['login'] );\n                    const result = JSON.parse(res.text)['errors'][0]['message'];\n                    const expectedResult = 'Incorrect password';\n                    assert.isNotNull(result )\n                    assert.equal (result, expectedResult);\n                }\n                logger.info('Exit loginFailure', [count, tooManyLoginsCheck]);\n            }\n            logger.info('Logging in user -- fail (too many attempts lock account)');\n            await loginFailure(1);       // failure 1\n            await loginFailure(2);       // failure 2\n            await loginFailure(3);       // failure 3\n            await loginFailure(4);       // failure 4\n            await loginFailure(5);       // failure 5\n            await loginFailure(6, true);   // failure 6 -- account locked\n            done();\n        });\n    });\n\n    describe('Reset password for user', () => {\n        it('Reset password', async(done) => {\n            logger.info('Reset password');\n            let res = await request(app).post('/registration')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .send({'query':'mutation { resetPassword(email: \"' + emailAddress + '\") {id email} }'} )\n            assert.isNotNull(JSON.parse(res.text)['data']['resetPassword'] );\n            assert.notExists(JSON.parse(res.text)['errors'])\n            done();\n        })\n    });\n\n    describe('Change password', () => {\n        var bearerToken;\n        it('Login User', async(done) => {\n            logger.info('Change password');\n            let res = await request(app).post('/registration')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .send({'query':' mutation { login(email: \"' + emailAddress + '\", password: \"password\") {authToken} }'} )\n            bearerToken = JSON.parse(res.text)['data']['login']['authToken']\n            assert.isNotNull(JSON.parse(res.text)['data']['login']['authToken'] )\n            done();\n        })\n        it('Change password: pass', async (done) => {\n            logger.info('Change password - pass');\n            let res = await request(app).post('/registration')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .set('Authorization', 'Bearer ' + bearerToken)\n                .send({'query':'mutation { changePassword (email: \"' + emailAddress + '\", currentpassword: \"password\", newpassword: \"password1\") {email tenantId}   }'} )\n            const result = JSON.parse(res.text)['errors'];\n            assert.notExists(result )\n            assert.isNotNull(JSON.parse(res.text)['data']['changePassword'] );\n            // verify login works with new password\n            res = await request(app).post('/registration')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .send({'query':' mutation { login(email: \"' + emailAddress + '\", password: \"password1\") {authToken} }'} )\n            bearerToken = JSON.parse(res.text)['data']['login']['authToken']\n            assert.isNotNull(JSON.parse(res.text)['data']['login']['authToken'] )\n            done();\n        })\n    });\n    describe('Change password -- fail', () => {\n        var bearerToken;\n        it('Login User', async(done) => {\n            logger.info('Change password - fail');\n            let res = await request(app).post('/registration')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .send({'query':' mutation { login(email: \"' + emailAddress + '\", password: \"password\") {authToken}}'} )\n            bearerToken = JSON.parse(res.text)['data']['login']['authToken']\n            assert.isNotNull(JSON.parse(res.text)['data']['login']['authToken'] )\n            done();\n        })\n        it('Change password: invalid password', async(done) => {\n            logger.info('Change password - invalid');\n            let res = await request(app).post('/registration')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .set('Authorization', 'Bearer ' + bearerToken)\n                .send({'query':'mutation { changePassword (email: \"' + emailAddress + '\", currentpassword: \"NOT_ACTUAL_PASSWORD\", newpassword: \"password1\")  {id email}  }'} )\n            assert.isNull(JSON.parse(res.text)['data']['changePassword'] );\n            const result = JSON.parse(res.text)['errors'][0]['message'];\n            const expectedResult = 'Incorrect password';\n            assert.isNotNull(result )\n            assert.equal (result, expectedResult);\n            done();\n        })\n    });\n});\n"]}