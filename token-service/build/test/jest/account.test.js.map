{"version":3,"sources":["../../../src/test/jest/account.test.js"],"names":["chai","require","assert","log4js","logger","getLogger","level","process","env","LOG_LEVEL","jsonwebtoken","Stellar","uuidv4","fees","Wallet","_wallet","StellarNetwork","_stellar","app","mongoose","delay","request","describe","bearerToken","bootstrapKeypair","bootstrapPublicKey","bootstrapSecret","masterKeypair","masterPublicKey","masterSecret","offeringFeeKey","issuingFeeKey","passphrase","beforeAll","done","jest","setTimeout","sign","tenantId","id","email","JWT_SECRET","expiresIn","info","STELLAR_NETWORK","Keypair","master","bootstrapTestAccount","publicKey","secret","masterAcct","loadAccount","sourceAcctSequenceNum","Number","sequence","trace","random","user","initializeExistingKeypair","error","destination","issuingFeeAccount","offeringFeeAccount","afterAll","connection","close","public_key","it","res","post","set","send","newSeededAccount","JSON","parse","text","isNotNull","description","equal","signers","length","weight","thresholds","low_threshold","master_weight","createdAt","balance","history","type","assetCreated","assets","asset_code","asset_issuer","fee","name","rate","accountsList","trustorPublicKey","issuerPublicKey","transactionId","trustorAccountCreated","issuerAccountCreated","trustAssetResult","signTransactionResult","createPaymentResult","hash","createSignerTransactionResult","xdr_representation","paymentTransactionId","operations","op_type","source_acct","notEqual","starting_balance","amount","issuerAccountCreated2","flags","auth_required","auth_revocable","setWeightThresholdOptionsResult","createFlagTransactionResult","createOfferResult","orderbook","counter","base","asset_type","offers","price","selling","buying","buyerPublicKey","isNull","result","expectedResult","dataResult","errorResult","message","transactionsToSign","transactionToSignId","set_flags_s","authorize","initatedTransactions","initiatedTransactionId","lockedDownPublicKey","lockedDownAccountCreated","preAuthorizeTransactionResult","transactionsToApprove","transactionsToApproveId","submitPreAuthorizedTransactionResult","memo","accountThatWillPreAuthPublicKey","accountThatWillPreAuthCreated","home_domain"],"mappings":"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","file":"account.test.js","sourcesContent":["const chai = require('chai');\nconst assert = chai.assert;\nconst log4js = require('log4js');\nconst logger = log4js.getLogger('account.test');\nlogger.level = process.env.LOG_LEVEL || 'debug';\nconst jsonwebtoken = require('jsonwebtoken');\nconst Stellar = require('stellar-sdk');\nconst uuidv4 = require('uuid/v4');\nconst fees = require('../../models/fees.json');\nconst Wallet  = require('../../models/Wallet');\nconst _wallet = new Wallet();\nconst StellarNetwork  = require('../../models/StellarNetwork');\nconst _stellar = new StellarNetwork();\n\n// application dependencies..\nconst app = require('../../app')\nconst mongoose = require('mongoose');\nrequire('../../config/initializers/database');\nrequire('./axios-debug')\nconst delay = require('delay');\n\nconst request = require('supertest');\n\ndescribe('Account Tests', function () {\n    let bearerToken;\n    let bootstrapKeypair;\n    let bootstrapPublicKey;\n    let bootstrapSecret;\n    let masterKeypair;\n    let masterPublicKey;\n    let masterSecret;\n    let offeringFeeKey;\n    let issuingFeeKey;\n    let passphrase = 'rememberme';\n\n    beforeAll(async(done) => {\n        jest.setTimeout(50000);\n        // return json web token\n        bearerToken = jsonwebtoken.sign({\n            tenantId: uuidv4(),\n            id: uuidv4(),\n            email: 'johndoe@example.com'\n        },\n        process.env.JWT_SECRET,{ expiresIn: '1D' })\n        logger.info('Bearer token',bearerToken );\n\n        if(process.env.STELLAR_NETWORK){\n            masterKeypair = Stellar.Keypair.master();\n        } else {\n            // if not network specified, we default to testnet + friendbot\n            masterKeypair = await _stellar.bootstrapTestAccount();\n        }\n\n        masterPublicKey = masterKeypair.publicKey();\n        masterSecret = masterKeypair.secret();\n\n        const masterAcct = await _stellar.loadAccount(masterPublicKey);\n        let sourceAcctSequenceNum = Number(masterAcct.sequence);\n        logger.trace('master acct sequence num starts ',sourceAcctSequenceNum);\n\n        bootstrapKeypair = Stellar.Keypair.random();\n        bootstrapPublicKey = bootstrapKeypair.publicKey();\n        bootstrapSecret = bootstrapKeypair.secret();\n\n        const user = {'id': uuidv4(), 'tenantId': uuidv4(), 'email': 'fee_collector@ibm.co'};\n\n        try {\n            const bootstrapTestAccount = await _wallet.initializeExistingKeypair(user, 'test bootstrap acct', masterPublicKey, masterSecret, sourceAcctSequenceNum, bootstrapPublicKey, bootstrapSecret, passphrase, '9000');\n            logger.trace('init keypair for bootstrapTestAccount ',bootstrapTestAccount);\n            sourceAcctSequenceNum = Number(sourceAcctSequenceNum) + Number(1);\n            logger.trace('master acct sequence num post bootstrap ',sourceAcctSequenceNum);\n        } catch (error) {\n            logger.trace('init keypair error',error);\n        }\n\n        offeringFeeKey = fees['FEE_OFFER'].destination;\n        issuingFeeKey = fees['FEE_ISSUANCE'].destination;\n\n        let issuingFeeAccount;\n        try{\n            issuingFeeAccount = await _stellar.loadAccount(issuingFeeKey);\n        }catch (error){\n            // ignore\n        }\n        if (!issuingFeeAccount) {\n            await _wallet.initializeExistingKeypair(user, 'issuing fee', masterPublicKey, masterSecret, sourceAcctSequenceNum, issuingFeeKey, 'SECRET_NOT_NEEDED', passphrase, '1000');\n            sourceAcctSequenceNum = Number(sourceAcctSequenceNum) + Number(1);\n        }\n        logger.trace('master acct sequence num post issuing ',sourceAcctSequenceNum);\n\n        let offeringFeeAccount;\n        try{\n            offeringFeeAccount = await _stellar.loadAccount(offeringFeeKey);\n        }catch (error){\n            // ignore\n        }\n        if (!offeringFeeAccount) {\n            await _wallet.initializeExistingKeypair(user, 'offering fee', masterPublicKey, masterSecret, sourceAcctSequenceNum, offeringFeeKey, 'SECRET_NOT_NEEDED', passphrase, '1000');\n            sourceAcctSequenceNum = Number(sourceAcctSequenceNum) + Number(1);\n        }\n\n        logger.trace('master acct sequence num post offering ',sourceAcctSequenceNum);\n        done();\n    });\n\n    //CLEAN UP DB connection\n    afterAll(async(done) => {\n        mongoose.connection.close();\n        done();\n    });\n\n    describe('Account flow including retrieving balances and history plus asset creation', () => {\n        let public_key = '';\n        it('Seed new account from source account', async(done) => {\n            logger.info('Seed new account from source account', [bootstrapPublicKey, bootstrapSecret]);\n            const res = await request(app).post('/account')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .set('Authorization', 'Bearer ' + bearerToken)\n                .send({'query':' mutation { createAccountFromSource (description:\"newly seeded account\" source_public_key:\"' + bootstrapPublicKey + '\" source_secret:\"' + bootstrapSecret + '\" passphrase:\"' + passphrase + '\"  initial_balance:\"20\") { ... on TF_Account { email tenantId public_key description thresholds {low_threshold} signers{weight} flags{auth_required}}}}'} );\n            const newSeededAccount = JSON.parse(res.text)['data']['createAccountFromSource']\n            assert.isNotNull(newSeededAccount);\n            assert.isNotNull(newSeededAccount.public_key);\n            assert.isNotNull(newSeededAccount.description);\n            assert.equal(1, newSeededAccount.signers.length);\n            assert.equal(1, newSeededAccount.signers[0].weight);\n            assert.equal(0, newSeededAccount.thresholds.low_threshold);\n            assert.isNotNull(newSeededAccount.thresholds.master_weight);\n            assert.isNotNull(newSeededAccount.signers[0].public_key);\n            public_key = newSeededAccount.public_key;\n            done();\n        },30000);\n\n        it('Retrieve newly created account', async(done) => {\n            logger.info('Retrieve new account for source account', [public_key]);\n            const res = await request(app).post('/account')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .set('Authorization', 'Bearer ' + bearerToken)\n                .send({'query':' { getAccount (public_key:\"'+ public_key + '\"){ ... on TF_Account { email description tenantId createdAt } public_key thresholds {low_threshold} signers{weight} flags{auth_required}}}'} );\n            const newSeededAccount = JSON.parse(res.text)['data']['getAccount']\n            assert.isNotNull(newSeededAccount, 'Verify the retrieved account is not null');\n            assert.isNotNull(newSeededAccount.public_key, 'Verify the retrieved public key is not null');\n            assert.isNotNull(newSeededAccount.createdAt, 'Verify the retrieved account has a createdAt date');\n            assert.equal(newSeededAccount.public_key, public_key, 'Verify public_key matches')\n            assert.isNotNull(newSeededAccount.description, 'Verify the retrieved description is not null');\n            assert.equal(newSeededAccount.description,'newly seeded account', 'Verify description matches')\n            assert.isNotNull(newSeededAccount.thresholds, 'Verify the retrieved thresholds are not null');\n            assert.isNotNull(newSeededAccount.signers, 'Verify the retrieved signers are not null');\n            done();\n        },30000);\n        it('Get balances for account', async(done) => {\n            logger.info('Get balance',public_key);\n            const res = await request(app).post('/account')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .set('Authorization', 'Bearer ' + bearerToken)\n                .send({'query':' { getBalances (public_key:\"'+ public_key +\n                    '\") {network asset_code asset_issuer balance} }'} );\n            const balance = JSON.parse(res.text)['data']['getBalances'];\n            assert.isNotNull(balance );\n            done();\n        },15000)\n        it('Get history for account', async(done) => {\n            logger.info('Get history', public_key);\n            await delay(5000);// give chance for transactions to complete\n            const res = await request(app).post('/account')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .set('Authorization', 'Bearer ' + bearerToken)\n                .send({'query':' { getHistory (public_key:\"'+ public_key\n                    + '\") { id transaction_hash source_account type created_at ... on Create_Account {starting_balance} ... on Payment {amount transaction_hash} } }'} );\n            const history = JSON.parse(res.text)['data']['getHistory'];\n            assert.isNotNull(history);\n            assert.equal(1, history.length);\n            assert.equal('create_account', history[0].type);\n            done();\n        })\n\n        it('Verify creation of asset', async(done) => {\n            logger.info('Create asset', public_key);\n            const res = await request(app).post('/account')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .set('Authorization', 'Bearer ' + bearerToken)\n                .send({'query':' mutation { createAsset (asset_issuer:\"'+ public_key+ '\" asset_code:\"AstroDollars\"'+\n                    'description:\"Jetson dollars\") { asset_code asset_issuer ... on TF_Asset { description tenantId email createdAt updatedAt } } }'} );\n            const assetCreated = JSON.parse(res.text)['data']['createAsset'];\n            assert.equal(assetCreated.description,'Jetson dollars', 'Verify description matches')\n            assert.isNotNull(assetCreated );\n            done();\n        })\n        it('Verify creation of duplicate asset fails', async(done) => {\n            logger.info('Create asset', public_key);\n            const res = await request(app).post('/account')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .set('Authorization', 'Bearer ' + bearerToken)\n                .send({'query':' mutation { createAsset (asset_issuer:\"'+ public_key+ '\" asset_code:\"AstroDollars\"'+\n                    'description:\"Jetson dollars\") { asset_code asset_issuer ... on TF_Asset { description tenantId email createdAt updatedAt } } }'} );\n            const assetCreated = JSON.parse(res.text)['errors'][0]['message'];\n            assert.isNotNull(assetCreated );\n            done();\n        })\n\n        it('Verify list of assets returned', async(done) => {\n            logger.info('Get Assets');\n            const res = await request(app).post('/account')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .set('Authorization', 'Bearer ' + bearerToken)\n                .send({'query':' { getAssets { asset_code asset_issuer ... on TF_Asset { description tenantId email createdAt updatedAt}  } }'} );\n            const assets = JSON.parse(res.text)['data']['getAssets'];\n            assert.isNotNull(assets );\n            assert.equal(1, assets.length); // Verify we can retrieve the created asset\n            assert.equal(assets[0].description,'Jetson dollars', 'Verify description matches')\n            assert.equal(assets[0].asset_code,'AstroDollars', 'Verify asset code matches')\n            assert.equal(assets[0].asset_issuer, public_key, 'Verify owner matches')\n            done();\n        })\n    });\n\n    describe('Get fees', () => {\n        it('Get fees', async(done) => {\n            logger.info('Get fees');\n            const res = await request(app).post('/account')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .set('Authorization', 'Bearer ' + bearerToken)\n                .send({'query':' { getFee (type: \"FEE_ISSUANCE\") {name description rate type }}'} )\n            const fee = JSON.parse(res.text)['data']['getFee']\n            assert.isNotNull(fee );\n            assert.isNotNull (fee.name);\n            assert.isNotNull (fee.description);\n            assert.isNotNull (fee.rate);\n            assert.isNotNull (fee.type);\n            done();\n        },30000)\n    });\n\n    describe('Get accounts for tenant', () => {\n        it('Get accounts', async(done) => {\n            logger.info('Get accounts');\n            const res = await request(app).post('/account')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .set('Authorization', 'Bearer ' + bearerToken)\n                .send({'query':' { getAccounts { ... on TF_Account { createdAt email description tenantId }  public_key  thresholds{low_threshold} signers{weight} flags{auth_required} }}'} )\n            const accountsList = JSON.parse(res.text)['data']['getAccounts']\n            assert.isNotNull(accountsList );\n            assert.equal(1, accountsList.length);\n            done();\n        },30000)\n    });\n\n    describe('Create transaction for a given asset', () => {\n        let trustorPublicKey='';\n        let issuerPublicKey='';\n        let transactionId = '';\n\n        it('Create trustor account for new asset', async(done) => {\n            logger.info('Create trustor account',[ bootstrapPublicKey, bootstrapSecret]);\n            const res = await request(app).post('/account')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .set('Authorization', 'Bearer ' + bearerToken)\n                .send({'query':' mutation { createAccountFromSource (description:\"trustorAccount\" source_public_key:\"' + bootstrapPublicKey + '\" source_secret:\"' + bootstrapSecret + '\" passphrase:\"' + passphrase + '\" initial_balance:\"400\") { ... on TF_Account { email tenantId public_key description} thresholds {low_threshold} signers{weight} flags{auth_required}}}'} );\n            const trustorAccountCreated = JSON.parse(res.text)['data']['createAccountFromSource']\n            assert.isNotNull(trustorAccountCreated);\n            assert.isNotNull(trustorAccountCreated.description);\n            assert.isNotNull(trustorAccountCreated.public_key);\n            trustorPublicKey = trustorAccountCreated.public_key;\n            done();\n        },30000)\n\n        it('Create issuer account for new asset', async(done) => {\n            logger.info('Create issuer account', [ bootstrapPublicKey, bootstrapSecret]);\n            const res = await request(app).post('/account')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .set('Authorization', 'Bearer ' + bearerToken)\n                .send({'query':' mutation { createAccountFromSource (description:\"issuerAccount\" source_public_key:\"' + bootstrapPublicKey + '\" source_secret:\"' + bootstrapSecret + '\" passphrase:\"' + passphrase +  '\" initial_balance:\"400\") { ... on TF_Account { email tenantId public_key description} thresholds {low_threshold} signers{weight} flags{auth_required}}}'} );\n            const issuerAccountCreated = JSON.parse(res.text)['data']['createAccountFromSource']\n            assert.isNotNull(issuerAccountCreated);\n            assert.isNotNull(issuerAccountCreated.description);\n            assert.isNotNull(issuerAccountCreated.public_key);\n            issuerPublicKey = issuerAccountCreated.public_key;\n            done();\n        },30000)\n\n        it('Trust Asset ', async(done) => {\n            logger.info('Trust Asset', [issuerPublicKey]);\n            const res = await request(app).post('/account')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .set('Authorization', 'Bearer ' + bearerToken)\n                .send({'query':' mutation { createTrustTransaction (trustor_public_key:\"' + trustorPublicKey + '\" asset_issuer:\"' + issuerPublicKey + '\" asset_code:\"Yellen\" limit:\"2000\") {id}}'} );\n\n            const trustAssetResult = JSON.parse(res.text)['data']['createTrustTransaction'];\n            transactionId = trustAssetResult.id;\n            assert.isNotNull(trustAssetResult);\n            done();\n        },30000)\n\n        it('Sign Transaction ', async(done) => {\n            logger.info('Sign Transaction', [issuerPublicKey, transactionId]);\n            const res = await request(app).post('/account')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .set('Authorization', 'Bearer ' + bearerToken)\n                .send({'query':' mutation { signTransaction (public_key:\"' + trustorPublicKey + '\" passphrase:\"' + passphrase + '\" transaction_id:\"' + transactionId + '\") {id type source_acct xdr_representation}}'} );\n            const signTransactionResult = JSON.parse(res.text)['data']['signTransaction'];\n            assert.isNotNull(signTransactionResult);\n            assert.equal(signTransactionResult.id, transactionId, 'Transaction ID does not match');\n            done();\n        },30000)\n\n\n        it('Create Payment of New Asset ', async(done) => {\n            logger.info('Create Payment of New Asset', [issuerPublicKey]);\n            const res = await request(app).post('/account')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .set('Authorization', 'Bearer ' + bearerToken)\n                .send({'query':' mutation { createPayment (sender_public_key:\"' + issuerPublicKey + '\" receiver_public_key:\"' + trustorPublicKey + '\" asset_issuer:\"' + issuerPublicKey + '\" asset_code:\"Yellen\" amount:\"2000\") {id hash}}'} );\n            const createPaymentResult = JSON.parse(res.text)['data']['createPayment'];\n            transactionId = createPaymentResult.id;\n            assert.isNotNull(createPaymentResult);\n            assert.isNotNull(createPaymentResult.description);\n            assert.isNotNull(createPaymentResult.hash);\n            done();\n        },30000)\n\n        it('Sign Transaction ', async(done) => {\n            logger.info('Sign Transaction', [issuerPublicKey, transactionId]);\n            const res = await request(app).post('/account')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .set('Authorization', 'Bearer ' + bearerToken)\n                .send({'query':' mutation { signTransaction (public_key:\"' + issuerPublicKey + '\" passphrase:\"' + passphrase + '\" transaction_id:\"' + transactionId + '\") {id type source_acct xdr_representation}}'} );\n            const signTransactionResult = JSON.parse(res.text)['data']['signTransaction'];\n            assert.isNotNull(signTransactionResult);\n            assert.equal(signTransactionResult.id, transactionId, 'Transaction ID does not match');\n            done();\n        },30000)\n\n        it('Create Signer Transaction ', async(done) => {\n            logger.info('Set up Signer Options Transaction ', [issuerPublicKey]);\n            const res = await request(app).post('/account')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .set('Authorization', 'Bearer ' + bearerToken)\n                .send({'query':' mutation {  createSignerTransaction (public_key:\"' + issuerPublicKey + '\" signer:\"' + trustorPublicKey + '\" weight:1) {id hash}}'} );\n            const createSignerTransactionResult = JSON.parse(res.text)['data']['createSignerTransaction'];\n            transactionId = createSignerTransactionResult.id;\n            assert.isNotNull(createSignerTransactionResult.hash);\n            assert.isNotNull(createSignerTransactionResult.description);\n            assert.isNotNull(createSignerTransactionResult);\n\n            done();\n        },30000)\n\n        it('Sign Transaction ', async(done) => {\n            logger.info('Sign Transaction', [issuerPublicKey, transactionId]);\n            const res = await request(app).post('/account')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .set('Authorization', 'Bearer ' + bearerToken)\n                .send({'query':' mutation { signTransaction (public_key:\"' + issuerPublicKey + '\" passphrase:\"' + passphrase + '\" transaction_id:\"' + transactionId + '\") {id type source_acct xdr_representation}}'} );\n            const signTransactionResult = JSON.parse(res.text)['data']['signTransaction'];\n            assert.isNotNull(signTransactionResult);\n            assert.equal(signTransactionResult.id, transactionId, 'Transaction ID does not match');\n            done();\n        },30000)\n\n        let xdr_representation ='';\n        let paymentTransactionId = '';\n\n        it('Create Payment Transaction ', async(done) => {\n            logger.info('Create Payment Transaction', [issuerPublicKey]);\n            const res = await request(app).post('/account')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .set('Authorization', 'Bearer ' + bearerToken)\n                .send({'query':' mutation { createPayment (sender_public_key:\"' + issuerPublicKey + '\" receiver_public_key:\"' + trustorPublicKey + '\" asset_issuer:\"' + issuerPublicKey + '\" asset_code:\"XLM\" amount:\"0.1\") {id type source_acct xdr_representation  operations{op_type source_acct signatures{public_key signed}} }}'} );\n            const createPaymentResult = JSON.parse(res.text)['data']['createPayment'];\n            assert.isNotNull(createPaymentResult);\n            assert.isNotNull(createPaymentResult.description);\n            assert.isNotNull(createPaymentResult.operations[0].op_type);\n            assert.equal(createPaymentResult.operations[0].source_acct, issuerPublicKey, 'Payment operation source key does not match');\n            assert.equal(createPaymentResult.source_acct, issuerPublicKey, 'Payment transaction source key does not match');\n            xdr_representation = createPaymentResult.xdr_representation;\n            paymentTransactionId = createPaymentResult.id;\n            done();\n        },30000)\n\n        it('Sign Transaction ', async(done) => {\n            logger.info('Sign Transaction', [issuerPublicKey, xdr_representation, paymentTransactionId]);\n            const res = await request(app).post('/account')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .set('Authorization', 'Bearer ' + bearerToken)\n                .send({'query':' mutation { signTransaction (public_key:\"' + issuerPublicKey + '\" passphrase:\"' + passphrase + '\" transaction_id:\"' + paymentTransactionId + '\") {id type source_acct xdr_representation}}'} );\n            const signTransactionResult = JSON.parse(res.text)['data']['signTransaction'];\n            assert.isNotNull(signTransactionResult);\n            assert.equal(signTransactionResult.id, paymentTransactionId, 'Transaction ID does not match');\n            assert.notEqual(signTransactionResult.xdr_representation, xdr_representation, 'Serialized transaction should be different after signature');\n            done();\n        },30000)\n\n\n\n        it('Get history for account with create payment', async(done) => {\n            logger.info('Get history for account with create payment', [issuerPublicKey]);\n            await delay(5000);// give chance for transactions to complete\n            const res = await request(app).post('/account')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .set('Authorization', 'Bearer ' + bearerToken)\n                .send({'query':' { getHistory (public_key:\"'+ issuerPublicKey\n                    + '\") { id transaction_hash source_account type created_at ... on Create_Account {starting_balance} ... on Payment {amount memo transaction_hash} ... on Manage_Offer {buying_asset_type buying_asset_code buying_asset_issuer selling_asset_type selling_asset_code selling_asset_issuer amount offer_id price}} }'} );\n            const history = JSON.parse(res.text)['data']['getHistory'];\n            assert.isNotNull(history);\n            assert.equal(6, history.length);\n            assert.equal('create_account', history[0].type);\n            assert.isNotNull(history[0].starting_balance);\n            assert.equal('payment', history[1].type);    // offer\n            assert.equal('payment', history[2].type); // IBM fee charged for offers\n            assert.isNotNull(history[1].amount);\n            assert.equal('set_options', history[3].type);    // add signer\n            assert.equal('payment', history[4].type);    // offer\n            assert.isNotNull(history[4].amount);\n            assert.equal('payment', history[5].type); // IBM fee charged for offers\n            done();\n        })\n\n        it('Create account from source - trust auth required', async(done) => {\n            logger.info('Create account from source - trust auth required', [ bootstrapPublicKey, bootstrapSecret]);\n            const res = await request(app).post('/account')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .set('Authorization', 'Bearer ' + bearerToken)\n                .send({'query':' mutation { createAccountFromSource (description:\"issuerAccount2\" source_public_key:\"' + bootstrapPublicKey + '\" source_secret:\"' + bootstrapSecret + '\" passphrase:\"' + passphrase +  '\" initial_balance:\"400\" trust_auth_required:true) { ... on TF_Account { email tenantId public_key description} thresholds {low_threshold} signers{weight} flags{auth_required auth_revocable}}}'} );\n            const issuerAccountCreated2 = JSON.parse(res.text)['data']['createAccountFromSource']\n            logger.info('#result#', res.text);\n            assert.isNotNull(issuerAccountCreated2);\n            assert.isNotNull(issuerAccountCreated2.description);\n            assert.isNotNull(issuerAccountCreated2.public_key);\n            assert.equal(true, issuerAccountCreated2.flags.auth_required);\n            assert.equal(true, issuerAccountCreated2.flags.auth_revocable);\n            done();\n        },30000)\n    });\n\n\n    describe('Set weight threshold options', () => {\n        let issuerPublicKey = '';\n        let trustorPublicKey = '';\n        let transactionId = '';\n\n        it('Create new issuer account from source account', async(done) => {\n            logger.info('Seed new account from source account', [bootstrapPublicKey, bootstrapSecret]);\n            const res = await request(app).post('/account')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .set('Authorization', 'Bearer ' + bearerToken)\n                .send({'query':' mutation { createAccountFromSource (description:\"issuer account\" source_public_key:\"' + bootstrapPublicKey + '\" source_secret:\"' + bootstrapSecret + '\" passphrase:\"' + passphrase + '\" initial_balance:\"400\") { ... on TF_Account { email tenantId public_key description} thresholds {low_threshold} signers{weight} flags{auth_required}}}'} );\n            const newSeededAccount = JSON.parse(res.text)['data']['createAccountFromSource']\n            assert.isNotNull(newSeededAccount);\n            assert.isNotNull(newSeededAccount.public_key);\n            issuerPublicKey = newSeededAccount.public_key;\n            done();\n        },30000);\n\n        it('Create trustor account for new asset', async(done) => {\n            logger.info('Create trustor account',[ bootstrapPublicKey, bootstrapSecret]);\n            const res = await request(app).post('/account')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .set('Authorization', 'Bearer ' + bearerToken)\n                .send({'query':' mutation { createAccountFromSource (description:\"trustorAccount\" source_public_key:\"' + bootstrapPublicKey + '\" source_secret:\"' + bootstrapSecret + '\" passphrase:\"' + passphrase +  '\" initial_balance:\"400\") { ... on TF_Account { email tenantId public_key description} thresholds {low_threshold} signers{weight} flags{auth_required}}}'} );\n            const trustorAccountCreated = JSON.parse(res.text)['data']['createAccountFromSource']\n            assert.isNotNull(trustorAccountCreated);\n            assert.isNotNull(trustorAccountCreated.description);\n            assert.isNotNull(trustorAccountCreated.public_key);\n            trustorPublicKey = trustorAccountCreated.public_key;\n            done();\n        },30000)\n\n        it('Create weight threshold transaction ', async(done) => {\n            logger.info('Create weight threshold transaction', [issuerPublicKey]);\n            const res = await request(app).post('/account')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .set('Authorization', 'Bearer ' + bearerToken)\n                .send({'query':' mutation { createWeightThresholdTransaction (public_key:\"' + issuerPublicKey + '\" weight:2 low:1 medium:1 high:2) {hash id}}'} );\n            const setWeightThresholdOptionsResult = JSON.parse(res.text)['data']['createWeightThresholdTransaction'];\n            assert.isNotNull(setWeightThresholdOptionsResult);\n            assert.isNotNull(setWeightThresholdOptionsResult.description);\n            assert.isNotNull(setWeightThresholdOptionsResult.hash);\n            transactionId = setWeightThresholdOptionsResult.id;\n            done();\n        },30000)\n\n        it('Sign Transaction ', async(done) => {\n            logger.info('Sign Transaction', [issuerPublicKey]);\n            const res = await request(app).post('/account')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .set('Authorization', 'Bearer ' + bearerToken)\n                .send({'query':' mutation { signTransaction (public_key:\"' + issuerPublicKey + '\" passphrase:\"' + passphrase + '\" transaction_id:\"' + transactionId + '\") {id type source_acct xdr_representation}}'} );\n            const signTransactionResult = JSON.parse(res.text)['data']['signTransaction'];\n            assert.isNotNull(signTransactionResult);\n            assert.equal(signTransactionResult.id, transactionId, 'Transaction ID does not match');\n            done();\n        },30000)\n\n        it('Create Signer Transaction - Delete', async(done) => {\n            logger.info('Set up Signer Options Transaction - Delete', [issuerPublicKey]);\n            const res = await request(app).post('/account')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .set('Authorization', 'Bearer ' + bearerToken)\n                .send({'query':' mutation {  createSignerTransaction (public_key:\"' + issuerPublicKey + '\" signer:\"' + trustorPublicKey + '\" weight:0) {id hash}}'} );\n            const createSignerTransactionResult = JSON.parse(res.text)['data']['createSignerTransaction'];\n            transactionId = createSignerTransactionResult.id;\n            assert.isNotNull(createSignerTransactionResult);\n            assert.isNotNull(createSignerTransactionResult.description);\n            assert.isNotNull(createSignerTransactionResult.hash);\n            done();\n        },30000)\n\n        it('Sign Transaction ', async(done) => {\n            logger.info('Sign Transaction', [issuerPublicKey, transactionId]);\n            const res = await request(app).post('/account')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .set('Authorization', 'Bearer ' + bearerToken)\n                .send({'query':' mutation { signTransaction (public_key:\"' + issuerPublicKey + '\" passphrase:\"' + passphrase + '\" transaction_id:\"' + transactionId + '\") {id type source_acct xdr_representation}}'} );\n            const signTransactionResult = JSON.parse(res.text)['data']['signTransaction'];\n            assert.isNotNull(signTransactionResult);\n            assert.equal(signTransactionResult.id, transactionId, 'Transaction ID does not match');\n            done();\n        },30000)\n\n        it('Create Flag Transaction - set', async(done) => {\n            logger.info('Set up Flag Options Transaction - Set Flags', [issuerPublicKey]);\n            const res = await request(app).post('/account')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .set('Authorization', 'Bearer ' + bearerToken)\n                .send({'query':' mutation {  createFlagTransaction (public_key:\"' + issuerPublicKey + '\" flag_operation:\"setFlags\" flag_to_set:\"AuthRequiredFlag\") {id hash}}'} );\n            const createFlagTransactionResult = JSON.parse(res.text)['data']['createFlagTransaction'];\n            transactionId = createFlagTransactionResult.id;\n            assert.isNotNull(createFlagTransactionResult);\n            assert.isNotNull(createFlagTransactionResult.description);\n            assert.isNotNull(createFlagTransactionResult.hash);\n            done();\n        },30000)\n\n        it('Sign Transaction ', async(done) => {\n            logger.info('Sign Transaction', [issuerPublicKey, transactionId]);\n            const res = await request(app).post('/account')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .set('Authorization', 'Bearer ' + bearerToken)\n                .send({'query':' mutation { signTransaction (public_key:\"' + issuerPublicKey + '\" passphrase:\"' + passphrase + '\" transaction_id:\"' + transactionId + '\") {id type source_acct xdr_representation}}'} );\n            const signTransactionResult = JSON.parse(res.text)['data']['signTransaction'];\n            assert.isNotNull(signTransactionResult);\n            assert.equal(signTransactionResult.id, transactionId, 'Transaction ID does not match');\n            done();\n        },30000)\n\n        it('Create Flag Transaction - clear', async(done) => {\n            logger.info('Set up Flag Options Transaction - Clear Flags', [issuerPublicKey]);\n            const res = await request(app).post('/account')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .set('Authorization', 'Bearer ' + bearerToken)\n                .send({'query':' mutation {  createFlagTransaction (public_key:\"' + issuerPublicKey + '\" flag_operation:\"clearFlags\" flag_to_set:\"AuthRequiredFlag\") {id hash}}'} );\n            const createFlagTransactionResult = JSON.parse(res.text)['data']['createFlagTransaction'];\n            transactionId = createFlagTransactionResult.id;\n            assert.isNotNull(createFlagTransactionResult);\n            assert.isNotNull(createFlagTransactionResult.description);\n            assert.isNotNull(createFlagTransactionResult.hash);\n            done();\n        },30000)\n\n        it('Sign Transaction ', async(done) => {\n            logger.info('Sign Transaction', [issuerPublicKey, transactionId]);\n            const res = await request(app).post('/account')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .set('Authorization', 'Bearer ' + bearerToken)\n                .send({'query':' mutation { signTransaction (public_key:\"' + issuerPublicKey + '\" passphrase:\"' + passphrase + '\" transaction_id:\"' + transactionId + '\") {id type source_acct xdr_representation}}'} );\n            const signTransactionResult = JSON.parse(res.text)['data']['signTransaction'];\n            assert.isNotNull(signTransactionResult);\n            assert.equal(signTransactionResult.id, transactionId, 'Transaction ID does not match');\n            done();\n        },30000)\n    });\n\n    describe('Create and Sign Offer', () => {\n        let issuerPublicKey = '';\n        let transactionId = '';\n\n        it('Create new issuer account from source account', async(done) => {\n            logger.info('Seed new account from source account', [bootstrapPublicKey, bootstrapSecret]);\n            const res = await request(app).post('/account')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .set('Authorization', 'Bearer ' + bearerToken)\n                .send({'query':' mutation { createAccountFromSource (description:\"issuer account\" source_public_key:\"' + bootstrapPublicKey + '\" source_secret:\"' + bootstrapSecret + '\" passphrase:\"' + passphrase + '\" initial_balance:\"2000\") { ... on TF_Account { email tenantId public_key description} thresholds {low_threshold} signers{weight} flags{auth_required}}}'} );\n            const newSeededAccount = JSON.parse(res.text)['data']['createAccountFromSource']\n            assert.isNotNull(newSeededAccount);\n            assert.isNotNull(newSeededAccount.public_key);\n            issuerPublicKey = newSeededAccount.public_key;\n            done();\n        },30000);\n\n        it('Verify creation of asset', async(done) => {\n            logger.info('Create asset', issuerPublicKey);\n            const res = await request(app).post('/account')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .set('Authorization', 'Bearer ' + bearerToken)\n                .send({'query':' mutation { createAsset (asset_issuer:\"'+ issuerPublicKey+ '\" asset_code:\"Bernanke\"'+\n                    'description:\"Benji Bucks\") { asset_code asset_issuer ... on TF_Asset { description tenantId email createdAt updatedAt } } }'} );\n            const assetCreated = JSON.parse(res.text)['data']['createAsset'];\n            assert.equal(assetCreated.description,'Benji Bucks', 'Verify description matches')\n            assert.isNotNull(assetCreated );\n            done();\n        })\n\n        it('Create offer of asset ', async(done) => {\n            logger.info('Create offer of asset', [issuerPublicKey]);\n            const res = await request(app).post('/account')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .set('Authorization', 'Bearer ' + bearerToken)\n                .send({'query':' mutation { createOffer (public_key:\"' + issuerPublicKey + '\" sell_asset_code:\"Bernanke\" sell_asset_issuer:\"' + issuerPublicKey + '\" sell_amount:\"100\" buy_asset_code:\"XLM\" buy_amount:\"100\") {id type source_acct description xdr_representation submitted}}'} );\n            const createOfferResult = JSON.parse(res.text)['data']['createOffer'];\n            assert.isNotNull(createOfferResult);\n            assert.isNotNull(createOfferResult.description);\n            transactionId = createOfferResult.id;\n            done();\n        },30000)\n\n        it('Sign Offer ', async(done) => {\n            logger.info('Sign Transaction', [issuerPublicKey]);\n            const res = await request(app).post('/account')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .set('Authorization', 'Bearer ' + bearerToken)\n                .send({'query':' mutation { signTransaction (public_key:\"' + issuerPublicKey + '\" passphrase:\"' + passphrase + '\" transaction_id:\"' + transactionId + '\") {id type source_acct xdr_representation}}'} );\n            const signTransactionResult = JSON.parse(res.text)['data']['signTransaction'];\n            assert.isNotNull(signTransactionResult);\n            assert.equal(signTransactionResult.id, transactionId, 'Transaction ID does not match');\n            done();\n        },30000)\n\n        it('Create offer of asset ', async(done) => {\n            logger.info('Create offer of asset', [issuerPublicKey]);\n            const res = await request(app).post('/account')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .set('Authorization', 'Bearer ' + bearerToken)\n                .send({'query':' mutation { createOffer (public_key:\"' + issuerPublicKey + '\" sell_asset_code:\"Bernanke\" sell_asset_issuer:\"' + issuerPublicKey + '\" sell_amount:\"33\" buy_asset_code:\"XLM\" buy_amount:\"11\") {id type source_acct description xdr_representation submitted}}'} );\n            const createOfferResult = JSON.parse(res.text)['data']['createOffer'];\n            assert.isNotNull(createOfferResult);\n            transactionId = createOfferResult.id;\n            done();\n        },30000)\n\n        it('Sign Offer ', async(done) => {\n            logger.info('Sign Transaction', [issuerPublicKey]);\n            const res = await request(app).post('/account')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .set('Authorization', 'Bearer ' + bearerToken)\n                .send({'query':' mutation { signTransaction (public_key:\"' + issuerPublicKey + '\" passphrase:\"' + passphrase + '\" transaction_id:\"' + transactionId + '\") {id type source_acct xdr_representation}}'} );\n            const signTransactionResult = JSON.parse(res.text)['data']['signTransaction'];\n            assert.isNotNull(signTransactionResult);\n            assert.equal(signTransactionResult.id, transactionId, 'Transaction ID does not match');\n            done();\n        },30000)\n\n        it('Get Orderbook for offers of that asset', async(done) => {\n            logger.info('Get Orderbook', [issuerPublicKey]);\n            const res = await request(app).post('/account')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .set('Authorization', 'Bearer ' + bearerToken)\n                .send({'query':' { getOrderbook (buy_asset_code:\"Bernanke\" buy_asset_issuer:\"' + issuerPublicKey + '\" sell_asset_code:\"XLM\"'\n                    + ') { bids { price amount } asks { price amount} base {asset_code asset_type} counter {asset_code asset_type}  } }'} );\n            const orderbook = JSON.parse(res.text)['data']['getOrderbook'];\n            assert.isNotNull(orderbook);\n            assert.equal(orderbook.counter.asset_code, 'Bernanke');\n            assert.equal(orderbook.base.asset_type, 'native');\n            done();\n        })\n\n        it('Get offers for account', async(done) => {\n            logger.info('Get Offers', [issuerPublicKey]);\n            const res = await request(app).post('/account')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .set('Authorization', 'Bearer ' + bearerToken)\n                .send({'query':' { getOffers (public_key:\"'+ issuerPublicKey\n                    + '\") { id price amount selling {asset_code asset_type} buying {asset_code asset_type} } }'} );\n            const offers = JSON.parse(res.text)['data']['getOffers'];\n            assert.isNotNull(offers);\n            assert.equal(offers.length, 2);\n            assert.isNotNull(offers[0].id);\n            assert.equal(offers[0].price, '1.0000000');\n            assert.equal(offers[0].amount, '100.0000000');\n            assert.equal(offers[0].selling.asset_code, 'Bernanke');\n            assert.equal(offers[0].buying.asset_type, 'native');\n            assert.equal(offers[1].price, '0.3333333');\n            assert.equal(offers[1].amount, '33.0000000');\n            assert.equal(offers[1].selling.asset_code, 'Bernanke');\n            assert.equal(offers[1].buying.asset_type, 'native');\n            done();\n        })\n\n\n\n        let buyerPublicKey = '';\n        it('Create new buyer account from source account', async(done) => {\n            logger.info('Seed new account from source account', [bootstrapPublicKey, bootstrapSecret]);\n            const res = await request(app).post('/account')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .set('Authorization', 'Bearer ' + bearerToken)\n                .send({'query':' mutation { createAccountFromSource (description:\"buyer account\" source_public_key:\"' + bootstrapPublicKey + '\" source_secret:\"' + bootstrapSecret + '\" passphrase:\"' + passphrase +  '\" initial_balance:\"2000\") { ... on TF_Account { email tenantId public_key description} thresholds {low_threshold} signers{weight} flags{auth_required}}}'} );\n            const newSeededAccount = JSON.parse(res.text)['data']['createAccountFromSource']\n            assert.isNotNull(newSeededAccount);\n            assert.isNotNull(newSeededAccount.public_key);\n            buyerPublicKey = newSeededAccount.public_key;\n            done();\n        },30000);\n\n        it('Trust Asset ', async(done) => {\n            logger.info('Trust Asset', [issuerPublicKey]);\n            const res = await request(app).post('/account')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .set('Authorization', 'Bearer ' + bearerToken)\n                .send({'query':' mutation { createTrustTransaction (trustor_public_key:\"' + buyerPublicKey + '\" asset_issuer:\"' + issuerPublicKey + '\" asset_code:\"Bernanke\" limit:\"200000\") {id}}'} );\n\n            const trustAssetResult = JSON.parse(res.text)['data']['createTrustTransaction'];\n            assert.isNotNull(trustAssetResult.description);\n            transactionId = trustAssetResult.id;\n            assert.isNotNull(trustAssetResult);\n            done();\n        },30000)\n\n        it('Sign Transaction ', async(done) => {\n            logger.info('Sign Transaction', [issuerPublicKey, transactionId]);\n            const res = await request(app).post('/account')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .set('Authorization', 'Bearer ' + bearerToken)\n                .send({'query':' mutation { signTransaction (public_key:\"' + buyerPublicKey + '\" passphrase:\"' + passphrase + '\" transaction_id:\"' + transactionId + '\") {id type source_acct xdr_representation}}'} );\n            const signTransactionResult = JSON.parse(res.text)['data']['signTransaction'];\n            assert.isNotNull(signTransactionResult);\n            assert.equal(signTransactionResult.id, transactionId, 'Transaction ID does not match');\n            done();\n        },30000)\n\n        it('Create offer to buy asset ', async(done) => {\n            logger.info('Create offer of asset', [issuerPublicKey]);\n            const res = await request(app).post('/account')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .set('Authorization', 'Bearer ' + bearerToken)\n                .send({'query':' mutation { createOffer (public_key:\"' + buyerPublicKey + '\" buy_asset_code:\"Bernanke\" buy_asset_issuer:\"' + issuerPublicKey + '\" buy_amount:\"100\" sell_asset_code:\"XLM\" sell_amount:\"100\") {id type source_acct description xdr_representation submitted}}'} );\n            const createOfferResult = JSON.parse(res.text)['data']['createOffer'];\n            assert.isNotNull(createOfferResult);\n            assert.isNotNull(createOfferResult.description);\n            transactionId = createOfferResult.id;\n            done();\n        },30000)\n\n        it('Sign Offer ', async(done) => {\n            logger.info('Sign Transaction', [buyerPublicKey]);\n            const res = await request(app).post('/account')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .set('Authorization', 'Bearer ' + bearerToken)\n                .send({'query':' mutation { signTransaction (public_key:\"' + buyerPublicKey + '\" passphrase:\"' + passphrase + '\" transaction_id:\"' + transactionId + '\") {id type source_acct xdr_representation}}'} );\n            const signTransactionResult = JSON.parse(res.text)['data']['signTransaction'];\n            assert.isNotNull(signTransactionResult);\n            assert.equal(signTransactionResult.id, transactionId, 'Transaction ID does not match');\n            done();\n        },30000)\n\n\n        it('Get history for account with offers with orderbook ', async(done) => {\n            logger.info('Get history with offers with orderbook', [buyerPublicKey]);\n            await delay(5000); // give chance for transactions to complete\n            const res = await request(app).post('/account')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .set('Authorization', 'Bearer ' + bearerToken)\n                .send({'query':' { getHistory (public_key:\"'+ buyerPublicKey\n                    + '\") { id transaction_hash source_account type created_at ... on Create_Account {starting_balance} ... on Payment {amount transaction_hash} ... on Manage_Offer {buying_asset_type buying_asset_code buying_asset_issuer selling_asset_type selling_asset_code selling_asset_issuer amount offer_id price}} }'} );\n            const history = JSON.parse(res.text)['data']['getHistory'];\n            assert.isNotNull(history);\n            assert.equal(4, history.length);\n            assert.equal('create_account', history[0].type);\n            assert.isNotNull(history[0].starting_balance);\n            assert.equal('change_trust', history[1].type);\n            assert.equal('manage_offer', history[2].type);    // offer\n            assert.equal('payment', history[3].type); // IBM fee charged for offers\n            assert.isNotNull(history[3].amount);\n\n            assert.isNotNull(history);\n            done();\n        })\n    });\n\n    describe('Create allow trust transaction for a given asset', () => {\n        let trustorPublicKey='';\n        let issuerPublicKey='';\n        let transactionId = '';\n\n        it('Create trustor account for new asset', async(done) => {\n            logger.info('Create trustor account',[ bootstrapPublicKey, bootstrapSecret]);\n            const res = await request(app).post('/account')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .set('Authorization', 'Bearer ' + bearerToken)\n                .send({'query':' mutation { createAccountFromSource (description:\"trustorAccount\" source_public_key:\"' + bootstrapPublicKey + '\" source_secret:\"' + bootstrapSecret + '\" passphrase:\"' + passphrase + '\" initial_balance:\"400\") { ... on TF_Account { email tenantId public_key description} thresholds {low_threshold} signers{weight} flags{auth_required}}}'} );\n            const trustorAccountCreated = JSON.parse(res.text)['data']['createAccountFromSource']\n            assert.isNotNull(trustorAccountCreated);\n            assert.isNotNull(trustorAccountCreated.description);\n            assert.isNotNull(trustorAccountCreated.public_key);\n            trustorPublicKey = trustorAccountCreated.public_key;\n            done();\n        },30000)\n\n        it('Create issuer account for new asset', async(done) => {\n            logger.info('Create issuer account', [ bootstrapPublicKey, bootstrapSecret]);\n            const res = await request(app).post('/account')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .set('Authorization', 'Bearer ' + bearerToken)\n                .send({'query':' mutation { createAccountFromSource (description:\"issuerAccount\" source_public_key:\"' + bootstrapPublicKey + '\" source_secret:\"' + bootstrapSecret + '\" passphrase:\"' + passphrase +  '\" initial_balance:\"400\" trust_auth_required: true) { ... on TF_Account { email tenantId public_key description} thresholds {low_threshold} signers{weight} flags{auth_required}}}'} );\n            const issuerAccountCreated = JSON.parse(res.text)['data']['createAccountFromSource']\n            assert.isNotNull(issuerAccountCreated);\n            assert.isNotNull(issuerAccountCreated.description);\n            assert.isNotNull(issuerAccountCreated.public_key);\n            issuerPublicKey = issuerAccountCreated.public_key;\n            done();\n        },30000)\n\n        it('Verify creation of asset -- failure missing issuer', async(done) => {\n            logger.info('Create asset - failure missing issuer', issuerPublicKey);\n            const res = await request(app).post('/account')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .set('Authorization', 'Bearer ' + bearerToken)\n                .send({'query':' mutation { createAsset (asset_issuer:\"'+ '\" asset_code:\"LockDollars\"'+\n                    'description:\"Locked down dollars\") { asset_code asset_issuer ... on TF_Asset { description tenantId email createdAt updatedAt } } }'} );\n            const assetCreated = JSON.parse(res.text)['data']['createAsset'];\n            assert.isNull(assetCreated );\n            const result = JSON.parse(res.text)['errors'][0]['message'];\n            const expectedResult = 'User is not authorized to access this public key';\n            assert.isNotNull(result )\n            assert.equal (result, expectedResult);\n            done();\n        })\n\n        it('Verify creation of asset -- failure missing asset code', async(done) => {\n            logger.info('Create asset - failure missing asset code', issuerPublicKey);\n            const res = await request(app).post('/account')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .set('Authorization', 'Bearer ' + bearerToken)\n                .send({'query':' mutation { createAsset (asset_issuer:\"'+ issuerPublicKey+ '\" asset_code:\"\" '+\n                    'description:\"Locked down dollars\") { asset_code asset_issuer ... on TF_Asset { description tenantId email createdAt updatedAt } } }'} );\n            const assetCreated = JSON.parse(res.text)['data']['createAsset'];\n            assert.isNull(assetCreated );\n            const result = JSON.parse(res.text)['errors'][0]['message'];\n            const expectedResult = 'Asset code is invalid (maximum alphanumeric, 12 characters at max)';// fails at Stellar layer\n            assert.isNotNull(result )\n            assert.equal (result, expectedResult);\n            done();\n        })\n\n\n        it('Verify creation of asset', async(done) => {\n            logger.info('Create asset', issuerPublicKey);\n            const res = await request(app).post('/account')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .set('Authorization', 'Bearer ' + bearerToken)\n                .send({'query':' mutation { createAsset (asset_issuer:\"'+ issuerPublicKey+ '\" asset_code:\"LockDollars\"'+\n                    'description:\"Locked down dollars\") { asset_code asset_issuer ... on TF_Asset { description tenantId email createdAt updatedAt } } }'} );\n            const assetCreated = JSON.parse(res.text)['data']['createAsset'];\n            assert.equal(assetCreated.description,'Locked down dollars', 'Verify description matches')\n            assert.isNotNull(assetCreated );\n            done();\n        })\n\n        it('Trust Asset ', async(done) => {\n            logger.info('Trust Asset', [issuerPublicKey]);\n            const res = await request(app).post('/account')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .set('Authorization', 'Bearer ' + bearerToken)\n                .send({'query':' mutation { createTrustTransaction (trustor_public_key:\"' + trustorPublicKey + '\" asset_issuer:\"' + issuerPublicKey + '\" asset_code:\"LockDollars\" limit:\"200000\") {id}}'} );\n\n            const trustAssetResult = JSON.parse(res.text)['data']['createTrustTransaction'];\n            transactionId = trustAssetResult.id;\n            assert.isNotNull(trustAssetResult);\n            assert.isNotNull(trustAssetResult.description);\n            done();\n        },30000)\n\n        it('Sign Transaction Invalid Passphrase ', async(done) => {\n            logger.info('Sign Transaction', [issuerPublicKey, transactionId]);\n            const res = await request(app).post('/account')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .set('Authorization', 'Bearer ' + bearerToken)\n                .send({'query':' mutation { signTransaction (public_key:\"' + trustorPublicKey + '\" passphrase:\"' + 'INVALID_PASSPHRASE' + '\" transaction_id:\"' + transactionId + '\") {id type source_acct xdr_representation}}'} );\n            const signTransactionResult = JSON.parse(res.text)\n            const dataResult = signTransactionResult['data']['signTransaction'];\n            assert.isNull(dataResult);\n            const errorResult = signTransactionResult['errors'];\n            assert.isNotNull(errorResult);\n            assert.equal(errorResult[0].message, 'Transaction failed due to incorrect passphrase', 'Expected invalid passphrase');\n            done();\n        },30000)\n\n        it('Get transactions to sign ', async(done) => {\n            logger.info('Get Transactions To Sign', [trustorPublicKey]);\n            const res = await request(app).post('/account')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .set('Authorization', 'Bearer ' + bearerToken)\n                .send({'query':' { getTransactionsToSign (public_key:\"' + trustorPublicKey + '\") {id}}'} );\n            const transactionsToSign = JSON.parse(res.text)['data']['getTransactionsToSign'];\n            const transactionToSignId = transactionsToSign[0].id;\n            assert.equal(transactionToSignId, transactionId);\n            assert.isNotNull(transactionsToSign[0].type);\n            assert.isNotNull(transactionsToSign[0].description);\n            assert.isNotNull(transactionToSignId);\n            done();\n        },30000)\n\n        it('Sign Transaction ', async(done) => {\n            logger.info('Sign Transaction', [issuerPublicKey, transactionId]);\n            const res = await request(app).post('/account')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .set('Authorization', 'Bearer ' + bearerToken)\n                .send({'query':' mutation { signTransaction (public_key:\"' + trustorPublicKey + '\" passphrase:\"' + passphrase + '\" transaction_id:\"' + transactionId + '\") {id type source_acct xdr_representation}}'} );\n            const signTransactionResult = JSON.parse(res.text)['data']['signTransaction'];\n            assert.isNotNull(signTransactionResult);\n            assert.equal(signTransactionResult.id, transactionId, 'Transaction ID does not match');\n            done();\n        },30000)\n\n        it('Allow Trust Asset ', async(done) => {\n            logger.info('Trust Asset', [issuerPublicKey]);\n            const res = await request(app).post('/account')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .set('Authorization', 'Bearer ' + bearerToken)\n                .send({'query':' mutation { createAllowTrustTransaction (asset_issuer:\"'+issuerPublicKey + '\" asset_code:\"LockDollars\" trustor_public_key:\"'+trustorPublicKey +'\" authorize_trust: true ){id description} }'} );\n\n            const trustAssetResult = JSON.parse(res.text)['data']['createAllowTrustTransaction'];\n            assert.isNotNull(trustAssetResult);\n            assert.isNotNull(trustAssetResult.description);\n            transactionId = trustAssetResult.id;\n            done();\n        },30000)\n\n        it('Sign Transaction ', async(done) => {\n            logger.info('Sign Transaction', [issuerPublicKey, transactionId]);\n            const res = await request(app).post('/account')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .set('Authorization', 'Bearer ' + bearerToken)\n                .send({'query':' mutation { signTransaction (public_key:\"' + issuerPublicKey + '\" passphrase:\"' + passphrase + '\" transaction_id:\"' + transactionId + '\") {id type source_acct xdr_representation}}'} );\n            const signTransactionResult = JSON.parse(res.text)['data']['signTransaction'];\n            assert.isNotNull(signTransactionResult);\n            assert.equal(signTransactionResult.id, transactionId, 'Transaction ID does not match');\n            done();\n        },30000)\n\n        it('Get history for account that enabled trusting of assets', async(done) => {\n            logger.info('Get history for account that enabled trusting of assets', [issuerPublicKey]);\n            await delay(5000);// give chance for transactions to complete\n            const res = await request(app).post('/account')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .set('Authorization', 'Bearer ' + bearerToken)\n                .send({'query':' { getHistory (public_key:\"'+ issuerPublicKey\n                    + '\") { id transaction_hash source_account type created_at ... on Create_Account {starting_balance} ... on Payment {amount memo transaction_hash} ... on Manage_Offer {buying_asset_type buying_asset_code buying_asset_issuer selling_asset_type selling_asset_code selling_asset_issuer amount offer_id price} ... on Account_Flags {set_flags_s}... on Allow_Trust {authorize} } }'} );\n            const history = JSON.parse(res.text)['data']['getHistory'];\n            assert.isNotNull(history);\n            assert.equal(3, history.length);\n            assert.equal('create_account', history[0].type);\n            assert.isNotNull(history[0].starting_balance);\n            assert.equal('set_options', history[1].type);    // add signer\n            assert.equal('auth_required', history[1].set_flags_s[0]);    // set_flags_s: [ 'auth_required' ],\n            assert.equal('auth_revocable', history[1].set_flags_s[1]);    // set_flags_s: [ 'auth_required' ],\n            assert.equal('allow_trust', history[2].type);    // allowed trust\n            assert.equal(true, history[2].authorize);    // allowed trust\n            done();\n        })\n\n        it('Get initated transactions ', async(done) => {\n            logger.info('Get Initated Transactions', [issuerPublicKey]);\n            const res = await request(app).post('/account')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .set('Authorization', 'Bearer ' + bearerToken)\n                .send({'query':' { getInitiatedTransactions (public_key:\"' + issuerPublicKey + '\") {id}}'} );\n            const initatedTransactions = JSON.parse(res.text)['data']['getInitiatedTransactions'];\n            const initiatedTransactionId = initatedTransactions[1].id; // second elemnt of array - 1st is setOptions for a flag\n            assert.equal(initiatedTransactionId, transactionId);\n            assert.isNotNull(initatedTransactions[0].createdAt);\n            assert.isNotNull(initatedTransactions[1].createdAt);\n            assert.isNotNull(initatedTransactions[0].type);\n            assert.isNotNull(initatedTransactions[1].type);\n            assert.isNotNull(initatedTransactions[0].description);\n            assert.isNotNull(initatedTransactions[1].description);\n            assert.isNotNull(initiatedTransactionId);\n            done();\n        },30000)\n    });\n\n    describe('Create an account that can only set up pre-authorized transactions for later submission', () => {\n        let lockedDownPublicKey='';\n        let transactionId = '';\n\n        it('Create a new locked down account', async(done) => {\n            logger.info('Create a new locked down account',[ bootstrapPublicKey, bootstrapSecret]);\n            const res = await request(app).post('/account')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .set('Authorization', 'Bearer ' + bearerToken)\n                .send({'query':' mutation { createAccountFromSource (description:\"lockedDownAcct\" source_public_key:\"' + bootstrapPublicKey + '\" source_secret:\"' + bootstrapSecret + '\" passphrase:\"' + passphrase +  '\" initial_balance:\"400\" pre_authorize_transactions: true) { ... on TF_Account { email tenantId public_key description} thresholds {low_threshold} signers{weight} flags{auth_required}}}'} );\n            const lockedDownAccountCreated = JSON.parse(res.text)['data']['createAccountFromSource']\n            assert.isNotNull(lockedDownAccountCreated);\n            assert.isNotNull(lockedDownAccountCreated.description);\n            assert.isNotNull(lockedDownAccountCreated.public_key);\n            lockedDownPublicKey = lockedDownAccountCreated.public_key;\n            done();\n        },30000)\n\n        it('Create Payment of XLM from Locked Down Acct ', async(done) => {\n            logger.info('Create of XLM from Locked Down Acct', [lockedDownPublicKey]);\n            const res = await request(app).post('/account')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .set('Authorization', 'Bearer ' + bearerToken)\n                .send({'query':' mutation { createPayment (sender_public_key:\"' + lockedDownPublicKey + '\" receiver_public_key:\"' + bootstrapPublicKey + '\" asset_code:\"XLM\" asset_issuer:\"\" amount:\"2\") {id hash}}'} );\n            const createPaymentResult = JSON.parse(res.text)['data']['createPayment'];\n            transactionId = createPaymentResult.id;\n            assert.isNotNull(createPaymentResult);\n            assert.isNotNull(createPaymentResult.hash);\n            assert.isNotNull(createPaymentResult.description);\n            done();\n        },30000)\n\n        it('Pre-Authorize Payment Transaction ', async(done) => {\n            logger.info('Pre-Authorize Payment Transaction', [lockedDownPublicKey, transactionId]);\n            const res = await request(app).post('/account')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .set('Authorization', 'Bearer ' + bearerToken)\n                .send({'query':' mutation { preAuthorizeTransaction (public_key:\"' + lockedDownPublicKey + '\" passphrase:\"' + passphrase + '\" transaction_id:\"' + transactionId  + '\" final_approver:\"' + bootstrapPublicKey + '\") {id type source_acct xdr_representation}}'} );\n            logger.info('Pre-Authorize Payment Transaction', res.text);\n            const preAuthorizeTransactionResult = JSON.parse(res.text)['data']['preAuthorizeTransaction'];\n            assert.isNotNull(preAuthorizeTransactionResult);\n            assert.equal(preAuthorizeTransactionResult.id, transactionId, 'Transaction ID does not match');\n            done();\n        },30000)\n\n        it('Get transactions to approve for approver', async(done) => {\n            logger.info('Get Transactions To Sign', [bootstrapPublicKey]);\n            const res = await request(app).post('/account')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .set('Authorization', 'Bearer ' + bearerToken)\n                .send({'query':' { getTransactionsToSign (public_key:\"' + bootstrapPublicKey + '\") {id}}'} );\n            const transactionsToApprove = JSON.parse(res.text)['data']['getTransactionsToSign'];\n            const transactionsToApproveId = transactionsToApprove[0].id;\n            assert.equal(1, transactionsToApprove.length);\n            assert.equal(transactionsToApproveId, transactionId);\n            assert.isNotNull(transactionsToApprove[0].type);\n            assert.isNotNull(transactionsToApprove[0].description);\n            assert.isNotNull(transactionsToApprove[0].createdAt);\n            assert.isNotNull(transactionsToApproveId);\n            done();\n        },30000)\n\n        it('Submit Pre-Authorized Transaction ', async(done) => {\n            logger.info('Submit Pre-Authorized Transaction', [transactionId]);\n            await delay(5000);// make sure final approver has been saved to transaction table\n            const res = await request(app).post('/account')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .set('Authorization', 'Bearer ' + bearerToken)\n                .send({'query':' mutation { submitPreAuthorizedTransaction (transaction_id:\"' + transactionId + '\" final_approver:\"' + bootstrapPublicKey + '\") {id type source_acct xdr_representation}}'} );\n            const submitPreAuthorizedTransactionResult = JSON.parse(res.text)['data']['submitPreAuthorizedTransaction'];\n            assert.isNotNull(submitPreAuthorizedTransactionResult);\n            assert.equal(submitPreAuthorizedTransactionResult.id, transactionId, 'Transaction ID does not match');\n            done();\n        },30000)\n\n        it('Get history for account that pre-authorized transaction', async(done) => {\n            logger.info('Get history', [lockedDownPublicKey]);\n            await delay(5000);// give chance for transactions to complete\n            const res = await request(app).post('/account')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .set('Authorization', 'Bearer ' + bearerToken)\n                .send({'query':' { getHistory (public_key:\"'+ lockedDownPublicKey\n                    + '\") { id transaction_hash source_account type created_at ... on Create_Account {starting_balance} ... on Payment {amount memo transaction_hash} ... on Set_Signers {memo signer_key} ... on Manage_Offer {buying_asset_type buying_asset_code buying_asset_issuer selling_asset_type selling_asset_code selling_asset_issuer amount offer_id price} ... on Account_Flags {set_flags_s}... on Allow_Trust {authorize} } }'} );\n            const history = JSON.parse(res.text)['data']['getHistory'];\n            assert.isNotNull(history);\n            logger.info('Get history', [history]);\n            assert.equal(3, history.length);\n            assert.equal('create_account', history[0].type);\n            assert.isNotNull(history[0].starting_balance);\n            assert.equal('set_options', history[1].type);    // add signer (pre-authorization)\n            assert.equal('PreAuthTx signer', history[1].memo); // This pre-Auth transaction has a memo to indicate it\n            assert.equal('payment', history[2].type);    // make payment that was pre-authorized\n            done();\n        })\n    });\n\n\n    describe('Create an account that will set up a pre-authorized transaction for later submission', () => {\n        let accountThatWillPreAuthPublicKey='';\n        let transactionId = '';\n\n        it('Create a regular account', async(done) => {\n            logger.info('Create a new locked down account',[ bootstrapPublicKey, bootstrapSecret]);\n            const res = await request(app).post('/account')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .set('Authorization', 'Bearer ' + bearerToken)\n                .send({'query':' mutation { createAccountFromSource (description:\"lockedDownAcct\" source_public_key:\"' + bootstrapPublicKey + '\" source_secret:\"' + bootstrapSecret + '\" passphrase:\"' + passphrase +  '\" initial_balance:\"400\") { ... on TF_Account { email tenantId public_key description} thresholds {low_threshold} signers{weight} flags{auth_required}}}'} );\n            const accountThatWillPreAuthCreated = JSON.parse(res.text)['data']['createAccountFromSource']\n            assert.isNotNull(accountThatWillPreAuthCreated);\n            assert.isNotNull(accountThatWillPreAuthCreated.description);\n            assert.isNotNull(accountThatWillPreAuthCreated.public_key);\n            accountThatWillPreAuthPublicKey = accountThatWillPreAuthCreated.public_key;\n            done();\n        },30000)\n\n        it('Create Pre-Authorizable Payment of XLM from Regular Acct ', async(done) => {\n            logger.info('Create of XLM from Locked Down Acct', [accountThatWillPreAuthPublicKey]);\n            const res = await request(app).post('/account')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .set('Authorization', 'Bearer ' + bearerToken)\n                .send({'query':' mutation { createPayment (sender_public_key:\"' + accountThatWillPreAuthPublicKey + '\" receiver_public_key:\"' + bootstrapPublicKey + '\" asset_code:\"XLM\" asset_issuer:\"\" amount:\"2\" pre_authorize_transaction:true) {id hash}}'} );\n            const createPaymentResult = JSON.parse(res.text)['data']['createPayment'];\n            transactionId = createPaymentResult.id;\n            assert.isNotNull(createPaymentResult);\n            assert.isNotNull(createPaymentResult.hash);\n            done();\n        },30000)\n\n        it('Pre-Authorize Payment Transaction ', async(done) => {\n            logger.info('Pre-Authorize Payment Transaction', [accountThatWillPreAuthPublicKey, transactionId]);\n            const res = await request(app).post('/account')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .set('Authorization', 'Bearer ' + bearerToken)\n                .send({'query':' mutation { preAuthorizeTransaction (public_key:\"' + accountThatWillPreAuthPublicKey + '\" passphrase:\"' + passphrase + '\" transaction_id:\"' + transactionId  + '\" final_approver:\"' + bootstrapPublicKey + '\" ) {id type source_acct xdr_representation}}'} );\n            logger.info('Pre-Authorize Payment Transaction', res.text);\n            const preAuthorizeTransactionResult = JSON.parse(res.text)['data']['preAuthorizeTransaction'];\n            assert.isNotNull(preAuthorizeTransactionResult);\n            assert.equal(preAuthorizeTransactionResult.id, transactionId, 'Transaction ID does not match');\n            done();\n        },30000)\n\n        it('Get transactions to approve for approver', async(done) => {\n            logger.info('Get Transactions To Sign', [bootstrapPublicKey]);\n            const res = await request(app).post('/account')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .set('Authorization', 'Bearer ' + bearerToken)\n                .send({'query':' { getTransactionsToSign (public_key:\"' + bootstrapPublicKey + '\") {id}}'} );\n            const transactionsToApprove = JSON.parse(res.text)['data']['getTransactionsToSign'];\n            const transactionsToApproveId = transactionsToApprove[0].id;\n            assert.equal(1, transactionsToApprove.length);\n            assert.equal(transactionsToApproveId, transactionId);\n            assert.isNotNull(transactionsToApprove[0].createdAt);\n            assert.isNotNull(transactionsToApproveId);\n            done();\n        },30000)\n\n        it('Submit Pre-Authorized Transaction ', async(done) => {\n            logger.info('Submit Pre-Authorized Transaction', [transactionId]);\n            await delay(5000);// make sure final approver has been saved to transaction table\n            const res = await request(app).post('/account')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .set('Authorization', 'Bearer ' + bearerToken)\n                .send({'query':' mutation { submitPreAuthorizedTransaction (transaction_id:\"' + transactionId + '\" final_approver:\"' + bootstrapPublicKey + '\") {id type source_acct xdr_representation}}'} );\n            const submitPreAuthorizedTransactionResult = JSON.parse(res.text)['data']['submitPreAuthorizedTransaction'];\n            assert.isNotNull(submitPreAuthorizedTransactionResult);\n            assert.equal(submitPreAuthorizedTransactionResult.id, transactionId, 'Transaction ID does not match');\n            done();\n        },30000)\n\n        it('Get history for account that pre-authorized transaction', async(done) => {\n            logger.info('Get history', [accountThatWillPreAuthPublicKey]);\n            await delay(5000);// give chance for transactions to complete\n            const res = await request(app).post('/account')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .set('Authorization', 'Bearer ' + bearerToken)\n                .send({'query':' { getHistory (public_key:\"'+ accountThatWillPreAuthPublicKey\n                    + '\") { id transaction_hash source_account type created_at ... on Create_Account {starting_balance} ... on Payment {amount memo transaction_hash} ... on Set_Signers {memo signer_key} ... on Manage_Offer {buying_asset_type buying_asset_code buying_asset_issuer selling_asset_type selling_asset_code selling_asset_issuer amount offer_id price} ... on Account_Flags {set_flags_s}... on Allow_Trust {authorize} } }'} );\n            const history = JSON.parse(res.text)['data']['getHistory'];\n            assert.isNotNull(history);\n            logger.info('Get history', [history]);\n            assert.equal(3, history.length);\n            assert.equal('create_account', history[0].type);\n            assert.isNotNull(history[0].starting_balance);\n            assert.equal('set_options', history[1].type);    // add signer (pre-authorization)\n            assert.equal('PreAuthTx signer', history[1].memo); // This pre-Auth transaction has a memo to indicate it\n            assert.equal('payment', history[2].type);    // make payment that was pre-authorized\n            done();\n        })\n    });\n\n    describe('Account creation with home domain set', () => {\n        let public_key='';\n        it('Seed new account from source account with home domain set', async(done) => {\n            logger.info('Seed new account from source account with home domain set', [bootstrapPublicKey, bootstrapSecret]);\n            const res = await request(app).post('/account')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .set('Authorization', 'Bearer ' + bearerToken)\n                .send({'query':' mutation { createAccountFromSource (description:\"newly seeded account\" home_domain:\"http://test.com\" source_public_key:\"' + bootstrapPublicKey + '\" source_secret:\"' + bootstrapSecret + '\" passphrase:\"' + passphrase + '\"  initial_balance:\"400\") { ... on TF_Account { email tenantId public_key description home_domain thresholds{low_threshold} signers{weight} flags{auth_required}}}}'} );\n            const newSeededAccount = JSON.parse(res.text)['data']['createAccountFromSource']\n            assert.isNotNull(newSeededAccount);\n            assert.isNotNull(newSeededAccount.public_key);\n            public_key = newSeededAccount.public_key;\n            assert.equal('newly seeded account', newSeededAccount.description);\n            assert.equal('http://test.com', newSeededAccount.home_domain, 'Verify the home domain is set');\n            assert.equal(1, newSeededAccount.signers.length);\n            assert.equal(1, newSeededAccount.signers[0].weight);\n            assert.equal(0, newSeededAccount.thresholds.low_threshold);\n            done();\n        },30000);\n\n        it('Retrieve newly created account', async(done) => {\n            await delay(5000);// give chance for transactions to complete\n            logger.info('Retrieve new account for source account', [public_key]);\n            const res = await request(app).post('/account')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .set('Authorization', 'Bearer ' + bearerToken)\n                .send({'query':' { getAccount (public_key:\"'+ public_key + '\"){ ... on TF_Account { email description tenantId createdAt } public_key home_domain thresholds {low_threshold} signers{weight} flags{auth_required}}}'} );\n            const newSeededAccount = JSON.parse(res.text)['data']['getAccount']\n            assert.isNotNull(newSeededAccount, 'Verify the retrieved account is not null');\n            assert.isNotNull(newSeededAccount.public_key, 'Verify the retrieved public key is not null');\n            assert.isNotNull(newSeededAccount.createdAt, 'Verify the retrieved account has a createdAt date');\n            assert.equal(newSeededAccount.public_key, public_key, 'Verify public_key matches')\n            assert.isNotNull(newSeededAccount.description, 'Verify the retrieved description is not null');\n            assert.equal(newSeededAccount.description,'newly seeded account', 'Verify description matches')\n            assert.isNotNull(newSeededAccount.thresholds, 'Verify the retrieved thresholds are not null');\n            assert.isNotNull(newSeededAccount.signers, 'Verify the retrieved signers are not null');\n            assert.equal('http://test.com', newSeededAccount.home_domain, 'Verify the home domain is set');\n            done();\n        },30000);\n\n        it('Failure attempt to create new account from source account with invalid home domain set', async(done) => {\n            logger.info('Failure attempt to create new account from source account with invalid home domain set', [bootstrapPublicKey, bootstrapSecret]);\n            const res = await request(app).post('/account')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .set('Authorization', 'Bearer ' + bearerToken)\n                .send({'query':' mutation { createAccountFromSource (description:\"newly seeded account\" home_domain:\"foo\" source_public_key:\"' + bootstrapPublicKey + '\" source_secret:\"' + bootstrapSecret + '\" passphrase:\"' + passphrase + '\"  initial_balance:\"400\") { ... on TF_Account { email tenantId public_key description home_domain thresholds{low_threshold} signers{weight} flags{auth_required}}}}'} );\n            const signTransactionResult = JSON.parse(res.text)\n            const dataResult = signTransactionResult['data']['createAccountFromSource'];\n            assert.isNull(dataResult);\n            const errorResult = signTransactionResult['errors'];\n            assert.isNotNull(errorResult);\n            assert.equal(errorResult[0].message, 'Failed to create account due to invalid home_domain', 'Expected invalid passphrase');\n            done();\n        },30000);\n\n        it('Get history for account with home domain', async(done) => {\n            logger.info('Retrieve new account for source account', [public_key]);\n            await delay(5000);// give chance for transactions to complete\n            const res = await request(app).post('/account')\n                .set('Accept', 'application/json')\n                .set('Content-Type', 'application/json')\n                .set('Authorization', 'Bearer ' + bearerToken)\n                .send({'query':' { getHistory (public_key:\"'+ public_key\n                    + '\") { id transaction_hash source_account type created_at ... on Home_Domain { home_domain } ... on Create_Account { starting_balance } }}'} );\n            const history = JSON.parse(res.text)['data']['getHistory'];\n            assert.isNotNull(history);\n            assert.equal(2, history.length);\n            assert.equal('create_account', history[0].type);\n            assert.isNotNull(history[0].starting_balance);\n            assert.equal('set_options', history[1].type);\n            assert.isNotNull(history[1].home_domain);\n            done();\n        },30000);\n\n    });\n});\n"]}