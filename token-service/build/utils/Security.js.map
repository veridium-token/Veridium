{"version":3,"sources":["../../src/utils/Security.js"],"names":["crypto","require","module","exports","Security","encrypt","stringToEncrypt","password","salt","derivedKey","pbkdf2Sync","cipher","createCipheriv","encrypted","update","final","decrypt","encryptedString","decipher","createDecipheriv","decrypted"],"mappings":";;;;AAAA,MAAMA,SAASC,QAAQ,QAAR,CAAf;;AAGAC,OAAOC,OAAP,GAAiB,MAAMC,QAAN,CAAe;;AAGtBC,WAAN,CAAcC,eAAd,EAA+BC,QAA/B,EAAyCC,IAAzC,EAA+C;AAAA;;AAE3C,gBAAIC,aAAaT,OAAOU,UAAP,CAAkBH,QAAlB,EAA4BC,IAA5B,EAAkC,KAAlC,EAAyC,EAAzC,EAA6C,QAA7C,CAAjB;;AAEA;AACA,gBAAIG,SAASX,OAAOY,cAAP,CAAsB,aAAtB,EAAqCH,UAArC,EAAiD,kCAAjD,CAAb;AACA,gBAAII,YAAYF,OAAOG,MAAP,CAAcR,eAAd,EAA+B,MAA/B,EAAuC,QAAvC,CAAhB;AACAO,yBAAaF,OAAOI,KAAP,CAAa,QAAb,CAAb;AACA,mBAAOF,SAAP;AAR2C;AAS9C;;AAEKG,WAAN,CAAcC,eAAd,EAA+BV,QAA/B,EAAyCC,IAAzC,EAA8C;AAAA;AAC1C,gBAAIC,aAAaT,OAAOU,UAAP,CAAkBH,QAAlB,EAA4BC,IAA5B,EAAkC,KAAlC,EAAyC,EAAzC,EAA6C,QAA7C,CAAjB;;AAEA;AACA,gBAAIU,WAAWlB,OAAOmB,gBAAP,CAAwB,aAAxB,EAAuCV,UAAvC,EAAmD,kCAAnD,CAAf;AACA,gBAAIW,YAAYF,SAASJ,MAAT,CAAgBG,eAAhB,EAAiC,QAAjC,EAA2C,MAA3C,CAAhB;AACA,mBAAOG,SAAP;AAN0C;AAO7C;AArB2B,CAAhC;;AAwBA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA","file":"Security.js","sourcesContent":["const crypto = require('crypto');\n\n\nmodule.exports = class Security {\n\n \n    async encrypt(stringToEncrypt, password, salt) {\n\n        let derivedKey = crypto.pbkdf2Sync(password, salt, 10000, 32, \"sha256\");\n\n        // encrypt the Text\n        let cipher = crypto.createCipheriv(\"aes-256-gcm\", derivedKey, '00000000000000000000000000000000');\n        let encrypted = cipher.update(stringToEncrypt, \"utf8\", \"base64\");\n        encrypted += cipher.final(\"base64\");\n        return encrypted;\n    }\n\n    async decrypt(encryptedString, password, salt){\n        let derivedKey = crypto.pbkdf2Sync(password, salt, 10000, 32, \"sha256\");\n\n        // decrypt the Text\n        let decipher = crypto.createDecipheriv(\"aes-256-gcm\", derivedKey, '00000000000000000000000000000000');\n        let decrypted = decipher.update(encryptedString, \"base64\", \"utf8\");\n        return decrypted;\n    }\n}\n\n// const Security = module.exports;\n// const security =  new Security();\n\n// test = async function(){\n//     let salt = crypto.randomBytes(128);\n//     const encrypted = await security.encrypt (\"toddkaplinger\", \"password\", \"1234\");\n//     console.log('encrypted', encrypted)\n\n//     const decrypted =  await security.decrypt (encrypted, \"password\", \"1234\");\n//     console.log('decrypted', decrypted)\n//     console.log(\"toddkaplinger\".localeCompare(decrypted) === 0 ? \"yes\" : \"no\");\n// }\n\n// test();"]}