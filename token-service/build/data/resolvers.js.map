{"version":3,"sources":["../../src/data/resolvers.js"],"names":["Wallet","require","_wallet","StellarNetwork","_stellar","TransactionHandler","_transactionHandler","Security","_security","bcrypt","log4js","logger","getLogger","level","process","env","LOG_LEVEL","i18n","path","configure","directory","join","__dirname","AuthenticationError","ApolloError","GraphQLScalarType","Kind","_","validUrl","resolvers","History","__resolveType","obj","context","info","type","signer_key","signer_weight","clear_flags","set_flags","home_domain","Account","tenantId","Asset","Query","getAccounts","args","user","trace","accounts","getAccount","account","public_key","getInitiatedTransactions","initiatedTransactions","getTransactionsToSign","transactionsToSign","getOffers","authorized","checkAuthorized","__","offers","getBalances","balances","getHistory","getAssets","assets","getOrderbook","orders","sell_asset_code","sell_asset_issuer","buy_asset_code","buy_asset_issuer","getFee","fee","Mutation","createAccount","trustAuthorizationRequired","trust_auth_required","preAuthorizeTransactions","pre_authorize_transactions","domain","isUri","bootstrapAccountFromTestNetwork","description","passphrase","createAccountFromSource","source_public_key","source_secret","initial_balance","createAsset","asset_issuer","createAssetResult","asset_code","createAllowTrustTransaction","accountFromDB","loadedAccount","loadAccount","pre_authorize_transaction","incrementSequenceNumber","setupAllowTrustTransaction","trustor_public_key","authorize_trust","hash","createTrustTransaction","changeAssetTrustLevel","setupChangeTrustTransaction","limit","createPayment","sender_public_key","createPaymentResult","setupPaymentTransaction","receiver_public_key","amount","createOffer","createOfferTransaction","sell_amount","buy_amount","updateOffer","offer_id","deleteOffer","signTransaction","valid","compare","decryptedSecret","decrypt","encrypted_secret","salt","signTransactionResult","transaction_id","preAuthorizeTransaction","preAuthorizeTransactionResult","final_approver","submitPreAuthorizedTransaction","createSignerTransaction","createSignerTransactionResult","setupSetOptionsTransaction_Signer","signer","weight","createWeightThresholdTransaction","createWeightThresholdTransactionResult","setupSetOptionsTransaction_Weights","low","medium","high","createFlagTransaction","createFlagTransactionResult","setupSetOptionsTransaction_Flags","flag_operation","flag_to_set","Date","name","parseValue","value","serialize","isDate","getTime","tmpDate","parse","parseLiteral","ast","kind","INT","parseInt","module","exports"],"mappings":"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","file":"resolvers.js","sourcesContent":["// data/resolvers.js\n\nconst Wallet  = require('../models/Wallet');\nconst _wallet = new Wallet();\nconst StellarNetwork  = require('../models/StellarNetwork');\nconst _stellar = new StellarNetwork();\nconst TransactionHandler  = require('../models/TransactionHandler');\nconst _transactionHandler = new TransactionHandler();\n\nconst Security = require ('../utils/Security');\nconst _security =  new Security();\nconst bcrypt = require('bcrypt');\n\nconst log4js = require('log4js');\nconst logger = log4js.getLogger('resolvers');\nlogger.level = process.env.LOG_LEVEL || 'debug';\n\nconst i18n = require('i18n');\nconst path = require('path');\ni18n.configure({\n    directory: path.join(__dirname, '/../locales')\n});\n\nconst { AuthenticationError, ApolloError } = require ('apollo-server');\nconst { GraphQLScalarType } = require('graphql');\nconst { Kind } = require('graphql/language');\nconst _ = require('lodash');\nconst validUrl = require('valid-url');\n\nconst resolvers = {\n    History: {\n        __resolveType(obj, context, info){\n            if(obj.type === 'create_account'){\n                return 'Create_Account';\n            }\n            if(obj.type === 'change_trust'){\n                return 'Change_Trust';\n            }\n            if(obj.type === 'allow_trust'){\n                return 'Allow_Trust';\n            }\n            if(obj.type === 'payment'){\n                return 'Payment';\n            }\n            if(obj.type === 'manage_offer'){\n                return 'Manage_Offer';\n            }\n            if(obj.type === 'set_options'){\n                if(obj.signer_key || obj.signer_weight){\n                    return 'Set_Signers';\n                }else if(obj.clear_flags || obj.set_flags){\n                    return 'Account_Flags';\n                }else if(obj.home_domain){\n                    return 'Home_Domain';\n                }else{\n                    return 'Set_Threshold';\n                }\n            }\n            return null;\n        },\n    },\n    Account: {\n        __resolveType(obj, context, info){\n            if(obj.tenantId){\n                return 'TF_Account';\n            }\n            return 'Core_Account';\n        },\n    },\n    Asset: {\n        __resolveType(obj, context, info){\n            if(obj.tenantId){\n                return 'TF_Asset';\n            }\n            return 'Core_Asset';\n        },\n    },\n    Query:{\n        // Handle listing of accounts for single tenant\n        async getAccounts (obj, args, { user } ) {\n            logger.trace('getAccounts entry', user);\n            const accounts = await _wallet.getAccounts(user)\n            logger.trace('getAccounts exit', accounts);\n            // return list of accounts for a tenant\n            return accounts;\n        },\n        async getAccount (obj, args, { user } ) {\n            logger.trace('getAccount entry', [args, user]);\n            const account = await _wallet.getAccount(user, args.public_key)\n            logger.trace('getAccount exit', account);\n            return account;\n        },\n        async getInitiatedTransactions (obj, args, { user } ) {\n            logger.trace('getInitiatedTransactions entry', [args.public_key]);\n            const initiatedTransactions = await _transactionHandler.getInitiatedTransactions(args.public_key)\n            logger.trace('getInitiatedTransactions exit');\n            return initiatedTransactions;\n        },\n        async getTransactionsToSign (obj, args, { user } ) {\n            logger.trace('getTransactionsToSign entry', [args.public_key]);\n            const transactionsToSign = await _transactionHandler.getTransactionsToSign(args.public_key)\n            logger.trace('getTransactionsToSign exit');\n            return transactionsToSign;\n        },\n        // Handle listing of account balances for a tenant's public key\n        async getOffers (obj, args, { user } ) {\n            logger.trace('getOffers entry', [args, user]);\n            const authorized = await _wallet.checkAuthorized(user, args.public_key)\n            if(!authorized){\n                throw new AuthenticationError(i18n.__('user.not.authorized'))\n            }\n            const offers = await _stellar.getOffers(args.public_key)\n            logger.trace('getOffers exit', offers);\n            // return list of account balances for a tenant's public key\n            return offers;\n        },\n        // Handle listing of account balances for a tenant's public key\n        async getBalances (obj, args, { user } ) {\n            logger.trace('getBalances entry', [args, user]);\n            const authorized = await _wallet.checkAuthorized(user, args.public_key)\n            if(!authorized){\n                throw new AuthenticationError(i18n.__('user.not.authorized'))\n            }\n            const balances = await _stellar.getBalances(args.public_key)\n            logger.trace('getBalances exit', balances);\n            // return list of account balances for a tenant's public key\n            return balances;\n        },\n        async getHistory (obj, args, { user } ) {\n            logger.trace('getHistory entry', [args, user]);\n            const authorized = await _wallet.checkAuthorized(user, args.public_key)\n            if(!authorized){\n                throw new AuthenticationError(i18n.__('user.not.authorized'))\n            }\n            const balances = await _stellar.getHistory(args.public_key, args.type)\n            logger.trace('getHistory exit', balances);\n            // return history of the account for user's public key\n            return balances;\n        },\n        // Handle listing of assets for single tenant\n        async getAssets (obj, args, { user } ) {\n            logger.trace('getAssets entry', user);\n            const assets = await _wallet.getAssets(user)\n            logger.trace('getAssets exit', assets);\n            // return list of assets for a tenant\n            return assets;\n        },\n        async getOrderbook(obj, args, { user } ) {\n            logger.trace('getOrderBook entry', user);\n            const orders = await _stellar.getOrderbook(args.sell_asset_code, args.sell_asset_issuer, args.buy_asset_code, args.buy_asset_issuer)\n            logger.trace('getOrderBook exit', orders);\n            // return list of orders that match buy and sell assets offers\n            return orders;\n        },\n        async getFee (obj, args, { user } ) {\n            logger.trace('getFee entry', [args, user]);\n            const fee = await _wallet.getFee(args.type)\n            logger.trace('getFee exit', fee);\n            // return fee details for that fee type\n            return fee;\n        }\n\n    },\n    Mutation: {\n        // Handle user Stellar account creation\n        async createAccount (obj, args, { user } ) {\n            logger.trace('createAccount entry', user);\n            let trustAuthorizationRequired = false;\n            if (args.trust_auth_required) {\n                trustAuthorizationRequired = args.trust_auth_required;\n            }\n            let preAuthorizeTransactions = false;\n            if (args.pre_authorize_transactions) {\n                preAuthorizeTransactions = args.pre_authorize_transactions;\n            }\n            const domain = args.home_domain;\n            if(domain && !validUrl.isUri(domain)){\n                throw new ApolloError(i18n.__('create.account.fail.invalid.uri'))\n            }\n\n            const account = await _wallet.bootstrapAccountFromTestNetwork(user,args.description, args.passphrase, trustAuthorizationRequired, preAuthorizeTransactions, domain);\n            if (!account) {\n                throw new ApolloError(i18n.__('create.account.fail'))\n            }\n            logger.trace('createAccount exit', account);\n            // return newly created account\n            return account;\n        },\n        // Handle user Stellar account creation\n        async createAccountFromSource (obj, args, { user } ) {\n            logger.trace('createAccountFromSource entry', args);\n            let trustAuthorizationRequired = false;\n            if (args.trust_auth_required) {\n                trustAuthorizationRequired = args.trust_auth_required;\n            }\n            let preAuthorizeTransactions = false;\n            if (args.pre_authorize_transactions) {\n                preAuthorizeTransactions = args.pre_authorize_transactions;\n            }\n            const domain = args.home_domain;\n            if(domain && !validUrl.isUri(domain)){\n                throw new ApolloError(i18n.__('create.account.fail.invalid.uri'))\n            }\n\n            const account = await _wallet.createAccountFromSource(user, args.description, args.source_public_key, args.source_secret, args.passphrase, args.initial_balance, trustAuthorizationRequired, preAuthorizeTransactions, domain);\n            if (!account) {\n                throw new ApolloError(i18n.__('create.account.fail'))\n            }\n            logger.trace('createAccountFromSource exit', account);\n            // return newly created account\n            return account;\n        },\n        async createAsset (obj, args, { user } ) {\n            logger.trace('createAsset entry', [args, user]);\n            const authorized = await _wallet.checkAuthorized(user, args.asset_issuer)\n            if(!authorized){\n                throw new AuthenticationError(i18n.__('user.not.authorized'))\n            }\n            const createAssetResult = await _wallet.createAsset(user, args.asset_code, args.asset_issuer, args.description)\n            logger.trace('createAsset exit', createAssetResult);\n            return createAssetResult;\n        },\n        async createAllowTrustTransaction  (obj, args, { user } ) {\n            logger.trace('createAllowTrustTransaction entry', [args, user]);\n            const accountFromDB = await _wallet.getAccount(user, args.asset_issuer, true)\n            if(!accountFromDB){\n                throw new AuthenticationError(i18n.__('user.not.authorized'))\n            }\n            const loadedAccount = await _stellar.loadAccount(args.asset_issuer);\n            if (accountFromDB.pre_authorize_transactions || args.pre_authorize_transaction) {\n                loadedAccount.incrementSequenceNumber();\n            }\n            const createAllowTrustTransaction = await _transactionHandler.setupAllowTrustTransaction(loadedAccount, args.asset_issuer, args.asset_code, args.trustor_public_key, args.authorize_trust)\n            logger.trace('createAllowTrustTransaction exit', createAllowTrustTransaction.hash);\n            return createAllowTrustTransaction;\n        },\n        async createTrustTransaction  (obj, args, { user } ) {\n            logger.trace('createTrustTransaction entry', [args, user]);\n            const accountFromDB = await _wallet.getAccount(user, args.trustor_public_key, true)\n            if(!accountFromDB){\n                throw new AuthenticationError(i18n.__('user.not.authorized'))\n            }\n            const loadedAccount = await _stellar.loadAccount(args.trustor_public_key);\n            if (accountFromDB.pre_authorize_transactions || args.pre_authorize_transaction) {\n                loadedAccount.incrementSequenceNumber();\n            }\n\n            const changeAssetTrustLevel = await _transactionHandler.setupChangeTrustTransaction(loadedAccount, args.trustor_public_key, args.asset_code, args.asset_issuer, args.limit)\n            logger.trace('createTrustTransaction exit', changeAssetTrustLevel.hash);\n            return changeAssetTrustLevel;\n        },\n        async createPayment (obj, args, { user } ) {\n            logger.trace('createPayment entry', [args, user]);\n            const accountFromDB = await _wallet.getAccount(user, args.sender_public_key, true)\n            if(!accountFromDB){\n                throw new AuthenticationError(i18n.__('user.not.authorized'))\n            }\n            const loadedAccount = await _stellar.loadAccount(args.sender_public_key);\n            if (accountFromDB.pre_authorize_transactions || args.pre_authorize_transaction) {\n                loadedAccount.incrementSequenceNumber();\n            }\n\n            const createPaymentResult = await _transactionHandler.setupPaymentTransaction(loadedAccount,\n                args.sender_public_key, args.receiver_public_key, args.asset_code, args.asset_issuer, args.amount)\n            logger.trace('createPayment exit', createPaymentResult.hash);\n            return createPaymentResult;\n        },\n        async createOffer (obj, args, { user } ) {\n            logger.trace('createOffer entry', [args, user]);\n            const accountFromDB = await _wallet.getAccount(user, args.public_key, true)\n            if(!accountFromDB){\n                throw new AuthenticationError(i18n.__('user.not.authorized'))\n            }\n\n            const loadedAccount = await _stellar.loadAccount(args.public_key);\n            if (accountFromDB.pre_authorize_transactions || args.pre_authorize_transaction) {\n                loadedAccount.incrementSequenceNumber();\n            }\n            var createOfferTransaction = await _transactionHandler.createOfferTransaction(loadedAccount, args.public_key, '0', args.sell_asset_code, args.sell_asset_issuer, args.sell_amount, args.buy_asset_code, args.buy_asset_issuer, args.buy_amount);\n\n            logger.trace('createOffer exit', args);\n            return createOfferTransaction;\n        },\n        async updateOffer (obj, args, { user } ) {\n            logger.trace('updateOffer entry', [args, user]);\n            const accountFromDB = await _wallet.getAccount(user, args.public_key, true)\n            if(!accountFromDB){\n                throw new AuthenticationError(i18n.__('user.not.authorized'))\n            }\n            const loadedAccount = await _stellar.loadAccount(args.public_key);\n            if (accountFromDB.pre_authorize_transactions || args.pre_authorize_transaction) {\n                loadedAccount.incrementSequenceNumber();\n            }\n            var createOfferTransaction = await _transactionHandler.createOfferTransaction(loadedAccount, args.public_key, args.offer_id, args.sell_asset_code, args.sell_asset_issuer, args.sell_amount, args.buy_asset_code, args.buy_asset_issuer, args.buy_amount);\n\n            logger.trace('updateOffer exit', args);\n            return createOfferTransaction;\n        },\n        async deleteOffer (obj, args, { user } ) {\n            logger.trace('deleteOffer entry', [args, user]);\n            const accountFromDB = await _wallet.getAccount(user, args.public_key, true)\n            if(!accountFromDB){\n                throw new AuthenticationError(i18n.__('user.not.authorized'))\n            }\n            const loadedAccount = await _stellar.loadAccount(args.public_key);\n            if (accountFromDB.pre_authorize_transactions || args.pre_authorize_transaction) {\n                loadedAccount.incrementSequenceNumber();\n            }\n            var createOfferTransaction = await _transactionHandler.createOfferTransaction(loadedAccount, args.public_key, args.offer_id, args.sell_asset_code, args.sell_asset_issuer, '0', args.buy_asset_code, args.buy_asset_issuer, '0');\n            logger.trace('deleteOffer exit', args);\n            return createOfferTransaction;\n        },\n        async signTransaction (obj, args, { user } ) {\n            logger.trace('signTransaction entry', [args, user]);\n            const account = await _wallet.getAccount(user, args.public_key, true)\n            if(!account){\n                throw new AuthenticationError(i18n.__('user.not.authorized'))\n            }\n            const valid = await bcrypt.compare(args.passphrase, account.passphrase)\n            if (!valid) {\n                throw new AuthenticationError(i18n.__('incorrect.passphrase'))\n            }\n            const decryptedSecret = await _security.decrypt (account.encrypted_secret, args.passphrase, account.salt);\n            const signTransactionResult = await _transactionHandler.signTransaction(args.public_key, decryptedSecret, args.transaction_id)\n            logger.trace('signTransaction exit');\n            return signTransactionResult;\n        },\n        async preAuthorizeTransaction (obj, args, { user } ) {\n            logger.trace('preAuthorizeTransaction entry', [args, user]);\n            const accountFromDB = await _wallet.getAccount(user, args.public_key, true)\n            if(!accountFromDB){\n                throw new AuthenticationError(i18n.__('user.not.authorized'))\n            }\n            const valid = await bcrypt.compare(args.passphrase, accountFromDB.passphrase)\n            if (!valid) {\n                throw new AuthenticationError(i18n.__('incorrect.passphrase'))\n            }\n            const decryptedSecret = await _security.decrypt (accountFromDB.encrypted_secret, args.passphrase, accountFromDB.salt);\n            const preAuthorizeTransactionResult = await _transactionHandler.preAuthorizeTransaction(args.public_key, decryptedSecret, args.transaction_id, args.final_approver);\n            logger.trace('preAuthorizeTransaction exit');\n            return preAuthorizeTransactionResult;\n        },\n        async submitPreAuthorizedTransaction (obj, args, { user } ) {\n            logger.trace('submitPreAuthorizedTransaction entry', [args, user]);\n            const preAuthorizeTransactionResult = await _transactionHandler.submitPreAuthorizedTransaction(args.transaction_id, args.final_approver);\n            logger.trace('submitPreAuthorizedTransaction exit');\n            return preAuthorizeTransactionResult;\n        },\n        async createSignerTransaction (obj, args, { user } ) {\n            logger.trace('createSignerTransaction entry', [args, user]);\n            const accountFromDB = await _wallet.getAccount(user, args.public_key, true)\n            if(!accountFromDB){\n                throw new AuthenticationError(i18n.__('user.not.authorized'))\n            }\n            const loadedAccount = await _stellar.loadAccount(args.public_key);\n            if (accountFromDB.pre_authorize_transactions || args.pre_authorize_transaction) {\n                loadedAccount.incrementSequenceNumber();\n            }\n            const createSignerTransactionResult = await _transactionHandler.setupSetOptionsTransaction_Signer(loadedAccount, args.public_key, 'ed25519PublicKey', args.signer, args.weight);\n            logger.trace('createSignerTransaction exit', createSignerTransactionResult.hash);\n            return createSignerTransactionResult;\n        },\n        async createWeightThresholdTransaction (obj, args, { user } ) {\n            logger.trace('createWeightThresholdTransaction entry', [args, user]);\n            const accountFromDB = await _wallet.getAccount(user, args.public_key, true)\n            if(!accountFromDB){\n                throw new AuthenticationError(i18n.__('user.not.authorized'))\n            }\n            const loadedAccount = await _stellar.loadAccount(args.public_key);\n            if (accountFromDB.pre_authorize_transactions || args.pre_authorize_transaction) {\n                loadedAccount.incrementSequenceNumber();\n            }\n            const createWeightThresholdTransactionResult = await _transactionHandler.setupSetOptionsTransaction_Weights(loadedAccount, args.public_key, args.weight, args.low, args.medium, args.high);\n            logger.trace('createWeightThresholdTransaction exit', createWeightThresholdTransactionResult.hash);\n            return createWeightThresholdTransactionResult;\n        },\n        async createFlagTransaction (obj, args, { user } ) {\n            logger.trace('createFlagTransaction entry', [args, user]);\n            const accountFromDB = await _wallet.getAccount(user, args.public_key, true)\n            if(!accountFromDB){\n                throw new AuthenticationError(i18n.__('user.not.authorized'))\n            }\n            const loadedAccount = await _stellar.loadAccount(args.public_key);\n            if (accountFromDB.pre_authorize_transactions || args.pre_authorize_transaction) {\n                loadedAccount.incrementSequenceNumber();\n            }\n            const createFlagTransactionResult = await _transactionHandler.setupSetOptionsTransaction_Flags(loadedAccount, args.public_key, args.flag_operation, args.flag_to_set);\n            logger.trace('createFlagTransaction exit', createFlagTransactionResult.hash);\n            return createFlagTransactionResult;\n        }\n    },\n    Date: new GraphQLScalarType({\n        name: 'Date',\n        description: 'Date custom scalar type',\n        parseValue(value) {\n            return new Date(value); // value from the client\n        },\n        serialize(value) {\n            if(_.isDate (value)){\n                return value.getTime(); // value sent to the client\n            }else{\n                const tmpDate = Date.parse(value)\n                return new Date(tmpDate).getTime();// value sent to the client\n            }\n        },\n        parseLiteral(ast) {\n            if (ast.kind === Kind.INT) {\n                return parseInt(ast.value, 10); // ast value is always in string format\n            }\n            return null;\n        }\n    })\n}\n\nmodule.exports = resolvers\n"]}