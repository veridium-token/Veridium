{"version":3,"sources":["../../src/models/TransactionHandler.js"],"names":["StellarSDK","require","StellarNetwork","_stellarNetwork","Transaction","TransactionOperationBuilder","fees","log4js","logger","getLogger","level","process","env","LOG_LEVEL","i18n","path","configure","directory","join","__dirname","module","exports","TransactionHandler","setupAllowTrustTransaction","transactionSourceAccount","assetIssuerPublicKey","assetCode","trustorPublicKey","authorizeTrueOrFalse","trace","operation","composeAllowTrustOperation","description","txOpBuilder","addOperation","stellarTransaction","buildTransaction","setupChangeTrustTransaction","accountPublicKey","assetIssuer","limit","composeChangeTrustOperation","setupCreateAccountTransaction","sourceAcctPublicKey","newAcctPublicKey","initialBalance","composeCreateAccountOperation","setupPaymentTransaction","senderPublicKey","receiverPublicKey","assetIssuingAccount","amount","composePaymentOperation","transDescription","fee","feeOp","destination","rate","addMemo","Memo","text","name","getOfferDescription","assetToSell","sellAmount","assetToBuy","buyAmount","offerId","offerDescription","getCode","setupManageOfferTransaction","publicKey","composeManageOfferOperation","setupSetOptionsTransaction_HomeDomain","homeDomain","composeSetOptionsOperation_HomeDomain","setupSetOptionsTransaction_Signer","signerType","signer","weight","composeSetOptionsOperation_Signer","setupSetOptionsTransaction_Weights","low","medium","high","composeSetOptionsOperation_Weights","setupSetOptionsTransaction_Flags","flagOperation","flagToSet","composeSetOptionsOperation_Flags","createOfferTransaction","sellAssetCode","sellAssetIssuer","buyAssetCode","buyAssetIssuer","Error","__","Asset","native","transaction","allowTrustOperation","Operation","allowTrust","source","trustor","authorize","asset","changeTrustOperation","changeTrust","setOptionsOperation","setOptions","masterWeight","lowThreshold","medThreshold","highThreshold","flag","AuthRequiredFlag","AuthRevocableFlag","AuthImmutableFlag","createAccountOperation","createAccount","startingBalance","paymentOperation","payment","price","toFixed","manageOfferOperation","manageOffer","selling","buying","getInitiatedTransactions","myTransactions","find","source_acct","initiatedTransactions","myTransaction","_rehydrateStellarTransaction","push","getTransactionsToSign","unsignedTransactions","submitted","$or","signatures","$elemMatch","public_key","signed","operations","needs_signatures","decoratedTransactions","approverTransactions","approvers","persistedTransaction","deserializeTransaction","xdr_representation","_decorateStellarTransaction","id","type","op_type","error","signers","preAuthApprovers","createdAt","hash","serializeTransaction","toEnvelope","toXDR","toString","base64XDR","determineThresholdRequired","stellarAccount","thresholdCat","thresholdRequired","thresholds","low_threshold","med_threshold","high_threshold","canTransactionBeSubmitted","transactionCanBeSubmitted","opsCanBeSubmitted","canOperationsBeSubmitted","signerWeightSum","signature","loadedAccount","loadAccount","threshold_category","operationsCanBeSubmitted","differentSourceOperationExists","operationsForTransaction","sameSourceAccount","opHasSignatures","doesOperationHaveSignatures","myOperation","canBeSubmitted","signTransaction","secret","transaction_id","signerKeyPair","Keypair","fromSecret","findOne","signerIsAuthorized","alreadySigned","sign","save","submittable","submitSerializedTransaction","submissionError","errorResponseData","_parseSubmissionError","preAuthorizeTransaction","decryptedSecret","transactionId","finalApprover","accountForOptions","signerWeight","addSignerTransaction","approver","Object","submitPreAuthorizedTransaction","approverIsAuthorized","JSON","stringify","message","response","data","extras","result_codes"],"mappings":";;;;AAAA,MAAMA,aAAaC,QAAQ,aAAR,CAAnB;;AAEA,MAAMC,iBAAiBD,QAAQ,kBAAR,CAAvB;AACA,MAAME,kBAAkB,IAAID,cAAJ,EAAxB;;AAEA,MAAME,cAAcH,QAAQ,eAAR,CAApB;AACA,MAAMI,8BAA8BJ,QAAQ,+BAAR,CAApC;AACA,MAAMK,OAAOL,QAAQ,aAAR,CAAb;;AAGA,MAAMM,SAASN,QAAQ,QAAR,CAAf;AACA,MAAMO,SAASD,OAAOE,SAAP,CAAiB,oBAAjB,CAAf;AACAD,OAAOE,KAAP,GAAeC,QAAQC,GAAR,CAAYC,SAAZ,IAAyB,OAAxC;;AAEA,MAAMC,OAAOb,QAAQ,MAAR,CAAb;AACA,MAAMc,OAAOd,QAAQ,MAAR,CAAb;AACAa,KAAKE,SAAL,CAAe;AACXC,eAAWF,KAAKG,IAAL,CAAUC,SAAV,EAAqB,aAArB;AADA,CAAf;;AAIAC,OAAOC,OAAP,GAAiB,MAAMC,kBAAN,CAAyB;;AAEhCC,8BAAN,CAAiCC,wBAAjC,EAA2DC,oBAA3D,EAAiFC,SAAjF,EAA4FC,gBAA5F,EAA8GC,oBAA9G,EAAoI;AAAA;;AAAA;AAChIpB,mBAAOqB,KAAP,CAAa,kCAAb,EAAiD,CAACJ,oBAAD,EAAuBC,SAAvB,EAAkCC,gBAAlC,EAAoDC,oBAApD,CAAjD;AACA,gBAAIE,YAAY,MAAM,MAAKC,0BAAL,CAAgCN,oBAAhC,EAAsDC,SAAtD,EAAiEC,gBAAjE,EAAmFC,oBAAnF,CAAtB;AACA,kBAAMI,cAAc,qBAAqBL,gBAArB,GAAwC,MAAxC,GAAiDF,oBAAjD,GAAwE,GAAxE,GAA8EC,SAA9E,GAA0F,KAA1F,GAAkGE,oBAAtH;AACA,gBAAIK,cAAc,IAAI5B,2BAAJ,CAAgCmB,wBAAhC,EAA0DQ,WAA1D,CAAlB;AACA,kBAAMC,YAAYC,YAAZ,CAAyBJ,SAAzB,CAAN;AACA,gBAAIK,qBAAqB,MAAMF,YAAYG,gBAAZ,EAA/B;AACA5B,mBAAOqB,KAAP,CAAa,iCAAb,EAAgD,CAACJ,oBAAD,EAAuBC,SAAvB,EAAkCC,gBAAlC,EAAoDC,oBAApD,CAAhD;AACA,mBAAOO,kBAAP;AARgI;AASnI;;AAEKE,+BAAN,CAAkCb,wBAAlC,EAA4Dc,gBAA5D,EAA8EZ,SAA9E,EAAyFa,WAAzF,EAAsGC,KAAtG,EAA6G;AAAA;;AAAA;AACzGhC,mBAAOqB,KAAP,CAAa,mCAAb,EAAkD,CAACS,gBAAD,EAAmBZ,SAAnB,EAA8Ba,WAA9B,EAA2CC,KAA3C,CAAlD;AACA,gBAAIV,YAAY,MAAM,OAAKW,2BAAL,CAAiCH,gBAAjC,EAAmDZ,SAAnD,EAA8Da,WAA9D,EAA2EC,KAA3E,CAAtB;AACA,kBAAMR,cAAc,sBAAsBM,gBAAtB,GAAyC,OAAzC,GAAmDC,WAAnD,GAAiE,GAAjE,GAAuEb,SAA3F;AACA,gBAAIO,cAAc,IAAI5B,2BAAJ,CAAgCmB,wBAAhC,EAA0DQ,WAA1D,CAAlB;AACA,kBAAMC,YAAYC,YAAZ,CAAyBJ,SAAzB,CAAN;AACA,gBAAIK,qBAAqB,MAAMF,YAAYG,gBAAZ,EAA/B;AACA5B,mBAAOqB,KAAP,CAAa,kCAAb,EAAiD,CAACS,gBAAD,EAAmBZ,SAAnB,EAA8Ba,WAA9B,EAA2CC,KAA3C,CAAjD;AACA,mBAAOL,kBAAP;AARyG;AAS5G;;AAEKO,iCAAN,CAAoClB,wBAApC,EAA8DmB,mBAA9D,EAAmFC,gBAAnF,EAAqGC,cAArG,EAAqH;AAAA;;AAAA;AACjHrC,mBAAOqB,KAAP,CAAa,qCAAb,EAAoD,CAACc,mBAAD,EAAsBC,gBAAtB,EAAwCC,cAAxC,CAApD;AACA,gBAAIf,YAAY,MAAM,OAAKgB,6BAAL,CAAmCH,mBAAnC,EAAwDC,gBAAxD,EAA0EC,cAA1E,CAAtB;AACA,kBAAMb,cAAc,oBAAoBY,gBAApB,GAAuC,QAAvC,GAAkDD,mBAAtE;AACA,gBAAIV,cAAc,IAAI5B,2BAAJ,CAAgCmB,wBAAhC,EAA0DQ,WAA1D,CAAlB;AACA,kBAAMC,YAAYC,YAAZ,CAAyBJ,SAAzB,CAAN;AACA,gBAAIK,qBAAqB,MAAMF,YAAYG,gBAAZ,EAA/B;AACA5B,mBAAOqB,KAAP,CAAa,oCAAb,EAAmD,CAACc,mBAAD,EAAsBC,gBAAtB,EAAwCC,cAAxC,CAAnD;AACA,mBAAOV,kBAAP;AARiH;AASpH;;AAEKY,2BAAN,CAA8BvB,wBAA9B,EAAwDwB,eAAxD,EAAyEC,iBAAzE,EAA4FvB,SAA5F,EAAuGwB,mBAAvG,EAA4HC,MAA5H,EAAoI;AAAA;;AAAA;AAChI3C,mBAAOqB,KAAP,CAAa,+BAAb,EAA8C,CAACmB,eAAD,EAAkBC,iBAAlB,EAAqCvB,SAArC,EAAgDwB,mBAAhD,EAAqEC,MAArE,CAA9C;AACA,gBAAIrB,YAAY,MAAM,OAAKsB,uBAAL,CAA6BJ,eAA7B,EAA8CC,iBAA9C,EAAiEvB,SAAjE,EAA4EwB,mBAA5E,EAAiGC,MAAjG,CAAtB;AACA,kBAAME,mBAAmB,gBAAgBJ,iBAAzC;AACA,gBAAIhB,cAAc,IAAI5B,2BAAJ,CAAgCmB,wBAAhC,EAA0D6B,gBAA1D,CAAlB;AACA,kBAAMpB,YAAYC,YAAZ,CAAyBJ,SAAzB,CAAN;AACA,gBAAIoB,wBAAwBF,eAA5B,EAA6C;AACzC,sBAAMM,MAAMhD,KAAK,cAAL,CAAZ;AACA,sBAAMiD,QAAQ,MAAM,OAAKH,uBAAL,CAA6BJ,eAA7B,EAA8CM,IAAIE,WAAlD,EAA+D,KAA/D,EAAsE,EAAtE,EAA0EF,IAAIG,IAA9E,CAApB;AACA,sBAAMxB,YAAYC,YAAZ,CAAyBqB,KAAzB,CAAN;AACA,sBAAMtB,YAAYyB,OAAZ,CAAoB1D,WAAW2D,IAAX,CAAgBC,IAAhB,CAAqB,iBAAiBN,IAAIO,IAA1C,CAApB,CAAN;AACH;AACD,gBAAI1B,qBAAqB,MAAMF,YAAYG,gBAAZ,EAA/B;AACA5B,mBAAOqB,KAAP,CAAa,8BAAb,EAA6C,CAACmB,eAAD,EAAkBC,iBAAlB,EAAqCvB,SAArC,EAAgDwB,mBAAhD,EAAqEC,MAArE,CAA7C;AACA,mBAAOhB,kBAAP;AAdgI;AAenI;;AAEK2B,uBAAN,CAA0BC,WAA1B,EAAuCC,UAAvC,EAAmDC,UAAnD,EAA+DC,SAA/D,EAA0EC,OAA1E,EAAmF;AAAA;AAC/E,gBAAIC,gBAAJ;AACA,gBAAIJ,eAAe,GAAnB,EAAwB;AACpBI,mCAAmB,oBAAoBD,OAAvC;AACH,aAFD,MAEO;AACH;AACA,oBAAK,CAACA,OAAF,IAAeA,YAAY,GAA3B,IAAoCA,YAAY,CAApD,EAAwD;AACpDC,uCAAmB,uBAAuBJ,UAAvB,GAAoC,GAApC,GAA0CD,YAAYM,OAAZ,EAA1C,GAAkE,OAAlE,GAA4EH,SAA5E,GAAwF,GAAxF,GAA8FD,WAAWI,OAAX,EAAjH;AACH,iBAFD,MAEO;AACHD,uCAAmB,oBAAoBD,OAApB,GAA8B,WAA9B,GAA4CH,UAA5C,GAAyD,GAAzD,GAA+DD,YAAYM,OAAZ,EAA/D,GAAuF,OAAvF,GAAiGH,SAAjG,GAA6G,GAA7G,GAAmHD,WAAWI,OAAX,EAAtI;AACH;AACJ;AACD,mBAAOD,gBAAP;AAZ+E;AAalF;;AAEKE,+BAAN,CAAkC9C,wBAAlC,EAA4D+C,SAA5D,EAAuEJ,OAAvE,EAAgFJ,WAAhF,EAA6FC,UAA7F,EAAyGC,UAAzG,EAAqHC,SAArH,EAAgI;AAAA;;AAAA;AAC5H1D,mBAAOqB,KAAP,CAAa,mCAAb,EAAkD,CAAC0C,SAAD,EAAYJ,OAAZ,EAAqBJ,WAArB,EAAkCC,UAAlC,EAA8CC,UAA9C,EAA0DC,SAA1D,CAAlD;AACA;;AAEA,gBAAIpC,YAAY,MAAM,OAAK0C,2BAAL,CAAiCD,SAAjC,EAA4CJ,OAA5C,EAAqDJ,WAArD,EAAkEC,UAAlE,EAA8EC,UAA9E,EAA0FC,SAA1F,CAAtB;;AAEA,gBAAIE,mBAAmB,MAAM,OAAKN,mBAAL,CAAyBC,WAAzB,EAAsCC,UAAtC,EAAkDC,UAAlD,EAA8DC,SAA9D,EAAyEC,OAAzE,CAA7B;;AAEA,gBAAIlC,cAAc,IAAI5B,2BAAJ,CAAgCmB,wBAAhC,EAA0D4C,gBAA1D,CAAlB;AACA,kBAAMnC,YAAYC,YAAZ,CAAyBJ,SAAzB,CAAN;;AAEA;AACA,gBAAK,CAACqC,OAAF,IAAeA,YAAY,GAA3B,IAAoCA,YAAY,CAApD,EAAwD;AACpD,sBAAMb,MAAMhD,KAAK,WAAL,CAAZ;AACA,sBAAMiD,QAAQ,MAAM,OAAKH,uBAAL,CAA6BmB,SAA7B,EAAwCjB,IAAIE,WAA5C,EAAyD,KAAzD,EAAgE,EAAhE,EAAoEF,IAAIG,IAAxE,CAApB;AACA,sBAAMxB,YAAYC,YAAZ,CAAyBqB,KAAzB,CAAN;AACA,sBAAMtB,YAAYyB,OAAZ,CAAoB1D,WAAW2D,IAAX,CAAgBC,IAAhB,CAAqB,iBAAiBN,IAAIO,IAA1C,CAApB,CAAN;AACH;;AAED,kBAAM1B,qBAAqB,MAAMF,YAAYG,gBAAZ,EAAjC;AACA5B,mBAAOqB,KAAP,CAAa,kCAAb,EAAiD,CAAC0C,SAAD,EAAYJ,OAAZ,CAAjD;AACA,mBAAOhC,kBAAP;AArB4H;AAsB/H;;AAEKsC,yCAAN,CAA4CjD,wBAA5C,EAAsEc,gBAAtE,EAAwFoC,UAAxF,EAAoG;AAAA;;AAAA;AAChGlE,mBAAOqB,KAAP,CAAa,6CAAb,EAA4D,CAACS,gBAAD,EAAmBoC,UAAnB,CAA5D;AACA,gBAAI5C,YAAY,MAAM,OAAK6C,qCAAL,CAA2CrC,gBAA3C,EAA6DoC,UAA7D,CAAtB;AACA,kBAAM1C,cAAc,qBAAqB0C,UAArB,GAAkC,MAAlC,GAA2CpC,gBAA/D;AACA,gBAAIL,cAAc,IAAI5B,2BAAJ,CAAgCmB,wBAAhC,EAA0DQ,WAA1D,CAAlB;AACA,kBAAMC,YAAYC,YAAZ,CAAyBJ,SAAzB,CAAN;AACA,gBAAIK,qBAAqB,MAAMF,YAAYG,gBAAZ,EAA/B;AACA5B,mBAAOqB,KAAP,CAAa,4CAAb,EAA2D,CAACS,gBAAD,EAAmBoC,UAAnB,CAA3D;AACA,mBAAOvC,kBAAP;AARgG;AASnG;;AAEKyC,qCAAN,CAAwCpD,wBAAxC,EAAkEc,gBAAlE,EAAoFuC,UAApF,EAAgGC,MAAhG,EAAwGC,MAAxG,EAAgH;AAAA;;AAAA;AAC5GvE,mBAAOqB,KAAP,CAAa,yCAAb,EAAwD,CAACS,gBAAD,EAAmBwC,MAAnB,EAA2BC,MAA3B,CAAxD;AACA,gBAAIjD,YAAY,MAAM,OAAKkD,iCAAL,CAAuC1C,gBAAvC,EAAyDuC,UAAzD,EAAqEC,MAArE,EAA6EC,MAA7E,CAAtB;AACA,kBAAM/C,cAAc,gBAAgB8C,MAAhB,GAAyB,MAAzB,GAAkCxC,gBAAtD;AACA,gBAAIL,cAAc,IAAI5B,2BAAJ,CAAgCmB,wBAAhC,EAA0DQ,WAA1D,CAAlB;AACA,kBAAMC,YAAYC,YAAZ,CAAyBJ,SAAzB,CAAN;;AAEA,gBAAI+C,eAAe,WAAnB,EAAgC;AAC5B,sBAAM5C,YAAYyB,OAAZ,CAAoB1D,WAAW2D,IAAX,CAAgBC,IAAhB,CAAqB,kBAArB,CAApB,CAAN;AACH;;AAED,gBAAIzB,qBAAqB,MAAMF,YAAYG,gBAAZ,EAA/B;AACA5B,mBAAOqB,KAAP,CAAa,wCAAb,EAAuD,CAACS,gBAAD,EAAmBwC,MAAnB,CAAvD;AACA,mBAAO3C,kBAAP;AAb4G;AAc/G;;AAEK8C,sCAAN,CAAyCzD,wBAAzC,EAAmEc,gBAAnE,EAAqFyC,MAArF,EAA6FG,GAA7F,EAAkGC,MAAlG,EAA0GC,IAA1G,EAAgH;AAAA;;AAAA;AAC5G5E,mBAAOqB,KAAP,CAAa,0CAAb,EAAyD,CAACS,gBAAD,EAAmByC,MAAnB,EAA2BG,GAA3B,EAAgCC,MAAhC,EAAwCC,IAAxC,CAAzD;AACA,gBAAItD,YAAY,MAAM,OAAKuD,kCAAL,CAAwC/C,gBAAxC,EAA0DyC,MAA1D,EAAkEG,GAAlE,EAAuEC,MAAvE,EAA+EC,IAA/E,CAAtB;AACA,kBAAMpD,cAAc,oCAAoCM,gBAAxD;AACA,gBAAIL,cAAc,IAAI5B,2BAAJ,CAAgCmB,wBAAhC,EAA0DQ,WAA1D,CAAlB;AACAC,wBAAYC,YAAZ,CAAyBJ,SAAzB;AACA,gBAAIK,qBAAqB,MAAMF,YAAYG,gBAAZ,EAA/B;AACA5B,mBAAOqB,KAAP,CAAa,yCAAb,EAAwD,CAACS,gBAAD,EAAmByC,MAAnB,EAA2BG,GAA3B,EAAgCC,MAAhC,EAAwCC,IAAxC,CAAxD;AACA,mBAAOjD,kBAAP;AAR4G;AAS/G;;AAEKmD,oCAAN,CAAuC9D,wBAAvC,EAAiEc,gBAAjE,EAAmFiD,aAAnF,EAAkGC,SAAlG,EAA6G;AAAA;;AAAA;AACzGhF,mBAAOqB,KAAP,CAAa,wCAAb,EAAuD,CAACS,gBAAD,EAAmBiD,aAAnB,EAAkCC,SAAlC,CAAvD;AACA,gBAAI1D,YAAY,MAAM,OAAK2D,gCAAL,CAAsCnD,gBAAtC,EAAwDiD,aAAxD,EAAuEC,SAAvE,CAAtB;AACA,kBAAMxD,cAAcuD,gBAAgB,OAAhB,GAA0BC,SAA9C;AACA,gBAAIvD,cAAc,IAAI5B,2BAAJ,CAAgCmB,wBAAhC,EAA0DQ,WAA1D,CAAlB;AACAC,wBAAYC,YAAZ,CAAyBJ,SAAzB;AACA,gBAAIK,qBAAqB,MAAMF,YAAYG,gBAAZ,EAA/B;AACA5B,mBAAOqB,KAAP,CAAa,uCAAb,EAAsD,CAACS,gBAAD,EAAmBiD,aAAnB,EAAkCC,SAAlC,CAAtD;AACA,mBAAOrD,kBAAP;AARyG;AAS5G;;AAEKuD,0BAAN,CAA6BlE,wBAA7B,EAAuD+C,SAAvD,EAAkEJ,OAAlE,EAA2EwB,aAA3E,EAA0FC,eAA1F,EAA2G5B,UAA3G,EAAuH6B,YAAvH,EAAqIC,cAArI,EAAqJ5B,SAArJ,EAAgK;AAAA;;AAAA;AAC5J1D,mBAAOqB,KAAP,CAAa,8BAAb,EAA6C,CAAC0C,SAAD,EAAYoB,aAAZ,EAA2BC,eAA3B,EAA4C5B,UAA5C,EAAwD6B,YAAxD,EAAsEC,cAAtE,EAAsF5B,SAAtF,CAA7C;;AAEA,gBAAIF,aAAa,CAAjB,EAAoB;AAChB,sBAAM,IAAI+B,KAAJ,CAAUjF,KAAKkF,EAAL,CAAQ,0BAAR,CAAV,CAAN;AACH;AACD,gBAAI9B,YAAY,CAAhB,EAAmB;AACf,sBAAM,IAAI6B,KAAJ,CAAUjF,KAAKkF,EAAL,CAAQ,yBAAR,CAAV,CAAN;AACH;AACD,gBAAIjC,WAAJ;AACA,gBAAIE,UAAJ;AACA,gBAAI0B,kBAAkB,KAAtB,EAA6B;AACzB5B,8BAAc,IAAI/D,WAAWiG,KAAf,CAAqBN,aAArB,EAAoCC,eAApC,CAAd;AACH,aAFD,MAEO;AACH7B,8BAAc/D,WAAWiG,KAAX,CAAiBC,MAAjB,EAAd;AACH;AACD,gBAAIL,iBAAiB,KAArB,EAA4B;AACxB5B,6BAAa,IAAIjE,WAAWiG,KAAf,CAAqBJ,YAArB,EAAmCC,cAAnC,CAAb;AACH,aAFD,MAEO;AACH7B,6BAAajE,WAAWiG,KAAX,CAAiBC,MAAjB,EAAb;AACH;;AAED,kBAAMC,cAAc,MAAM,QAAK7B,2BAAL,CAAiC9C,wBAAjC,EAA2D+C,SAA3D,EAAsEJ,OAAtE,EAA+EJ,WAA/E,EAA4FC,UAA5F,EAAwGC,UAAxG,EAAoHC,SAApH,CAA1B;;AAEA1D,mBAAOqB,KAAP,CAAa,6BAAb,EAA4C,CAAC0C,SAAD,EAAYJ,OAAZ,EAAqBwB,aAArB,EAAoCC,eAApC,EAAqD5B,UAArD,EAAiE6B,YAAjE,EAA+EC,cAA/E,EAA+F5B,SAA/F,CAA5C;AACA,mBAAOiC,WAAP;AAzB4J;AA0B/J;;AAEKpE,8BAAN,CAAiCN,oBAAjC,EAAuDC,SAAvD,EAAkEC,gBAAlE,EAAoFC,oBAApF,EAA0G;AAAA;AACtGpB,mBAAOqB,KAAP,CAAa,kCAAb,EAAiD,CAACJ,oBAAD,EAAuBC,SAAvB,EAAkCC,gBAAlC,CAAjD;AACA,kBAAMyE,sBAAsBpG,WAAWqG,SAAX,CAAqBC,UAArB,CAAgC;AACxDC,wBAAQ9E,oBADgD;AAExD+E,yBAAS7E,gBAF+C;AAGxDD,2BAAWA,SAH6C;AAIxD+E,2BAAW7E;AAJ6C,aAAhC,CAA5B;;AAOApB,mBAAOqB,KAAP,CAAa,iCAAb,EAAgD,CAACJ,oBAAD,EAAuBC,SAAvB,EAAkCC,gBAAlC,CAAhD;AACA,mBAAOyE,mBAAP;AAVsG;AAWzG;;AAEK3D,+BAAN,CAAkCH,gBAAlC,EAAoDZ,SAApD,EAA+Da,WAA/D,EAA4EC,KAA5E,EAAmF;AAAA;AAC/EhC,mBAAOqB,KAAP,CAAa,mCAAb,EAAkD,CAACS,gBAAD,EAAmBZ,SAAnB,EAA8Ba,WAA9B,EAA2CC,KAA3C,CAAlD;AACA,kBAAMkE,QAAQ,IAAI1G,WAAWiG,KAAf,CAAqBvE,SAArB,EAAgCa,WAAhC,CAAd;AACA,kBAAMoE,uBAAuB3G,WAAWqG,SAAX,CAAqBO,WAArB,CAAiC;AAC1DL,wBAAQjE,gBADkD;AAE1DoE,uBAAOA,KAFmD;AAG1DlE,uBAAOA;AAHmD,aAAjC,CAA7B;;AAMAhC,mBAAOqB,KAAP,CAAa,kCAAb,EAAiD,CAACS,gBAAD,EAAmBZ,SAAnB,EAA8Ba,WAA9B,EAA2CC,KAA3C,CAAjD;AACA,mBAAOmE,oBAAP;AAV+E;AAWlF;;AAEKtB,sCAAN,CAAyC/C,gBAAzC,EAA2DyC,MAA3D,EAAmEG,GAAnE,EAAwEC,MAAxE,EAAgFC,IAAhF,EAAsF;AAAA;AAClF5E,mBAAOqB,KAAP,CAAa,0CAAb,EAAyD,CAACS,gBAAD,EAAmByC,MAAnB,EAA2BG,GAA3B,EAAgCC,MAAhC,EAAwCC,IAAxC,CAAzD;AACA,kBAAMyB,sBAAsB7G,WAAWqG,SAAX,CAAqBS,UAArB,CAAgC;AACxDP,wBAAQjE,gBADgD;AAExDyE,8BAAchC,MAF0C;AAGxDiC,8BAAc9B,GAH0C;AAIxD+B,8BAAc9B,MAJ0C;AAKxD+B,+BAAe9B;AALyC,aAAhC,CAA5B;AAOA5E,mBAAOqB,KAAP,CAAa,yCAAb,EAAwD,CAACS,gBAAD,EAAmByC,MAAnB,EAA2BG,GAA3B,EAAgCC,MAAhC,EAAwCC,IAAxC,CAAxD;AACA,mBAAOyB,mBAAP;AAVkF;AAWrF;;AAEKpB,oCAAN,CAAuCnD,gBAAvC,EAAyDiD,aAAzD,EAAwEC,SAAxE,EAAmF;AAAA;AAC/EhF,mBAAOqB,KAAP,CAAa,wCAAb,EAAuD,CAACS,gBAAD,EAAmBiD,aAAnB,EAAkCC,SAAlC,CAAvD;AACA,gBAAI2B,OAAO,IAAX;AACA,gBAAI3B,cAAc,kBAAlB,EAAsC;AAClC2B,uBAAOnH,WAAWoH,gBAAX,GAA8BpH,WAAWqH,iBAAhD;AACH,aAFD,MAEO,IAAI7B,cAAc,sBAAlB,EAA0C;AAC7C2B,uBAAOnH,WAAWoH,gBAAlB;AACH,aAFM,MAEA,IAAI5B,cAAc,mBAAlB,EAAuC;AAC1C2B,uBAAOnH,WAAWsH,iBAAlB;AACH,aAFM,MAEA,IAAI9B,cAAc,mBAAlB,EAAuC;AAC1C2B,uBAAOnH,WAAWqH,iBAAlB;AACH;AACD,kBAAMR,sBAAsB7G,WAAWqG,SAAX,CAAqBS,UAArB,CAAgC;AACxDP,wBAAQjE,gBADgD;AAExD,iBAACiD,aAAD,GAAiB4B;AAFuC,aAAhC,CAA5B;AAIA3G,mBAAOqB,KAAP,CAAa,uCAAb,EAAsD,CAACS,gBAAD,EAAmBiD,aAAnB,EAAkCC,SAAlC,CAAtD;AACA,mBAAOqB,mBAAP;AAjB+E;AAkBlF;;AAEKlC,yCAAN,CAA4CrC,gBAA5C,EAA8DoC,UAA9D,EAA0E;AAAA;AACtElE,mBAAOqB,KAAP,CAAa,6CAAb,EAA4D,CAACS,gBAAD,EAAmBoC,UAAnB,CAA5D;AACA,kBAAMmC,sBAAsB7G,WAAWqG,SAAX,CAAqBS,UAArB,CAAgC;AACxDP,wBAAQjE,gBADgD;AAExDoC,4BAAYA;AAF4C,aAAhC,CAA5B;AAIAlE,mBAAOqB,KAAP,CAAa,4CAAb,EAA2D,CAACS,gBAAD,EAAmBoC,UAAnB,CAA3D;AACA,mBAAOmC,mBAAP;AAPsE;AAQzE;;AAEK7B,qCAAN,CAAwC1C,gBAAxC,EAA0DuC,UAA1D,EAAsEC,MAAtE,EAA8EC,MAA9E,EAAsF;AAAA;AAClFvE,mBAAOqB,KAAP,CAAa,yCAAb,EAAwD,CAACS,gBAAD,EAAmBuC,UAAnB,EAA+BC,MAA/B,EAAuCC,MAAvC,CAAxD;AACA,kBAAM8B,sBAAsB7G,WAAWqG,SAAX,CAAqBS,UAArB,CAAgC;AACxDP,wBAAQjE,gBADgD;AAExDwC,wBAAQ;AACJ,qBAACD,UAAD,GAAcC,MADV;AAEJC,4BAAQA;AAFJ;AAFgD,aAAhC,CAA5B;AAOAvE,mBAAOqB,KAAP,CAAa,wCAAb,EAAuD,CAACS,gBAAD,EAAmBuC,UAAnB,EAA+BC,MAA/B,EAAuCC,MAAvC,CAAvD;AACA,mBAAO8B,mBAAP;AAVkF;AAWrF;;AAEK/D,iCAAN,CAAoCH,mBAApC,EAAyDC,gBAAzD,EAA2EC,cAA3E,EAA2F;AAAA;AACvFrC,mBAAOqB,KAAP,CAAa,qCAAb,EAAoD,CAACc,mBAAD,EAAsBC,gBAAtB,EAAwCC,cAAxC,CAApD;AACA,kBAAM0E,yBAAyBvH,WAAWqG,SAAX,CAAqBmB,aAArB,CAAmC;AAC9DjB,wBAAQ5D,mBADsD;AAE9Da,6BAAaZ,gBAFiD;AAG9D6E,iCAAiB5E;AAH6C,aAAnC,CAA/B;AAKArC,mBAAOqB,KAAP,CAAa,oCAAb,EAAmD,CAACc,mBAAD,EAAsBC,gBAAtB,EAAwCC,cAAxC,CAAnD;AACA,mBAAO0E,sBAAP;AARuF;AAS1F;;AAEKnE,2BAAN,CAA8BJ,eAA9B,EAA+CC,iBAA/C,EAAkEvB,SAAlE,EAA6EwB,mBAA7E,EAAkGC,MAAlG,EAA0G;AAAA;AACtG3C,mBAAOqB,KAAP,CAAa,+BAAb,EAA8C,CAACmB,eAAD,EAAkBC,iBAAlB,EAAqCvB,SAArC,EAAgDwB,mBAAhD,EAAqEC,MAArE,CAA9C;AACA,gBAAIuD,KAAJ;AACA,gBAAIhF,cAAc,KAAlB,EAAyB;AACrBgF,wBAAQ1G,WAAWiG,KAAX,CAAiBC,MAAjB,EAAR;AACH,aAFD,MAEO;AACHQ,wBAAQ,IAAI1G,WAAWiG,KAAf,CAAqBvE,SAArB,EAAgCwB,mBAAhC,CAAR;AACH;;AAED,kBAAMwE,mBAAmB1H,WAAWqG,SAAX,CAAqBsB,OAArB,CAA6B;AAClDpB,wBAAQvD,eAD0C;AAElDQ,6BAAaP,iBAFqC;AAGlDyD,uBAAOA,KAH2C;AAIlDvD,wBAAQA;AAJ0C,aAA7B,CAAzB;;AAOA3C,mBAAOqB,KAAP,CAAa,8BAAb,EAA6C,CAACmB,eAAD,EAAkBC,iBAAlB,EAAqCvB,SAArC,EAAgDwB,mBAAhD,EAAqEC,MAArE,CAA7C;AACA,mBAAOuE,gBAAP;AAjBsG;AAkBzG;;AAEKlD,+BAAN,CAAkCD,SAAlC,EAA6CJ,OAA7C,EAAsDJ,WAAtD,EAAmEC,UAAnE,EAA+EC,UAA/E,EAA2FC,SAA3F,EAAsG;AAAA;AAClG1D,mBAAOqB,KAAP,CAAa,kCAAb,EAAiD,CAAC0C,SAAD,EAAYJ,OAAZ,EAAqBJ,WAArB,EAAkCC,UAAlC,EAA8CC,UAA9C,EAA0DC,SAA1D,CAAjD;AACA;;AAEA,gBAAIf,MAAJ;AACA,gBAAIyE,KAAJ;;AAEA,gBAAI5D,eAAe,GAAnB,EAAwB;AACpB;AACA,oBAAK,CAACG,OAAF,IAAeA,YAAY,GAA3B,IAAoCA,YAAY,CAApD,EAAwD;AACpD,0BAAM,IAAI4B,KAAJ,CAAUjF,KAAKkF,EAAL,CAAQ,0BAAR,CAAV,CAAN;AACH;;AAED4B,wBAAQ,GAAR;AACAzE,yBAAS,GAAT;AACH,aARD,MAQO;AACHyE,wBAAQ,CAAC1D,YAAYF,UAAb,EAAyB6D,OAAzB,CAAiC,EAAjC,CAAR;AACA1E,yBAASa,UAAT;AACH;;AAED,gBAAI8D,uBAAuB9H,WAAWqG,SAAX,CAAqB0B,WAArB,CAAiC;AACxDC,yBAASjE,WAD+C;AAExDkE,wBAAQhE,UAFgD;AAGxDd,wBAAQA,MAHgD;AAIxDyE,uBAAOA,KAJiD;AAKxDzD,yBAASA,OAL+C;AAMxDoC,wBAAQhC;AANgD,aAAjC,CAA3B;;AASA/D,mBAAOqB,KAAP,CAAa,iCAAb,EAAgD,CAAC0C,SAAD,EAAYJ,OAAZ,EAAqBJ,WAArB,EAAkCC,UAAlC,EAA8CC,UAA9C,EAA0DC,SAA1D,CAAhD;AACA,mBAAO4D,oBAAP;AA9BkG;AA+BrG;;AAEKI,4BAAN,CAA+B3D,SAA/B,EAA0C;AAAA;;AAAA;AACtC/D,mBAAOqB,KAAP,CAAa,gCAAb,EAA+C0C,SAA/C;AACA,gBAAI4D,iBAAiB,MAAM/H,YAAYgI,IAAZ,CAAiB,EAAEC,aAAa9D,SAAf,EAAjB,CAA3B;AACA,gBAAI+D,wBAAwB,EAA5B;AACA,iBAAK,MAAMC,aAAX,IAA4BJ,cAA5B,EAA4C;AACxC,sBAAMhG,qBAAqB,MAAM,QAAKqG,4BAAL,CAAkCD,aAAlC,CAAjC;AACAD,sCAAsBG,IAAtB,CAA2BtG,kBAA3B;AACH;AACD3B,mBAAOqB,KAAP,CAAa,+BAAb;AACA,mBAAOyG,qBAAP;AATsC;AAUzC;;AAEKI,yBAAN,CAA4BnE,SAA5B,EAAuC;AAAA;;AAAA;AACnC/D,mBAAOqB,KAAP,CAAa,6BAAb,EAA4C,CAAC0C,SAAD,CAA5C;AACA,kBAAMoE,uBAAuB,MAAMvI,YAAYgI,IAAZ,CAAiB,EAACQ,WAAW,KAAZ,EAAmBC,KAAI,CAAC,EAACC,YAAY,EAAEC,YAAY,EAAEC,YAAYzE,SAAd,EAAyB0E,QAAQ,KAAjC,EAAd,EAAb,EAAD,EAAwE,EAACC,YAAY,EAAEH,YAAY,EAACI,kBAAkB,IAAnB,EAAyBL,YAAY,EAAEC,YAAY,EAAEC,YAAYzE,SAAd,EAAyB0E,QAAQ,KAAjC,EAAd,EAArC,EAAd,EAAb,EAAxE,CAAvB,EAAjB,CAAnC;AACA,gBAAIG,wBAAwB,EAA5B;AACA,iBAAK,MAAMjD,WAAX,IAA0BwC,oBAA1B,EAAgD;AAC5C,sBAAMxG,qBAAqB,MAAM,QAAKqG,4BAAL,CAAkCrC,WAAlC,CAAjC;AACAiD,sCAAsBX,IAAtB,CAA2BtG,kBAA3B;AACH;AACD,kBAAMkH,uBAAuB,MAAMjJ,YAAYgI,IAAZ,CAAiB,EAACQ,WAAW,KAAZ,EAAmBU,WAAW,EAAEP,YAAY,EAAEC,YAAYzE,SAAd,EAAyB0E,QAAQ,KAAjC,EAAd,EAA9B,EAAjB,CAAnC;AACA,iBAAK,MAAM9C,WAAX,IAA0BkD,oBAA1B,EAAgD;AAC5C,sBAAMlH,qBAAqB,MAAM,QAAKqG,4BAAL,CAAkCrC,WAAlC,CAAjC;AACAiD,sCAAsBX,IAAtB,CAA2BtG,kBAA3B;AACH;AACD3B,mBAAOqB,KAAP,CAAa,4BAAb,EAA2CuH,qBAA3C;AACA,mBAAOA,qBAAP;AAdmC;AAetC;;AAGKZ,gCAAN,CAAmCe,oBAAnC,EAAyD;AAAA;;AAAA;AACrD,gBAAIpH,qBAAqB,QAAKqH,sBAAL,CAA4BD,qBAAqBE,kBAAjD,CAAzB;AACAtH,iCAAqB,MAAM,QAAKuH,2BAAL,CAAiCvH,kBAAjC,EAAqDoH,oBAArD,CAA3B;AACA,mBAAOpH,kBAAP;AAHqD;AAIxD;;AAEKuH,+BAAN,CAAkCvH,kBAAlC,EAAsDoH,oBAAtD,EAA4E;AAAA;AACxE/I,mBAAOqB,KAAP,CAAa,mCAAb,EAAkD0H,qBAAqBI,EAAvE;AACAxH,+BAAmBwH,EAAnB,GAAwBJ,qBAAqBI,EAA7C;AACAxH,+BAAmByH,IAAnB,GAA0BL,qBAAqBL,UAArB,CAAgC,CAAhC,EAAmCW,OAA7D;AACA1H,+BAAmBkG,WAAnB,GAAiCkB,qBAAqBlB,WAAtD;AACAlG,+BAAmBsH,kBAAnB,GAAwCF,qBAAqBE,kBAA7D;AACAtH,+BAAmBH,WAAnB,GAAiCuH,qBAAqBvH,WAAtD;AACAG,+BAAmByG,SAAnB,GAA+BW,qBAAqBX,SAApD;AACAzG,+BAAmB2H,KAAnB,GAA2BP,qBAAqBO,KAAhD;AACA3H,+BAAmB4H,OAAnB,GAA6BR,qBAAqBT,UAAlD;AACA3G,+BAAmB6H,gBAAnB,GAAsCT,qBAAqBD,SAA3D;AACAnH,+BAAmB8H,SAAnB,GAA+BV,qBAAqBU,SAApD;AACA9H,+BAAmB+H,IAAnB,GAA0BX,qBAAqBW,IAA/C;AACA/H,+BAAmB+G,UAAnB,GAAgCK,qBAAqBL,UAArD;AACA1I,mBAAOqB,KAAP,CAAa,kCAAb,EAAiD0H,qBAAqBI,EAAtE;AACA,mBAAOxH,kBAAP;AAfwE;AAgB3E;;AAEDgI,yBAAqBhE,WAArB,EAAkC;AAC9B,eAAOA,YAAYiE,UAAZ,GAAyBC,KAAzB,GAAiCC,QAAjC,CAA0C,QAA1C,CAAP;AACH;;AAEDd,2BAAuBe,SAAvB,EAAkC;AAC9B,eAAO,IAAIvK,WAAWI,WAAf,CAA2BmK,SAA3B,CAAP;AACH;;AAEDC,+BAA2BC,cAA3B,EAA2CC,YAA3C,EAAyD;AACrD,YAAIC,iBAAJ;;AAEA,YAAID,iBAAiB,KAArB,EAA4B;AACxBC,gCAAoBF,eAAeG,UAAf,CAA0BC,aAA9C;AACH,SAFD,MAEO,IAAIH,iBAAiB,QAArB,EAA+B;AAClCC,gCAAoBF,eAAeG,UAAf,CAA0BE,aAA9C;AACH,SAFM,MAEA,IAAIJ,iBAAiB,MAArB,EAA6B;AAChCC,gCAAoBF,eAAeG,UAAf,CAA0BG,cAA9C;AACH;;AAED,eAAOJ,iBAAP;AACH;;AAEKK,6BAAN,CAAgCzC,aAAhC,EAA+C;AAAA;;AAAA;AAC3C/H,mBAAOqB,KAAP,CAAa,iCAAb,EAAgD0G,cAAcoB,EAA9D;AACA,gBAAIsB,4BAA4B,KAAhC;AACA,gBAAIC,oBAAoB,QAAKC,wBAAL,CAA8B5C,aAA9B,CAAxB;AACA,gBAAI2C,iBAAJ,EAAuB;AACnB,oBAAIE,kBAAkB,CAAtB;AACA,qBAAK,IAAIC,SAAT,IAAsB9C,cAAcO,UAApC,EAAgD;AAC5C,wBAAIuC,UAAUpC,MAAV,KAAqB,IAAzB,EAA+B;AAC3BmC,0CAAkBA,kBAAkBC,UAAUtG,MAA9C;AACH;AACJ;;AAED,sBAAMuG,gBAAgB,MAAMnL,gBAAgBoL,WAAhB,CAA4BhD,cAAcF,WAA1C,CAA5B;AACA,oBAAIsC,oBAAoB,QAAKH,0BAAL,CAAgCc,aAAhC,EAA+C/C,cAAciD,kBAA7D,CAAxB;AACA,oBAAIJ,mBAAmBT,iBAAvB,EAA0C;AACtCM,gDAA4B,IAA5B;AACH;AACJ;;AAEDzK,mBAAOqB,KAAP,CAAa,gCAAb,EAA+C,CAAC0G,cAAcoB,EAAf,EAAmBsB,yBAAnB,CAA/C;AACA,mBAAOA,yBAAP;AApB2C;AAqB9C;;AAEKE,4BAAN,CAA+B5C,aAA/B,EAA8C;AAAA;;AAAA;AAC1C,gBAAIkD,2BAA2B,IAA/B;;AAEA,gBAAIlD,cAAcmD,8BAAlB,EAAkD;AAC9C,oBAAIC,2BAA2BpD,cAAcW,UAA7C;AACA,qBAAK,IAAIpH,SAAT,IAAsB6J,wBAAtB,EAAgD;AAC5C,wBAAI,CAAC7J,UAAU8J,iBAAf,EAAkC;AAC9B,4BAAIC,kBAAkB,MAAM,QAAKC,2BAAL,CAAiChK,SAAjC,CAA5B;AACA,4BAAI,CAAC+J,eAAL,EAAsB;AAClBJ,uDAA2B,KAA3B;AACH,yBAFD,MAEO;AACH3J,sCAAUqH,gBAAV,GAA6B,KAA7B;AACH;AACJ;AACJ;AACJ;;AAED,mBAAOsC,wBAAP;AAjB0C;AAkB7C;;AAEKK,+BAAN,CAAkCC,WAAlC,EAA+C;AAAA;;AAAA;AAC3CvL,mBAAOqB,KAAP,CAAa,mCAAb,EAAkDkK,YAAYpC,EAA9D;AACA,kBAAM2B,gBAAgB,MAAMnL,gBAAgBoL,WAAhB,CAA4BQ,YAAY1D,WAAxC,CAA5B;;AAEA,gBAAI+C,kBAAkB,CAAtB;AACA,gBAAIY,iBAAiB,KAArB;AACA,iBAAK,IAAIX,SAAT,IAAsBU,YAAYjD,UAAlC,EAA8C;AAC1C,oBAAIuC,UAAUpC,MAAV,KAAqB,IAAzB,EAA+B;AAC3BmC,sCAAkBA,kBAAkBC,UAAUtG,MAA9C;AACH;AACJ;;AAED,gBAAI4F,oBAAoB,QAAKH,0BAAL,CAAgCc,aAAhC,EAA+CS,YAAYP,kBAA3D,CAAxB;AACA,gBAAIJ,mBAAmBT,iBAAvB,EAA0C;AACtCqB,iCAAiB,IAAjB;AACH;;AAEDxL,mBAAOqB,KAAP,CAAa,kCAAb,EAAiD,CAACkK,YAAYpC,EAAb,EAAiBqC,cAAjB,CAAjD;AACA,mBAAOA,cAAP;AAlB2C;AAmB9C;;AAEKC,mBAAN,CAAsBjD,UAAtB,EAAkCkD,MAAlC,EAA0CC,cAA1C,EAA0D;AAAA;;AAAA;AACtD3L,mBAAOqB,KAAP,CAAa,uBAAb,EAAsC,CAACmH,UAAD,EAAamD,cAAb,CAAtC;AACA,kBAAMC,gBAAgBpM,WAAWqM,OAAX,CAAmBC,UAAnB,CAA8BJ,MAA9B,CAAtB;;AAEA,gBAAIlD,eAAeoD,cAAc7H,SAAd,EAAnB,EAA8C;AAC1C,sBAAM,IAAIwB,KAAJ,CAAUjF,KAAKkF,EAAL,CAAQ,yBAAR,CAAV,CAAN;AACH;;AAED,gBAAIuC,gBAAgB,MAAMnI,YAAYmM,OAAZ,CAAoB,EAAE5C,IAAIwC,cAAN,EAApB,CAA1B;;AAEA,gBAAI5D,cAAcK,SAAd,KAA4B,IAAhC,EAAsC;AAClC,sBAAM,IAAI7C,KAAJ,CAAUjF,KAAKkF,EAAL,CAAQ,+BAAR,CAAV,CAAN;AACH;;AAED,gBAAIwG,qBAAqB,KAAzB;AACA,gBAAIC,gBAAgB,KAApB;;AAEA,iBAAK,IAAIpB,SAAT,IAAsB9C,cAAcO,UAApC,EAAgD;AAC5C,oBAAIuC,UAAUrC,UAAV,KAAyBA,UAA7B,EAAyC;AACrCwD,yCAAqB,IAArB;AACA,wBAAInB,UAAUpC,MAAV,KAAqB,IAAzB,EAA+B;AAC3BwD,wCAAgB,IAAhB;AACH,qBAFD,MAEO;AACHpB,kCAAUpC,MAAV,GAAmB,IAAnB;AACH;AACJ;AACJ;;AAED,iBAAK,IAAI8C,WAAT,IAAwBxD,cAAcW,UAAtC,EAAkD;AAC9C,qBAAK,IAAImC,SAAT,IAAsBU,YAAYjD,UAAlC,EAA8C;AAC1C,wBAAIuC,UAAUrC,UAAV,KAAyBA,UAA7B,EAAyC;AACrCwD,6CAAqB,IAArB;AACA,4BAAInB,UAAUpC,MAAV,KAAqB,IAAzB,EAA+B;AAC3BwD,4CAAgB,IAAhB;AACH,yBAFD,MAEO;AACHpB,sCAAUpC,MAAV,GAAmB,IAAnB;AACH;AACJ;AACJ;AACJ;;AAED,gBAAI,CAACuD,kBAAL,EAAyB;AACrB,sBAAM,IAAIzG,KAAJ,CAAUjF,KAAKkF,EAAL,CAAQ,uBAAR,CAAV,CAAN;AACH;;AAED,gBAAI7D,qBAAqB,IAAInC,WAAWI,WAAf,CAA2BmI,cAAckB,kBAAzC,CAAzB;AACA,gBAAI,CAACgD,aAAL,EAAoB;AAChBtK,mCAAmBuK,IAAnB,CAAwBN,aAAxB;;AAEA7D,8BAAckB,kBAAd,GAAmC,QAAKU,oBAAL,CAA0BhI,kBAA1B,CAAnC;AACAoG,8BAAcoE,IAAd;AACH;;AAED,gBAAIC,cAAc,MAAM,QAAK5B,yBAAL,CAA+BzC,aAA/B,CAAxB;AACA;;AAEA,gBAAIqE,WAAJ,EAAiB;AACb,oBAAI;AACApM,2BAAOqB,KAAP,CAAa,aAAb,EAA4B0G,cAAckB,kBAA1C;AACA,0BAAMtJ,gBAAgB0M,2BAAhB,CAA4CtE,cAAckB,kBAA1D,CAAN;AACAlB,kCAAcK,SAAd,GAA0B,IAA1B;AACH,iBAJD,CAIE,OAAOkE,eAAP,EAAwB;AACtB,wBAAIC,oBAAoB,QAAKC,qBAAL,CAA2BF,eAA3B,CAAxB;AACAvE,kCAAcuB,KAAd,GAAsBiD,iBAAtB;AACAxE,kCAAcoE,IAAd;AACAnM,2BAAOqB,KAAP,CAAa,mCAAb,EAAkDkL,iBAAlD;AACA,0BAAM,IAAIhH,KAAJ,CAAUgH,iBAAV,CAAN;AACH;AACJ;;AAEDxE,0BAAcoE,IAAd;;AAEAxK,iCAAqB,MAAM,QAAKuH,2BAAL,CAAiC,IAAI1J,WAAWI,WAAf,CAA2BmI,cAAckB,kBAAzC,CAAjC,EAA+FlB,aAA/F,CAA3B;AACA/H,mBAAOqB,KAAP,CAAa,sBAAb,EAAqC,CAACmH,UAAD,EAAamD,cAAb,EAA6BhK,mBAAmB+H,IAAhD,CAArC;AACA,mBAAO/H,kBAAP;AA1EsD;AA2EzD;;AAEK8K,2BAAN,CAA8B1I,SAA9B,EAAyC2I,eAAzC,EAA0DC,aAA1D,EAAyEC,aAAzE,EAAwF;AAAA;;AAAA;AACpF5M,mBAAOqB,KAAP,CAAa,+BAAb,EAA8C,CAAC0C,SAAD,EAAY4I,aAAZ,EAA2BC,aAA3B,CAA9C;AACA,gBAAI7E,gBAAgB,MAAMnI,YAAYmM,OAAZ,CAAoB,EAAE5C,IAAIwD,aAAN,EAApB,CAA1B;AACA,gBAAIhL,qBAAqB,IAAInC,WAAWI,WAAf,CAA2BmI,cAAckB,kBAAzC,CAAzB;;AAEA,kBAAM4D,oBAAoB,MAAMlN,gBAAgBoL,WAAhB,CAA4BhD,cAAcF,WAA1C,CAAhC;;AAEA,gBAAIsC,oBAAoB,QAAKH,0BAAL,CAAgC6C,iBAAhC,EAAmD9E,cAAciD,kBAAjE,CAAxB;;AAEA,gBAAI8B,eAAe,CAAnB;AACA,gBAAI3C,oBAAoB,CAAxB,EAA2B;AACvB2C,+BAAe3C,iBAAf;AACH;;AAED,gBAAI4C,uBAAuB,MAAM,QAAK3I,iCAAL,CAAuCyI,iBAAvC,EAA0D9E,cAAcF,WAAxE,EAAqF,WAArF,EAAkGlG,mBAAmB+H,IAAnB,EAAlG,EAA6HoD,YAA7H,CAAjC;AACA,kBAAM,QAAKrB,eAAL,CAAqB1H,SAArB,EAAgC2I,eAAhC,EAAiDK,qBAAqB5D,EAAtE,CAAN;;AAEApB,4BAAgB,MAAMnI,YAAYmM,OAAZ,CAAoB,EAAE5C,IAAIwD,aAAN,EAApB,CAAtB;;AAEA,gBAAIC,aAAJ,EAAmB;AACf,oBAAII,WAAW,IAAIC,MAAJ,EAAf;AACAD,yBAASxE,UAAT,GAAsBoE,aAAtB;AACAI,yBAASvE,MAAT,GAAkB,KAAlB;AACAV,8BAAce,SAAd,CAAwBb,IAAxB,CAA6B+E,QAA7B;AACA,sBAAMjF,cAAcoE,IAAd,EAAN;AACH;;AAEDxK,iCAAqB,MAAM,QAAKuH,2BAAL,CAAiC,IAAI1J,WAAWI,WAAf,CAA2BmI,cAAckB,kBAAzC,CAAjC,EAA+FlB,aAA/F,CAA3B;AACA/H,mBAAOqB,KAAP,CAAa,8BAAb,EAA6C,CAAC0C,SAAD,EAAY4I,aAAZ,EAA2BhL,mBAAmB+H,IAA9C,CAA7C;AACA,mBAAO/H,kBAAP;AA7BoF;AA8BvF;;AAEKuL,kCAAN,CAAqCP,aAArC,EAAoDC,aAApD,EAAmE;AAAA;;AAAA;AAC/D,gBAAI7E,gBAAgB,MAAMnI,YAAYmM,OAAZ,CAAoB,EAAE5C,IAAIwD,aAAN,EAApB,CAA1B;;AAEA,gBAAIQ,uBAAuB,KAA3B;AACA,iBAAK,IAAIH,QAAT,IAAqBjF,cAAce,SAAnC,EAA8C;AAC1C,oBAAIkE,SAASxE,UAAT,KAAwBoE,aAA5B,EAA2C;AACvCO,2CAAuB,IAAvB;AACAH,6BAASvE,MAAT,GAAkB,IAAlB;AACH;AACJ;;AAED,gBAAI,CAAC0E,oBAAL,EAA2B;AACvB,sBAAM,IAAI5H,KAAJ,CAAUjF,KAAKkF,EAAL,CAAQ,yBAAR,CAAV,CAAN;AACH;;AAED,gBAAI;AACA,sBAAM7F,gBAAgB0M,2BAAhB,CAA4CtE,cAAckB,kBAA1D,CAAN;AACAlB,8BAAcK,SAAd,GAA0B,IAA1B;AACAL,8BAAcoE,IAAd;AACH,aAJD,CAIE,OAAOG,eAAP,EAAwB;AACtB,oBAAIC,oBAAoB,QAAKC,qBAAL,CAA2BF,eAA3B,CAAxB;AACAvE,8BAAcuB,KAAd,GAAsBiD,iBAAtB;AACAxE,8BAAcoE,IAAd;AACAnM,uBAAOqB,KAAP,CAAa,mCAAb,EAAkDkL,iBAAlD;AACA,sBAAM,IAAIhH,KAAJ,CAAUgH,iBAAV,CAAN;AACH;;AAED,mBAAOxE,aAAP;AA3B+D;AA4BlE;;AAEDyE,0BAAsBF,eAAtB,EAAuC;AACnC,YAAIC,oBAAoBa,KAAKC,SAAL,CAAef,gBAAgBgB,OAA/B,CAAxB;AACA,YAAKhB,gBAAgBiB,QAAjB,IAA+BjB,gBAAgBiB,QAAhB,CAAyBC,IAA5D,EAAmE;AAC/D,gBAAKlB,gBAAgBiB,QAAhB,CAAyBC,IAAzB,CAA8BC,MAA/B,IAA2CnB,gBAAgBiB,QAAhB,CAAyBC,IAAzB,CAA8BC,MAA9B,CAAqCC,YAApF,EAAmG;AAC/FnB,qCAAqBa,KAAKC,SAAL,CAAef,gBAAgBiB,QAAhB,CAAyBC,IAAzB,CAA8BC,MAA9B,CAAqCC,YAApD,CAArB;AACH,aAFD,MAEO;AACHnB,qCAAqBa,KAAKC,SAAL,CAAef,gBAAgBiB,QAAhB,CAAyBC,IAAxC,CAArB;AACH;AACJ;AACD,eAAOjB,iBAAP;AACH;;AA3lBqC,CAA1C","file":"TransactionHandler.js","sourcesContent":["const StellarSDK = require('stellar-sdk');\n\nconst StellarNetwork = require('./StellarNetwork');\nconst _stellarNetwork = new StellarNetwork();\n\nconst Transaction = require('./Transaction');\nconst TransactionOperationBuilder = require('./TransactionOperationBuilder');\nconst fees = require('./fees.json');\n\n\nconst log4js = require('log4js');\nconst logger = log4js.getLogger('TransactionHandler');\nlogger.level = process.env.LOG_LEVEL || 'debug';\n\nconst i18n = require('i18n');\nconst path = require('path');\ni18n.configure({\n    directory: path.join(__dirname, '/../locales')\n});\n\nmodule.exports = class TransactionHandler {\n\n    async setupAllowTrustTransaction(transactionSourceAccount, assetIssuerPublicKey, assetCode, trustorPublicKey, authorizeTrueOrFalse) {\n        logger.trace('setupAllowTrustTransaction entry', [assetIssuerPublicKey, assetCode, trustorPublicKey, authorizeTrueOrFalse]);\n        let operation = await this.composeAllowTrustOperation(assetIssuerPublicKey, assetCode, trustorPublicKey, authorizeTrueOrFalse);\n        const description = 'Allow Trust for ' + trustorPublicKey + ' of ' + assetIssuerPublicKey + ' ' + assetCode + ' = ' + authorizeTrueOrFalse;\n        let txOpBuilder = new TransactionOperationBuilder(transactionSourceAccount, description);\n        await txOpBuilder.addOperation(operation);\n        let stellarTransaction = await txOpBuilder.buildTransaction();\n        logger.trace('setupAllowTrustTransaction exit', [assetIssuerPublicKey, assetCode, trustorPublicKey, authorizeTrueOrFalse]);\n        return stellarTransaction;\n    }\n\n    async setupChangeTrustTransaction(transactionSourceAccount, accountPublicKey, assetCode, assetIssuer, limit) {\n        logger.trace('setupChangeTrustTransaction entry', [accountPublicKey, assetCode, assetIssuer, limit]);\n        let operation = await this.composeChangeTrustOperation(accountPublicKey, assetCode, assetIssuer, limit);\n        const description = 'Change Trust for ' + accountPublicKey + ' for ' + assetIssuer + ' ' + assetCode;\n        let txOpBuilder = new TransactionOperationBuilder(transactionSourceAccount, description);\n        await txOpBuilder.addOperation(operation);\n        let stellarTransaction = await txOpBuilder.buildTransaction();\n        logger.trace('setupChangeTrustTransaction exit', [accountPublicKey, assetCode, assetIssuer, limit]);\n        return stellarTransaction;\n    }\n\n    async setupCreateAccountTransaction(transactionSourceAccount, sourceAcctPublicKey, newAcctPublicKey, initialBalance) {\n        logger.trace('setupCreateAccountTransaction entry', [sourceAcctPublicKey, newAcctPublicKey, initialBalance]);\n        let operation = await this.composeCreateAccountOperation(sourceAcctPublicKey, newAcctPublicKey, initialBalance);\n        const description = 'Create Account ' + newAcctPublicKey + ' from ' + sourceAcctPublicKey;\n        let txOpBuilder = new TransactionOperationBuilder(transactionSourceAccount, description);\n        await txOpBuilder.addOperation(operation);\n        let stellarTransaction = await txOpBuilder.buildTransaction();\n        logger.trace('setupCreateAccountTransaction exit', [sourceAcctPublicKey, newAcctPublicKey, initialBalance]);\n        return stellarTransaction;\n    }\n\n    async setupPaymentTransaction(transactionSourceAccount, senderPublicKey, receiverPublicKey, assetCode, assetIssuingAccount, amount) {\n        logger.trace('setupPaymentTransaction entry', [senderPublicKey, receiverPublicKey, assetCode, assetIssuingAccount, amount]);\n        let operation = await this.composePaymentOperation(senderPublicKey, receiverPublicKey, assetCode, assetIssuingAccount, amount);\n        const transDescription = 'Payment to ' + receiverPublicKey;\n        let txOpBuilder = new TransactionOperationBuilder(transactionSourceAccount, transDescription);\n        await txOpBuilder.addOperation(operation);\n        if (assetIssuingAccount === senderPublicKey) {\n            const fee = fees['FEE_ISSUANCE'];\n            const feeOp = await this.composePaymentOperation(senderPublicKey, fee.destination, 'XLM', '', fee.rate);\n            await txOpBuilder.addOperation(feeOp);\n            await txOpBuilder.addMemo(StellarSDK.Memo.text('tx contains ' + fee.name));\n        }\n        let stellarTransaction = await txOpBuilder.buildTransaction();\n        logger.trace('setupPaymentTransaction exit', [senderPublicKey, receiverPublicKey, assetCode, assetIssuingAccount, amount]);\n        return stellarTransaction;\n    }\n\n    async getOfferDescription(assetToSell, sellAmount, assetToBuy, buyAmount, offerId) {\n        let offerDescription;\n        if (sellAmount === '0') {\n            offerDescription = 'Deleting offer ' + offerId;\n        } else {\n            // If offerId is empty or zero, this is a new offer. Otherwise it's an offer being updated.\n            if ((!offerId) || (offerId === '0') || (offerId === 0)) {\n                offerDescription = 'New offer to sell ' + sellAmount + ' ' + assetToSell.getCode() + ' for ' + buyAmount + ' ' + assetToBuy.getCode();\n            } else {\n                offerDescription = 'Updating offer ' + offerId + ' to sell ' + sellAmount + ' ' + assetToSell.getCode() + ' for ' + buyAmount + ' ' + assetToBuy.getCode();\n            }\n        }\n        return offerDescription;\n    }\n\n    async setupManageOfferTransaction(transactionSourceAccount, publicKey, offerId, assetToSell, sellAmount, assetToBuy, buyAmount) {\n        logger.trace('setupManageOfferTransaction entry', [publicKey, offerId, assetToSell, sellAmount, assetToBuy, buyAmount]);\n        // NOTE: offerId should be zero(0/'0') for new offers being created and non-zero for updated/deleted offers\n\n        let operation = await this.composeManageOfferOperation(publicKey, offerId, assetToSell, sellAmount, assetToBuy, buyAmount);\n\n        let offerDescription = await this.getOfferDescription(assetToSell, sellAmount, assetToBuy, buyAmount, offerId);\n\n        let txOpBuilder = new TransactionOperationBuilder(transactionSourceAccount, offerDescription);\n        await txOpBuilder.addOperation(operation);\n\n        // If offerId is empty or zero, this is a new offer and we charge a small fee.\n        if ((!offerId) || (offerId === '0') || (offerId === 0)) {\n            const fee = fees['FEE_OFFER'];\n            const feeOp = await this.composePaymentOperation(publicKey, fee.destination, 'XLM', '', fee.rate);\n            await txOpBuilder.addOperation(feeOp);\n            await txOpBuilder.addMemo(StellarSDK.Memo.text('tx contains ' + fee.name));\n        }\n\n        const stellarTransaction = await txOpBuilder.buildTransaction();\n        logger.trace('setupManageOfferTransaction exit', [publicKey, offerId]);\n        return stellarTransaction;\n    }\n\n    async setupSetOptionsTransaction_HomeDomain(transactionSourceAccount, accountPublicKey, homeDomain) {\n        logger.trace('setupSetOptionsTransaction_HomeDomain entry', [accountPublicKey, homeDomain]);\n        let operation = await this.composeSetOptionsOperation_HomeDomain(accountPublicKey, homeDomain);\n        const description = 'Add home domain ' + homeDomain + ' to ' + accountPublicKey;\n        let txOpBuilder = new TransactionOperationBuilder(transactionSourceAccount, description);\n        await txOpBuilder.addOperation(operation);\n        let stellarTransaction = await txOpBuilder.buildTransaction();\n        logger.trace('setupSetOptionsTransaction_HomeDomain exit', [accountPublicKey, homeDomain]);\n        return stellarTransaction;\n    }\n\n    async setupSetOptionsTransaction_Signer(transactionSourceAccount, accountPublicKey, signerType, signer, weight) {\n        logger.trace('setupSetOptionsTransaction_Signer entry', [accountPublicKey, signer, weight]);\n        let operation = await this.composeSetOptionsOperation_Signer(accountPublicKey, signerType, signer, weight);\n        const description = 'Add Signer ' + signer + ' to ' + accountPublicKey;\n        let txOpBuilder = new TransactionOperationBuilder(transactionSourceAccount, description);\n        await txOpBuilder.addOperation(operation);\n\n        if (signerType === 'preAuthTx') {\n            await txOpBuilder.addMemo(StellarSDK.Memo.text('PreAuthTx signer'));\n        }\n\n        let stellarTransaction = await txOpBuilder.buildTransaction();\n        logger.trace('setupSetOptionsTransaction_Signer exit', [accountPublicKey, signer]);\n        return stellarTransaction;\n    }\n\n    async setupSetOptionsTransaction_Weights(transactionSourceAccount, accountPublicKey, weight, low, medium, high) {\n        logger.trace('setupSetOptionsTransaction_Weights entry', [accountPublicKey, weight, low, medium, high]);\n        let operation = await this.composeSetOptionsOperation_Weights(accountPublicKey, weight, low, medium, high);\n        const description = 'Set weights and thresholds for ' + accountPublicKey;\n        let txOpBuilder = new TransactionOperationBuilder(transactionSourceAccount, description);\n        txOpBuilder.addOperation(operation);\n        let stellarTransaction = await txOpBuilder.buildTransaction();\n        logger.trace('setupSetOptionsTransaction_Weights exit', [accountPublicKey, weight, low, medium, high]);\n        return stellarTransaction;\n    }\n\n    async setupSetOptionsTransaction_Flags(transactionSourceAccount, accountPublicKey, flagOperation, flagToSet) {\n        logger.trace('setupSetOptionsTransaction_Flags entry', [accountPublicKey, flagOperation, flagToSet]);\n        let operation = await this.composeSetOptionsOperation_Flags(accountPublicKey, flagOperation, flagToSet);\n        const description = flagOperation + ' for ' + flagToSet;\n        let txOpBuilder = new TransactionOperationBuilder(transactionSourceAccount, description);\n        txOpBuilder.addOperation(operation);\n        let stellarTransaction = await txOpBuilder.buildTransaction();\n        logger.trace('setupSetOptionsTransaction_Flags exit', [accountPublicKey, flagOperation, flagToSet]);\n        return stellarTransaction;\n    }\n\n    async createOfferTransaction(transactionSourceAccount, publicKey, offerId, sellAssetCode, sellAssetIssuer, sellAmount, buyAssetCode, buyAssetIssuer, buyAmount) {\n        logger.trace('createOfferTransaction entry', [publicKey, sellAssetCode, sellAssetIssuer, sellAmount, buyAssetCode, buyAssetIssuer, buyAmount]);\n\n        if (sellAmount < 0) {\n            throw new Error(i18n.__('negative.sellAmount.data'));\n        }\n        if (buyAmount < 0) {\n            throw new Error(i18n.__('negative.buyAmount.data'));\n        }\n        let assetToSell;\n        let assetToBuy;\n        if (sellAssetCode !== 'XLM') {\n            assetToSell = new StellarSDK.Asset(sellAssetCode, sellAssetIssuer);\n        } else {\n            assetToSell = StellarSDK.Asset.native();\n        }\n        if (buyAssetCode !== 'XLM') {\n            assetToBuy = new StellarSDK.Asset(buyAssetCode, buyAssetIssuer);\n        } else {\n            assetToBuy = StellarSDK.Asset.native();\n        }\n\n        const transaction = await this.setupManageOfferTransaction(transactionSourceAccount, publicKey, offerId, assetToSell, sellAmount, assetToBuy, buyAmount);\n\n        logger.trace('createOfferTransaction exit', [publicKey, offerId, sellAssetCode, sellAssetIssuer, sellAmount, buyAssetCode, buyAssetIssuer, buyAmount]);\n        return transaction;\n    }\n\n    async composeAllowTrustOperation(assetIssuerPublicKey, assetCode, trustorPublicKey, authorizeTrueOrFalse) {\n        logger.trace('composeAllowTrustOperation entry', [assetIssuerPublicKey, assetCode, trustorPublicKey]);\n        const allowTrustOperation = StellarSDK.Operation.allowTrust({\n            source: assetIssuerPublicKey,\n            trustor: trustorPublicKey,\n            assetCode: assetCode,\n            authorize: authorizeTrueOrFalse\n        });\n\n        logger.trace('composeAllowTrustOperation exit', [assetIssuerPublicKey, assetCode, trustorPublicKey]);\n        return allowTrustOperation;\n    }\n\n    async composeChangeTrustOperation(accountPublicKey, assetCode, assetIssuer, limit) {\n        logger.trace('composeChangeTrustOperation entry', [accountPublicKey, assetCode, assetIssuer, limit]);\n        const asset = new StellarSDK.Asset(assetCode, assetIssuer);\n        const changeTrustOperation = StellarSDK.Operation.changeTrust({\n            source: accountPublicKey,\n            asset: asset,\n            limit: limit\n        });\n\n        logger.trace('composeChangeTrustOperation exit', [accountPublicKey, assetCode, assetIssuer, limit]);\n        return changeTrustOperation;\n    }\n\n    async composeSetOptionsOperation_Weights(accountPublicKey, weight, low, medium, high) {\n        logger.trace('composeSetOptionsOperation_Weights entry', [accountPublicKey, weight, low, medium, high]);\n        const setOptionsOperation = StellarSDK.Operation.setOptions({\n            source: accountPublicKey,\n            masterWeight: weight,\n            lowThreshold: low,\n            medThreshold: medium,\n            highThreshold: high\n        })\n        logger.trace('composeSetOptionsOperation_Weights exit', [accountPublicKey, weight, low, medium, high]);\n        return setOptionsOperation;\n    }\n\n    async composeSetOptionsOperation_Flags(accountPublicKey, flagOperation, flagToSet) {\n        logger.trace('composeSetOptionsOperation_Flags entry', [accountPublicKey, flagOperation, flagToSet]);\n        let flag = null;\n        if (flagToSet === 'AuthRequiredFlag') {\n            flag = StellarSDK.AuthRequiredFlag | StellarSDK.AuthRevocableFlag\n        } else if (flagToSet === 'AuthRequiredFlagOnly') {\n            flag = StellarSDK.AuthRequiredFlag\n        } else if (flagToSet === 'AuthImmutableFlag') {\n            flag = StellarSDK.AuthImmutableFlag\n        } else if (flagToSet === 'AuthRevocableFlag') {\n            flag = StellarSDK.AuthRevocableFlag\n        }\n        const setOptionsOperation = StellarSDK.Operation.setOptions({\n            source: accountPublicKey,\n            [flagOperation]: flag\n        })\n        logger.trace('composeSetOptionsOperation_Flags exit', [accountPublicKey, flagOperation, flagToSet]);\n        return setOptionsOperation;\n    }\n\n    async composeSetOptionsOperation_HomeDomain(accountPublicKey, homeDomain) {\n        logger.trace('composeSetOptionsOperation_HomeDomain entry', [accountPublicKey, homeDomain]);\n        const setOptionsOperation = StellarSDK.Operation.setOptions({\n            source: accountPublicKey,\n            homeDomain: homeDomain\n        })\n        logger.trace('composeSetOptionsOperation_HomeDomain exit', [accountPublicKey, homeDomain]);\n        return setOptionsOperation;\n    }\n\n    async composeSetOptionsOperation_Signer(accountPublicKey, signerType, signer, weight) {\n        logger.trace('composeSetOptionsOperation_Signer entry', [accountPublicKey, signerType, signer, weight]);\n        const setOptionsOperation = StellarSDK.Operation.setOptions({\n            source: accountPublicKey,\n            signer: {\n                [signerType]: signer,\n                weight: weight\n            }\n        });\n        logger.trace('composeSetOptionsOperation_Signer exit', [accountPublicKey, signerType, signer, weight]);\n        return setOptionsOperation;\n    }\n\n    async composeCreateAccountOperation(sourceAcctPublicKey, newAcctPublicKey, initialBalance) {\n        logger.trace('composeCreateAccountOperation entry', [sourceAcctPublicKey, newAcctPublicKey, initialBalance]);\n        const createAccountOperation = StellarSDK.Operation.createAccount({\n            source: sourceAcctPublicKey,\n            destination: newAcctPublicKey,\n            startingBalance: initialBalance\n        });\n        logger.trace('composeCreateAccountOperation exit', [sourceAcctPublicKey, newAcctPublicKey, initialBalance]);\n        return createAccountOperation;\n    }\n\n    async composePaymentOperation(senderPublicKey, receiverPublicKey, assetCode, assetIssuingAccount, amount) {\n        logger.trace('composePaymentOperation entry', [senderPublicKey, receiverPublicKey, assetCode, assetIssuingAccount, amount]);\n        let asset;\n        if (assetCode === 'XLM') {\n            asset = StellarSDK.Asset.native();\n        } else {\n            asset = new StellarSDK.Asset(assetCode, assetIssuingAccount);\n        }\n\n        const paymentOperation = StellarSDK.Operation.payment({\n            source: senderPublicKey,\n            destination: receiverPublicKey,\n            asset: asset,\n            amount: amount\n        });\n\n        logger.trace('composePaymentOperation exit', [senderPublicKey, receiverPublicKey, assetCode, assetIssuingAccount, amount]);\n        return paymentOperation;\n    }\n\n    async composeManageOfferOperation(publicKey, offerId, assetToSell, sellAmount, assetToBuy, buyAmount) {\n        logger.trace('createManageOfferOperation entry', [publicKey, offerId, assetToSell, sellAmount, assetToBuy, buyAmount]);\n        // NOTE: offerId should be zero(0/'0') for new offers being created and non-zero for updated/deleted offers\n\n        let amount;\n        let price;\n\n        if (sellAmount === '0') {\n            // If sell amount is zero, this has to be a delete offer, and we need a non-zero offerId.\n            if ((!offerId) || (offerId === '0') || (offerId === 0)) {\n                throw new Error(i18n.__('invalid.deleteOffer.data'));\n            }\n\n            price = '1';\n            amount = '0';\n        } else {\n            price = (buyAmount / sellAmount).toFixed(10);\n            amount = sellAmount;\n        }\n\n        let manageOfferOperation = StellarSDK.Operation.manageOffer({\n            selling: assetToSell,\n            buying: assetToBuy,\n            amount: amount,\n            price: price,\n            offerId: offerId,\n            source: publicKey\n        })\n\n        logger.trace('createManageOfferOperation exit', [publicKey, offerId, assetToSell, sellAmount, assetToBuy, buyAmount]);\n        return manageOfferOperation;\n    }\n\n    async getInitiatedTransactions(publicKey) {\n        logger.trace('getInitiatedTransactions entry', publicKey);\n        let myTransactions = await Transaction.find({ source_acct: publicKey });\n        let initiatedTransactions = []\n        for (const myTransaction of myTransactions) {\n            const stellarTransaction = await this._rehydrateStellarTransaction(myTransaction);\n            initiatedTransactions.push(stellarTransaction);\n        }\n        logger.trace('getInitiatedTransactions exit');\n        return initiatedTransactions;\n    }\n\n    async getTransactionsToSign(publicKey) {\n        logger.trace('getTransactionsToSign entry', [publicKey]);\n        const unsignedTransactions = await Transaction.find({submitted: false, $or:[{signatures: { $elemMatch: { public_key: publicKey, signed: false } }},{operations: { $elemMatch: {needs_signatures: true, signatures: { $elemMatch: { public_key: publicKey, signed: false }}}}}]});\n        let decoratedTransactions = []\n        for (const transaction of unsignedTransactions) {\n            const stellarTransaction = await this._rehydrateStellarTransaction(transaction);\n            decoratedTransactions.push(stellarTransaction);\n        }\n        const approverTransactions = await Transaction.find({submitted: false, approvers: { $elemMatch: { public_key: publicKey, signed: false } } });\n        for (const transaction of approverTransactions) {\n            const stellarTransaction = await this._rehydrateStellarTransaction(transaction);\n            decoratedTransactions.push(stellarTransaction);\n        }\n        logger.trace('getTransactionsToSign exit', decoratedTransactions);\n        return decoratedTransactions;\n    }\n\n\n    async _rehydrateStellarTransaction(persistedTransaction) {\n        let stellarTransaction = this.deserializeTransaction(persistedTransaction.xdr_representation);\n        stellarTransaction = await this._decorateStellarTransaction(stellarTransaction, persistedTransaction);\n        return stellarTransaction;\n    }\n\n    async _decorateStellarTransaction(stellarTransaction, persistedTransaction) {\n        logger.trace('_decorateStellarTransaction entry', persistedTransaction.id);\n        stellarTransaction.id = persistedTransaction.id;\n        stellarTransaction.type = persistedTransaction.operations[0].op_type;\n        stellarTransaction.source_acct = persistedTransaction.source_acct;\n        stellarTransaction.xdr_representation = persistedTransaction.xdr_representation;\n        stellarTransaction.description = persistedTransaction.description;\n        stellarTransaction.submitted = persistedTransaction.submitted;\n        stellarTransaction.error = persistedTransaction.error;\n        stellarTransaction.signers = persistedTransaction.signatures;\n        stellarTransaction.preAuthApprovers = persistedTransaction.approvers;\n        stellarTransaction.createdAt = persistedTransaction.createdAt;\n        stellarTransaction.hash = persistedTransaction.hash;\n        stellarTransaction.operations = persistedTransaction.operations;\n        logger.trace('_decorateStellarTransaction exit', persistedTransaction.id);\n        return stellarTransaction;\n    }\n\n    serializeTransaction(transaction) {\n        return transaction.toEnvelope().toXDR().toString('base64');\n    }\n\n    deserializeTransaction(base64XDR) {\n        return new StellarSDK.Transaction(base64XDR);\n    }\n\n    determineThresholdRequired(stellarAccount, thresholdCat) {\n        let thresholdRequired;\n\n        if (thresholdCat === 'Low') {\n            thresholdRequired = stellarAccount.thresholds.low_threshold;\n        } else if (thresholdCat === 'Medium') {\n            thresholdRequired = stellarAccount.thresholds.med_threshold;\n        } else if (thresholdCat === 'High') {\n            thresholdRequired = stellarAccount.thresholds.high_threshold;\n        }\n\n        return thresholdRequired;\n    }\n\n    async canTransactionBeSubmitted(myTransaction) {\n        logger.trace('canTransactionBeSubmitted entry', myTransaction.id);\n        let transactionCanBeSubmitted = false;\n        let opsCanBeSubmitted = this.canOperationsBeSubmitted(myTransaction);\n        if (opsCanBeSubmitted) {\n            let signerWeightSum = 0;\n            for (let signature of myTransaction.signatures) {\n                if (signature.signed === true) {\n                    signerWeightSum = signerWeightSum + signature.weight;\n                }\n            }\n\n            const loadedAccount = await _stellarNetwork.loadAccount(myTransaction.source_acct);\n            let thresholdRequired = this.determineThresholdRequired(loadedAccount, myTransaction.threshold_category);\n            if (signerWeightSum >= thresholdRequired) {\n                transactionCanBeSubmitted = true;\n            }\n        }\n\n        logger.trace('canTransactionBeSubmitted exit', [myTransaction.id, transactionCanBeSubmitted]);\n        return transactionCanBeSubmitted;\n    }\n\n    async canOperationsBeSubmitted(myTransaction) {\n        let operationsCanBeSubmitted = true;\n\n        if (myTransaction.differentSourceOperationExists) {\n            let operationsForTransaction = myTransaction.operations;\n            for (let operation of operationsForTransaction) {\n                if (!operation.sameSourceAccount) {\n                    let opHasSignatures = await this.doesOperationHaveSignatures(operation);\n                    if (!opHasSignatures) {\n                        operationsCanBeSubmitted = false;\n                    } else {\n                        operation.needs_signatures = false;\n                    }\n                }\n            }\n        }\n\n        return operationsCanBeSubmitted;\n    }\n\n    async doesOperationHaveSignatures(myOperation) {\n        logger.trace('doesOperationHaveSignatures entry', myOperation.id);\n        const loadedAccount = await _stellarNetwork.loadAccount(myOperation.source_acct);\n\n        let signerWeightSum = 0;\n        let canBeSubmitted = false;\n        for (let signature of myOperation.signatures) {\n            if (signature.signed === true) {\n                signerWeightSum = signerWeightSum + signature.weight;\n            }\n        }\n\n        let thresholdRequired = this.determineThresholdRequired(loadedAccount, myOperation.threshold_category);\n        if (signerWeightSum >= thresholdRequired) {\n            canBeSubmitted = true;\n        }\n\n        logger.trace('doesOperationHaveSignatures exit', [myOperation.id, canBeSubmitted]);\n        return canBeSubmitted;\n    }\n\n    async signTransaction(public_key, secret, transaction_id) {\n        logger.trace('signTransaction entry', [public_key, transaction_id]);\n        const signerKeyPair = StellarSDK.Keypair.fromSecret(secret);\n\n        if (public_key !== signerKeyPair.publicKey()) {\n            throw new Error(i18n.__('invalid.stellar.keypair'));\n        }\n\n        let myTransaction = await Transaction.findOne({ id: transaction_id });\n\n        if (myTransaction.submitted === true) {\n            throw new Error(i18n.__('transaction.already.submitted'));\n        }\n\n        let signerIsAuthorized = false;\n        let alreadySigned = false;\n\n        for (let signature of myTransaction.signatures) {\n            if (signature.public_key === public_key) {\n                signerIsAuthorized = true;\n                if (signature.signed === true) {\n                    alreadySigned = true;\n                } else {\n                    signature.signed = true;\n                }\n            }\n        }\n\n        for (let myOperation of myTransaction.operations) {\n            for (let signature of myOperation.signatures) {\n                if (signature.public_key === public_key) {\n                    signerIsAuthorized = true;\n                    if (signature.signed === true) {\n                        alreadySigned = true;\n                    } else {\n                        signature.signed = true;\n                    }\n                }\n            }\n        }\n\n        if (!signerIsAuthorized) {\n            throw new Error(i18n.__('signer.not.authorized'));\n        }\n\n        let stellarTransaction = new StellarSDK.Transaction(myTransaction.xdr_representation);\n        if (!alreadySigned) {\n            stellarTransaction.sign(signerKeyPair);\n\n            myTransaction.xdr_representation = this.serializeTransaction(stellarTransaction);\n            myTransaction.save();\n        }\n\n        let submittable = await this.canTransactionBeSubmitted(myTransaction);\n        // check all operations and check the overall transaction\n\n        if (submittable) {\n            try {\n                logger.trace('submittable', myTransaction.xdr_representation);\n                await _stellarNetwork.submitSerializedTransaction(myTransaction.xdr_representation);\n                myTransaction.submitted = true;\n            } catch (submissionError) {\n                let errorResponseData = this._parseSubmissionError(submissionError);\n                myTransaction.error = errorResponseData;\n                myTransaction.save();\n                logger.trace('submitSerializedTransaction error', errorResponseData);\n                throw new Error(errorResponseData);\n            }\n        }\n\n        myTransaction.save();\n\n        stellarTransaction = await this._decorateStellarTransaction(new StellarSDK.Transaction(myTransaction.xdr_representation), myTransaction);\n        logger.trace('signTransaction exit', [public_key, transaction_id, stellarTransaction.hash]);\n        return stellarTransaction;\n    }\n\n    async preAuthorizeTransaction(publicKey, decryptedSecret, transactionId, finalApprover) {\n        logger.trace('preAuthorizeTransaction entry', [publicKey, transactionId, finalApprover]);\n        let myTransaction = await Transaction.findOne({ id: transactionId });\n        let stellarTransaction = new StellarSDK.Transaction(myTransaction.xdr_representation);\n\n        const accountForOptions = await _stellarNetwork.loadAccount(myTransaction.source_acct);\n\n        let thresholdRequired = this.determineThresholdRequired(accountForOptions, myTransaction.threshold_category);\n\n        let signerWeight = 1;\n        if (thresholdRequired > 1) {\n            signerWeight = thresholdRequired;\n        }\n\n        let addSignerTransaction = await this.setupSetOptionsTransaction_Signer(accountForOptions, myTransaction.source_acct, 'preAuthTx', stellarTransaction.hash(), signerWeight);\n        await this.signTransaction(publicKey, decryptedSecret, addSignerTransaction.id);\n\n        myTransaction = await Transaction.findOne({ id: transactionId });\n\n        if (finalApprover) {\n            let approver = new Object();\n            approver.public_key = finalApprover;\n            approver.signed = false;\n            myTransaction.approvers.push(approver);\n            await myTransaction.save();\n        }\n\n        stellarTransaction = await this._decorateStellarTransaction(new StellarSDK.Transaction(myTransaction.xdr_representation), myTransaction);\n        logger.trace('preAuthorizeTransaction exit', [publicKey, transactionId, stellarTransaction.hash]);\n        return stellarTransaction;\n    }\n\n    async submitPreAuthorizedTransaction(transactionId, finalApprover) {\n        let myTransaction = await Transaction.findOne({ id: transactionId });\n\n        let approverIsAuthorized = false;\n        for (let approver of myTransaction.approvers) {\n            if (approver.public_key === finalApprover) {\n                approverIsAuthorized = true;\n                approver.signed = true;\n            }\n        }\n\n        if (!approverIsAuthorized) {\n            throw new Error(i18n.__('approver.not.authorized'));\n        }\n\n        try {\n            await _stellarNetwork.submitSerializedTransaction(myTransaction.xdr_representation);\n            myTransaction.submitted = true;\n            myTransaction.save();\n        } catch (submissionError) {\n            let errorResponseData = this._parseSubmissionError(submissionError);\n            myTransaction.error = errorResponseData;\n            myTransaction.save();\n            logger.trace('submitSerializedTransaction error', errorResponseData);\n            throw new Error(errorResponseData);\n        }\n\n        return myTransaction;\n    }\n\n    _parseSubmissionError(submissionError) {\n        let errorResponseData = JSON.stringify(submissionError.message);\n        if ((submissionError.response) && (submissionError.response.data)) {\n            if ((submissionError.response.data.extras) && (submissionError.response.data.extras.result_codes)) {\n                errorResponseData += JSON.stringify(submissionError.response.data.extras.result_codes);\n            } else {\n                errorResponseData += JSON.stringify(submissionError.response.data);\n            }\n        }\n        return errorResponseData;\n    }\n\n};\n"]}