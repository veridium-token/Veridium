{"version":3,"sources":["../../src/models/Wallet.js"],"names":["require","Account","Asset","StellarNetwork","_stellar","StellarSDK","TransactionHandler","_transactionHandler","TransactionOperationBuilder","Security","_security","crypto","bcrypt","fees","log4js","logger","getLogger","level","process","env","LOG_LEVEL","i18n","path","configure","directory","join","__dirname","_","module","exports","Wallet","bootstrapAccountFromTestNetwork","user","description","passphrase","trustAuthorizationRequired","preAuthorizedTransactions","homeDomain","trace","keyPair","bootstrapTestAccount","account","registerAccount","publicKey","secret","loadedAccount","loadAccount","txOpBuilder","flagsOperation","composeSetOptionsOperation_Flags","addOperation","domainOperation","composeSetOptionsOperation_HomeDomain","stellarTransaction","buildTransaction","signTransaction","id","stellAccount","_mergeAccountFields","createAccountFromSource","sourceAcctPublicKey","sourceAcctSecret","initialBalance","newAcctKeyPair","Keypair","random","initializeExistingKeypair","getAccount","sourceAcctSequenceNum","existingPublicKey","existingSecret","keypair","fromSecret","Error","__","sourceAcct","createAccountTransaction","setupCreateAccountTransaction","accountPublicKey","accountSecret","salt","randomBytes","toString","encryptedSecret","encrypt","encryptedPassphrase","hash","userId","tenantId","email","public_key","encrypted_secret","pre_authorize_transactions","save","shallowCopy","findOne","getAccounts","accounts","find","mergedAccounts","push","checkAuthorized","authorized","createAsset","assetCode","assetIssuer","stellarAsset","asset","asset_code","asset_issuer","result","getAssets","assets","getAccountDetails","forEach","toObject","value","key","set","getFee","type"],"mappings":"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","file":"Wallet.js","sourcesContent":["/* wallet controller module */\nrequire('../config/initializers/database');\nconst Account = require('./Account');\nconst Asset = require('./Asset');\n\nconst StellarNetwork  = require('./StellarNetwork');\nconst _stellar = new StellarNetwork();\nconst StellarSDK = require('stellar-sdk');\nconst TransactionHandler  = require('./TransactionHandler');\nconst _transactionHandler = new TransactionHandler();\nconst TransactionOperationBuilder = require('./TransactionOperationBuilder');\n\nconst Security = require ('../utils/Security');\nconst _security =  new Security();\nconst crypto = require('crypto');\nconst bcrypt = require('bcrypt');\n\nconst fees = require('./fees.json');\n\nconst log4js = require('log4js');\nconst logger = log4js.getLogger('Wallet');\nlogger.level = process.env.LOG_LEVEL || 'debug';\n\nconst i18n = require('i18n');\nconst path = require('path');\ni18n.configure({\n    directory: path.join(__dirname, '/../locales')\n});\nconst _ = require('lodash');\n\nmodule.exports = class Wallet {\n    /* Creating Account */\n    async bootstrapAccountFromTestNetwork(user, description, passphrase, trustAuthorizationRequired, preAuthorizedTransactions, homeDomain) {\n        logger.trace('bootstrapAccountFromTestNetwork entry', user);\n        const keyPair = await _stellar.bootstrapTestAccount();\n\n        const account = await this.registerAccount(user, description, keyPair.publicKey(), keyPair.secret(), passphrase, preAuthorizedTransactions);\n\n        if (trustAuthorizationRequired || homeDomain) {\n            // if either exists, we have an additional setOptions transaction\n            const loadedAccount = await _stellar.loadAccount(keyPair.publicKey());\n            let txOpBuilder = new TransactionOperationBuilder(loadedAccount);\n\n            if (trustAuthorizationRequired) {\n                let flagsOperation = await _transactionHandler.composeSetOptionsOperation_Flags(keyPair.publicKey(), 'setFlags', 'AuthRequiredFlag');\n                await txOpBuilder.addOperation(flagsOperation);\n            }\n\n            if (homeDomain){\n                let domainOperation = await _transactionHandler.composeSetOptionsOperation_HomeDomain(keyPair.publicKey(), homeDomain);\n                await txOpBuilder.addOperation(domainOperation);\n            }\n\n            let stellarTransaction = await txOpBuilder.buildTransaction();\n            await _transactionHandler.signTransaction(keyPair.publicKey(), keyPair.secret(), stellarTransaction.id);\n        }\n\n        const stellAccount = await this._mergeAccountFields(account, keyPair.publicKey());\n\n        logger.trace('bootstrapAccountFromTestNetwork exit')\n        return stellAccount;\n    }\n\n    async createAccountFromSource(user, description, sourceAcctPublicKey, sourceAcctSecret, passphrase, initialBalance, trustAuthorizationRequired, preAuthorizedTransactions, homeDomain) {\n        logger.trace('createAccountFromSource entry', [user, description, sourceAcctPublicKey, sourceAcctSecret, passphrase, initialBalance, trustAuthorizationRequired, preAuthorizedTransactions]);\n\n        const newAcctKeyPair = StellarSDK.Keypair.random();\n        let stellAccount = await this.initializeExistingKeypair(user, description, sourceAcctPublicKey, sourceAcctSecret, '0', newAcctKeyPair.publicKey(), newAcctKeyPair.secret(), passphrase, initialBalance, preAuthorizedTransactions);\n\n        if (trustAuthorizationRequired || homeDomain) {\n            // if either exists, we have an additional setOptions transaction\n            const loadedAccount = await _stellar.loadAccount(newAcctKeyPair.publicKey());\n            let txOpBuilder = new TransactionOperationBuilder(loadedAccount);\n\n            if (trustAuthorizationRequired) {\n                let flagsOperation = await _transactionHandler.composeSetOptionsOperation_Flags(newAcctKeyPair.publicKey(), 'setFlags', 'AuthRequiredFlag');\n                await txOpBuilder.addOperation(flagsOperation);\n            }\n\n            if (homeDomain){\n                let domainOperation = await _transactionHandler.composeSetOptionsOperation_HomeDomain(newAcctKeyPair.publicKey(), homeDomain);\n                await txOpBuilder.addOperation(domainOperation);\n            }\n\n            let stellarTransaction = await txOpBuilder.buildTransaction();\n            await _transactionHandler.signTransaction(newAcctKeyPair.publicKey(), newAcctKeyPair.secret(), stellarTransaction.id);\n\n            // reload deep copy of the account from stellar after transactions completed\n            stellAccount = await this.getAccount(user,  newAcctKeyPair.publicKey(), false);\n        }\n\n        logger.trace('createAccountFromSource exit')\n        return stellAccount;\n    }\n\n    async initializeExistingKeypair(user, description, sourceAcctPublicKey, sourceAcctSecret, sourceAcctSequenceNum, existingPublicKey, existingSecret, passphrase, initialBalance, preAuthorizedTransactions) {\n        logger.trace('initializeExistingKeypair entry', [user, description, sourceAcctPublicKey, sourceAcctSecret, sourceAcctSequenceNum, existingPublicKey, existingSecret, passphrase, initialBalance, preAuthorizedTransactions]);\n        const keypair = StellarSDK.Keypair.fromSecret(sourceAcctSecret);\n        if (sourceAcctPublicKey!==keypair.publicKey()) {\n            throw new Error(i18n.__('invalid.stellar.keypair'));\n        }\n        let sourceAcct;\n        if (!sourceAcctSequenceNum || sourceAcctSequenceNum === '0') {\n            sourceAcct = await _stellar.loadAccount(sourceAcctPublicKey);\n        } else {\n            sourceAcct = await _stellar.loadAccount(sourceAcctPublicKey, sourceAcctSequenceNum);\n        }\n\n        let createAccountTransaction = await _transactionHandler.setupCreateAccountTransaction(sourceAcct, sourceAcctPublicKey, existingPublicKey, initialBalance);\n\n        logger.trace('stellarTransaction', createAccountTransaction.id);\n        await _transactionHandler.signTransaction(sourceAcctPublicKey, sourceAcctSecret, createAccountTransaction.id);\n        const account = await this.registerAccount(user, description, existingPublicKey, existingSecret, passphrase, preAuthorizedTransactions);\n\n        const stellAccount = await this._mergeAccountFields(account, existingPublicKey);\n        logger.trace('initializeExistingKeypair exit')\n        return stellAccount;\n    }\n\n\n    /* Register Account */\n    async registerAccount(user, description, accountPublicKey, accountSecret, passphrase, preAuthorizedTransactions) {\n        logger.trace('registerAccount entry', user);\n\n        const salt = crypto.randomBytes(128).toString('base64');\n        const encryptedSecret = await _security.encrypt(accountSecret, passphrase, salt)\n        var encryptedPassphrase = await bcrypt.hash(passphrase, 10);\n\n        const account = new Account ({\n            userId: user.id,\n            tenantId: user.tenantId,\n            email: user.email,\n            description: description,\n            public_key: accountPublicKey,\n            salt: salt,\n            encrypted_secret: encryptedSecret,\n            passphrase: encryptedPassphrase,\n            pre_authorize_transactions: preAuthorizedTransactions\n        })\n\n        await account.save();\n\n        logger.trace('registerAccount exit', account);\n        return account;\n    }\n\n    async getAccount(user, publicKey, shallowCopy) {\n        logger.trace('getAccount entry', [user, publicKey, shallowCopy]);\n        const account = await Account.findOne({ userId: user.id, public_key: publicKey });\n        if (!account) {\n            logger.trace('getAccount exit - not found');\n            return account;\n        }\n        if(shallowCopy){\n            logger.trace('getAccount exit');\n            return account;\n        }else{\n            const stellAccount = await this._mergeAccountFields(account, publicKey);\n\n            logger.trace('getAccount exit');\n            return stellAccount;\n        }\n    }\n\n    async getAccounts(user) {\n        logger.trace('getAccounts entry', user);\n        const accounts = await Account.find({ userId: user.id });\n        let mergedAccounts = []\n        for (const account of accounts) {\n            const stellAccount = await this._mergeAccountFields(account, account.public_key);\n            mergedAccounts.push(stellAccount);\n        }\n        logger.trace('getAccounts exit');\n        return mergedAccounts;\n    }\n\n    async checkAuthorized(user, publicKey){\n        logger.trace('checkAuthorized entry', [user, publicKey]);\n        let authorized = false;\n        if(user && user.id && publicKey){\n            const account = await Account.findOne({ userId: user.id, public_key: publicKey });\n            if (account) {\n                authorized = true;\n            }\n        }\n        logger.trace('checkAuthorized exit', authorized);\n        return authorized;\n    }\n\n    async createAsset(user, assetCode, assetIssuer, description) {\n        logger.trace('createAsset entry', user);\n        const stellarAsset = await _stellar.createAsset(assetCode, assetIssuer);\n        logger.trace('checkAuthorized stellarAsset created', stellarAsset);\n        const asset = new Asset ({\n            userId: user.id,\n            tenantId: user.tenantId,\n            email: user.email,\n            asset_code: assetCode,\n            asset_issuer: assetIssuer,\n            description: description\n        })\n        const result = await asset.save();\n        logger.trace('createAsset exit', [asset, result]);\n        return asset;\n    }\n    async getAssets(user) {\n        logger.trace('getAssets entry', user);\n        const assets = await Asset.find({ tenantId: user.tenantId });\n        logger.trace('getAssets exit', assets);\n        return assets;\n    }\n\n    async _mergeAccountFields(account, publicKey){\n        logger.trace('_mergeAccountFields entry', [account, publicKey]);\n        const stellAccount = await _stellar.getAccountDetails(publicKey);\n        _.forEach(account.toObject(), function(value, key) {\n            if(key === '_id'){\n                _.set(stellAccount, 'id', value);\n            }else{\n                _.set(stellAccount, key, value);\n            }\n        });\n        logger.trace('_mergeAccountFields exit', [stellAccount]);\n        return stellAccount;\n    }\n\n    async getFee(type){\n        logger.trace('getFee entry', [type]);\n        const result = fees[type];\n        logger.trace('getFee exit', [result]);\n        return result;\n    }\n\n};\n"]}