{"version":3,"sources":["../../src/models/TransactionOperationBuilder.js"],"names":["StellarSDK","require","uuidv4","StellarNetwork","_stellarNetwork","Transaction","log4js","logger","getLogger","level","process","env","LOG_LEVEL","i18n","path","configure","directory","join","__dirname","module","exports","TransactionOperationBuilder","constructor","transactionSourceAccount","optionalDescription","_transactionSourceAccount","_stellarTransactionBuilder","TransactionBuilder","setTimeout","_pendingTransactionId","_operations","_optionalDescription","addOperation","operation","trace","push","addMemo","memo","buildTransaction","stellarTransaction","build","transaction","_persistNewTransaction","_determineThresholdOfOperation","operationFromXDR","thresholdCat","type","signer","masterWeight","lowThreshold","mediumThreshold","highThreshold","serializedXDR","toEnvelope","toXDR","toString","id","source_acct","accountId","xdr_representation","submitted","hash","_hasMediumThresholdOp","_hasHighThresholdOp","operations","description","signers","forEach","entry","signature","Object","public_key","key","signed","weight","signatures","differentSourceOperationExists","Operation","fromXDRObject","operationSourceAccount","loadAccount","source","operationToPersist","op_type","threshold_category","sameSourceAccount","needs_signatures","maxThresholdCategory","save","_decorateStellarTransaction","persistedTransaction","error","preAuthApprovers","approvers","createdAt"],"mappings":";;;;AAAA,MAAMA,aAAaC,QAAQ,aAAR,CAAnB;AACA,MAAMC,SAASD,QAAQ,SAAR,CAAf;;AAEA,MAAME,iBAAiBF,QAAQ,kBAAR,CAAvB;AACA,MAAMG,kBAAkB,IAAID,cAAJ,EAAxB;;AAEA,MAAME,cAAcJ,QAAQ,eAAR,CAApB;;AAEA,MAAMK,SAASL,QAAQ,QAAR,CAAf;AACA,MAAMM,SAASD,OAAOE,SAAP,CAAiB,6BAAjB,CAAf;AACAD,OAAOE,KAAP,GAAeC,QAAQC,GAAR,CAAYC,SAAZ,IAAyB,OAAxC;;AAEA,MAAMC,OAAOZ,QAAQ,MAAR,CAAb;AACA,MAAMa,OAAOb,QAAQ,MAAR,CAAb;AACAY,KAAKE,SAAL,CAAe;AACXC,eAAWF,KAAKG,IAAL,CAAUC,SAAV,EAAqB,aAArB;AADA,CAAf;;AAIAC,OAAOC,OAAP,GAAiB,MAAMC,2BAAN,CAAkC;;AAE/CC,gBAAYC,wBAAZ,EAAsCC,mBAAtC,EAA2D;AACvD,aAAKC,yBAAL,GAAiCF,wBAAjC;AACA,aAAKG,0BAAL,GAAkC,IAAI1B,WAAW2B,kBAAf,CAAkCJ,wBAAlC,EAA4DK,UAA5D,CAAuE,GAAvE,CAAlC;AACA,aAAKC,qBAAL,GAA6B3B,QAA7B;AACA,aAAK4B,WAAL,GAAmB,EAAnB;AACA,aAAKC,oBAAL,GAA4BP,mBAA5B;AACH;;AAEKQ,gBAAN,CAAmBC,SAAnB,EAA8B;AAAA;;AAAA;AAC1B1B,mBAAO2B,KAAP,CAAa,wCAAb;;AAEA,kBAAKJ,WAAL,CAAiBK,IAAjB,CAAsBF,SAAtB;AACA,kBAAM,MAAKP,0BAAL,CAAgCM,YAAhC,CAA6CC,SAA7C,CAAN;;AAEA1B,mBAAO2B,KAAP,CAAa,uCAAb;AACA,mBAAO,KAAP;AAP0B;AAQ7B;;AAEKE,WAAN,CAAcC,IAAd,EAAoB;AAAA;;AAAA;AAChB,mBAAKX,0BAAL,CAAgCU,OAAhC,CAAwCC,IAAxC;AADgB;AAEnB;;AAEKC,oBAAN,GAAyB;AAAA;;AAAA;AACrB,gBAAIC,qBAAqB,OAAKb,0BAAL,CAAgCc,KAAhC,EAAzB;AACA,kBAAMC,cAAc,MAAM,OAAKC,sBAAL,CAA4BH,kBAA5B,CAA1B;AACA,mBAAOE,WAAP;AAHqB;AAIxB;;AAEDE,mCAA+BC,gBAA/B,EAAiD;AAC7C,YAAIC,eAAe,QAAnB;AACA,YAAID,iBAAiBE,IAAjB,KAA0B,YAA9B,EAA4C;AACxC,gBAAIF,iBAAiBG,MAArB,EAA6B;AACzBF,+BAAe,MAAf;AACH,aAFD,MAEO,IAAID,iBAAiBI,YAArB,EAAmC;AACtCH,+BAAe,MAAf;AACH,aAFM,MAEA,IAAID,iBAAiBK,YAArB,EAAmC;AACtCJ,+BAAe,MAAf;AACH,aAFM,MAEA,IAAID,iBAAiBM,eAArB,EAAsC;AACzCL,+BAAe,MAAf;AACH,aAFM,MAEA,IAAID,iBAAiBO,aAArB,EAAoC;AACvCN,+BAAe,MAAf;AACH;AACJ,SAZD,MAYO,IAAID,iBAAiBE,IAAjB,KAA0B,cAA9B,EAA8C;AACjDD,2BAAe,MAAf;AACH,SAFM,MAEA,IAAID,iBAAiBE,IAAjB,KAA0B,cAA9B,EAA8C;AACjDD,2BAAe,KAAf;AACH,SAFM,MAEA,IAAID,iBAAiBE,IAAjB,KAA0B,YAA9B,EAA4C;AAC/CD,2BAAe,KAAf;AACH;;AAED,eAAOA,YAAP;AACH;;AAEKH,0BAAN,CAA6BH,kBAA7B,EAAiD;AAAA;;AAAA;;AAE7ChC,mBAAO2B,KAAP,CAAa,6BAAb;AACA,kBAAMkB,gBAAgBb,mBAAmBc,UAAnB,GAAgCC,KAAhC,GAAwCC,QAAxC,CAAiD,QAAjD,CAAtB;AACA,kBAAMd,cAAc,IAAIpC,WAAJ,CAAgB;AAChCmD,oBAAI,OAAK3B,qBADuB;AAEhC4B,6BAAa,OAAKhC,yBAAL,CAA+BiC,SAA/B,EAFmB;AAGhCC,oCAAoBP,aAHY;AAIhCQ,2BAAW,KAJqB;AAKhCC,sBAAMtB,mBAAmBsB,IAAnB,GAA0BN,QAA1B,CAAmC,KAAnC;AAL0B,aAAhB,CAApB;;AAQAd,wBAAYqB,qBAAZ,GAAoC,KAApC;AACArB,wBAAYsB,mBAAZ,GAAkC,KAAlC;AACAtB,wBAAYuB,UAAZ,GAAyB,EAAzB;AACAvB,wBAAYwB,WAAZ,GAA0B,OAAKlC,oBAA/B;;AAEA,mBAAKN,yBAAL,CAA+ByC,OAA/B,CAAuCC,OAAvC,CAA+C,UAAUC,KAAV,EAAiB;AAC5D,oBAAIC,YAAY,IAAIC,MAAJ,EAAhB;AACAD,0BAAUE,UAAV,GAAuBH,MAAMI,GAA7B;AACAH,0BAAUI,MAAV,GAAmB,KAAnB;AACAJ,0BAAUK,MAAV,GAAmBN,MAAMM,MAAzB;AACAjC,4BAAYkC,UAAZ,CAAuBxC,IAAvB,CAA4BkC,SAA5B;AACH,aAND;;AAQA5B,wBAAYmC,8BAAZ,GAA6C,KAA7C;;AAEA,iBAAK,IAAI3C,SAAT,IAAsB,OAAKH,WAA3B,EAAwC;AACpC,sBAAMc,mBAAmB5C,WAAW6E,SAAX,CAAqBC,aAArB,CAAmC7C,SAAnC,CAAzB;AACA,sBAAM8C,yBAAyB,MAAM3E,gBAAgB4E,WAAhB,CAA4BpC,iBAAiBqC,MAA7C,CAArC;;AAEA,oBAAIpC,eAAe,OAAKF,8BAAL,CAAoCC,gBAApC,CAAnB;AACA,oBAAIC,iBAAiB,QAArB,EAA+B;AAC3BJ,gCAAYqB,qBAAZ,GAAoC,IAApC;AACH,iBAFD,MAEO,IAAIjB,iBAAiB,MAArB,EAA6B;AAChCJ,gCAAYsB,mBAAZ,GAAkC,IAAlC;AACH;;AAED,oBAAImB,qBAAqB,IAAIZ,MAAJ,EAAzB;AACAY,mCAAmBC,OAAnB,GAA6BvC,iBAAiBE,IAA9C;AACAoC,mCAAmBE,kBAAnB,GAAwCvC,YAAxC;AACAqC,mCAAmBzB,WAAnB,GAAiCb,iBAAiBqC,MAAlD;AACAC,mCAAmBP,UAAnB,GAAgC,EAAhC;;AAEA,oBAAI,OAAKlD,yBAAL,CAA+BiC,SAA/B,OAA+Cd,iBAAiBqC,MAApE,EAA4E;AACxEC,uCAAmBG,iBAAnB,GAAuC,IAAvC;AACAH,uCAAmBI,gBAAnB,GAAsC,KAAtC;AACH,iBAHD,MAGO;AACH7C,gCAAYmC,8BAAZ,GAA6C,IAA7C;AACAM,uCAAmBG,iBAAnB,GAAuC,KAAvC;AACAH,uCAAmBI,gBAAnB,GAAsC,IAAtC;AACH;;AAEDP,uCAAuBb,OAAvB,CAA+BC,OAA/B,CAAuC,UAAUC,KAAV,EAAiB;AACpD,wBAAIC,YAAY,IAAIC,MAAJ,EAAhB;AACAD,8BAAUE,UAAV,GAAuBH,MAAMI,GAA7B;AACAH,8BAAUI,MAAV,GAAmB,KAAnB;AACAJ,8BAAUK,MAAV,GAAmBN,MAAMM,MAAzB;AACAQ,uCAAmBP,UAAnB,CAA8BxC,IAA9B,CAAmCkC,SAAnC;AACH,iBAND;;AAQA5B,4BAAYuB,UAAZ,CAAuB7B,IAAvB,CAA4B+C,kBAA5B;AACH;;AAED,gBAAIK,uBAAuB,KAA3B;AACA,gBAAI9C,YAAYsB,mBAAhB,EAAqC;AACjCwB,uCAAuB,MAAvB;AACH,aAFD,MAEO,IAAI9C,YAAYqB,qBAAhB,EAAuC;AAC1CyB,uCAAuB,QAAvB;AACH;;AAED9C,wBAAY2C,kBAAZ,GAAiCG,oBAAjC;AACA,kBAAM9C,YAAY+C,IAAZ,EAAN;;AAEAjD,iCAAqB,OAAKkD,2BAAL,CAAiClD,kBAAjC,EAAqDE,WAArD,CAArB;AACAlC,mBAAO2B,KAAP,CAAa,4BAAb,EAA2CK,mBAAmBiB,EAA9D;AACA,mBAAOjB,kBAAP;AA5E6C;AA6EhD;;AAEKkD,+BAAN,CAAkClD,kBAAlC,EAAsDmD,oBAAtD,EAA4E;AAAA;AACxEnF,mBAAO2B,KAAP,CAAa,mCAAb,EAAkDwD,qBAAqBlC,EAAvE;AACAjB,+BAAmBiB,EAAnB,GAAwBkC,qBAAqBlC,EAA7C;AACAjB,+BAAmBO,IAAnB,GAA0B4C,qBAAqB1B,UAArB,CAAgC,CAAhC,EAAmCmB,OAA7D;AACA5C,+BAAmBkB,WAAnB,GAAiCiC,qBAAqBjC,WAAtD;AACAlB,+BAAmBoB,kBAAnB,GAAwC+B,qBAAqB/B,kBAA7D;AACApB,+BAAmB0B,WAAnB,GAAiCyB,qBAAqBzB,WAAtD;AACA1B,+BAAmBqB,SAAnB,GAA+B8B,qBAAqB9B,SAApD;AACArB,+BAAmBoD,KAAnB,GAA2BD,qBAAqBC,KAAhD;AACApD,+BAAmB2B,OAAnB,GAA6BwB,qBAAqBf,UAAlD;AACApC,+BAAmBqD,gBAAnB,GAAsCF,qBAAqBG,SAA3D;AACAtD,+BAAmBuD,SAAnB,GAA+BJ,qBAAqBI,SAApD;AACAvD,+BAAmBsB,IAAnB,GAA0B6B,qBAAqB7B,IAA/C;AACAtB,+BAAmByB,UAAnB,GAAgC0B,qBAAqB1B,UAArD;AACAzD,mBAAO2B,KAAP,CAAa,kCAAb,EAAiDwD,qBAAqBlC,EAAtE;AACA,mBAAOjB,kBAAP;AAfwE;AAgB3E;AAtJ8C,CAAnD","file":"TransactionOperationBuilder.js","sourcesContent":["const StellarSDK = require('stellar-sdk');\nconst uuidv4 = require('uuid/v4');\n\nconst StellarNetwork = require('./StellarNetwork');\nconst _stellarNetwork = new StellarNetwork();\n\nconst Transaction = require('./Transaction');\n\nconst log4js = require('log4js');\nconst logger = log4js.getLogger('TransactionOperationBuilder');\nlogger.level = process.env.LOG_LEVEL || 'debug';\n\nconst i18n = require('i18n');\nconst path = require('path');\ni18n.configure({\n    directory: path.join(__dirname, '/../locales')\n});\n\nmodule.exports = class TransactionOperationBuilder {\n\n    constructor(transactionSourceAccount, optionalDescription) {\n        this._transactionSourceAccount = transactionSourceAccount;\n        this._stellarTransactionBuilder = new StellarSDK.TransactionBuilder(transactionSourceAccount).setTimeout(200);\n        this._pendingTransactionId = uuidv4();\n        this._operations = [];\n        this._optionalDescription = optionalDescription;\n    }\n\n    async addOperation(operation) {\n        logger.trace('addOperationToTransactionBuilder entry');\n\n        this._operations.push(operation);\n        await this._stellarTransactionBuilder.addOperation(operation);\n\n        logger.trace('addOperationToTransactionBuilder exit');\n        return this;\n    }\n\n    async addMemo(memo) {\n        this._stellarTransactionBuilder.addMemo(memo);\n    }\n\n    async buildTransaction() {\n        let stellarTransaction = this._stellarTransactionBuilder.build();\n        const transaction = await this._persistNewTransaction(stellarTransaction);\n        return transaction;\n    }\n\n    _determineThresholdOfOperation(operationFromXDR) {\n        let thresholdCat = 'Medium';\n        if (operationFromXDR.type === 'setOptions') {\n            if (operationFromXDR.signer) {\n                thresholdCat = 'High';\n            } else if (operationFromXDR.masterWeight) {\n                thresholdCat = 'High';\n            } else if (operationFromXDR.lowThreshold) {\n                thresholdCat = 'High';\n            } else if (operationFromXDR.mediumThreshold) {\n                thresholdCat = 'High';\n            } else if (operationFromXDR.highThreshold) {\n                thresholdCat = 'High';\n            }\n        } else if (operationFromXDR.type === 'accountMerge') {\n            thresholdCat = 'High';\n        } else if (operationFromXDR.type === 'bumpSequence') {\n            thresholdCat = 'Low';\n        } else if (operationFromXDR.type === 'allowTrust') {\n            thresholdCat = 'Low';\n        }\n\n        return thresholdCat;\n    }\n\n    async _persistNewTransaction(stellarTransaction) {\n\n        logger.trace('persistNewTransaction entry');\n        const serializedXDR = stellarTransaction.toEnvelope().toXDR().toString('base64');\n        const transaction = new Transaction({\n            id: this._pendingTransactionId,\n            source_acct: this._transactionSourceAccount.accountId(),\n            xdr_representation: serializedXDR,\n            submitted: false,\n            hash: stellarTransaction.hash().toString('hex')\n        });\n\n        transaction._hasMediumThresholdOp = false;\n        transaction._hasHighThresholdOp = false;\n        transaction.operations = [];\n        transaction.description = this._optionalDescription;\n\n        this._transactionSourceAccount.signers.forEach(function (entry) {\n            let signature = new Object();\n            signature.public_key = entry.key;\n            signature.signed = false;\n            signature.weight = entry.weight;\n            transaction.signatures.push(signature);\n        });\n\n        transaction.differentSourceOperationExists = false;\n\n        for (let operation of this._operations) {\n            const operationFromXDR = StellarSDK.Operation.fromXDRObject(operation);\n            const operationSourceAccount = await _stellarNetwork.loadAccount(operationFromXDR.source);\n\n            let thresholdCat = this._determineThresholdOfOperation(operationFromXDR);\n            if (thresholdCat === 'Medium') {\n                transaction._hasMediumThresholdOp = true;\n            } else if (thresholdCat === 'High') {\n                transaction._hasHighThresholdOp = true;\n            }\n\n            let operationToPersist = new Object();\n            operationToPersist.op_type = operationFromXDR.type;\n            operationToPersist.threshold_category = thresholdCat;\n            operationToPersist.source_acct = operationFromXDR.source;\n            operationToPersist.signatures = [];\n\n            if (this._transactionSourceAccount.accountId() === operationFromXDR.source) {\n                operationToPersist.sameSourceAccount = true;\n                operationToPersist.needs_signatures = false;\n            } else {\n                transaction.differentSourceOperationExists = true;\n                operationToPersist.sameSourceAccount = false;\n                operationToPersist.needs_signatures = true;\n            }\n\n            operationSourceAccount.signers.forEach(function (entry) {\n                let signature = new Object();\n                signature.public_key = entry.key;\n                signature.signed = false;\n                signature.weight = entry.weight;\n                operationToPersist.signatures.push(signature);\n            });\n\n            transaction.operations.push(operationToPersist);\n        }\n\n        let maxThresholdCategory = 'Low';\n        if (transaction._hasHighThresholdOp) {\n            maxThresholdCategory = 'High';\n        } else if (transaction._hasMediumThresholdOp) {\n            maxThresholdCategory = 'Medium';\n        }\n\n        transaction.threshold_category = maxThresholdCategory;\n        await transaction.save();\n\n        stellarTransaction = this._decorateStellarTransaction(stellarTransaction, transaction);\n        logger.trace('persistNewTransaction exit', stellarTransaction.id);\n        return stellarTransaction;\n    }\n\n    async _decorateStellarTransaction(stellarTransaction, persistedTransaction) {\n        logger.trace('_decorateStellarTransaction entry', persistedTransaction.id);\n        stellarTransaction.id = persistedTransaction.id;\n        stellarTransaction.type = persistedTransaction.operations[0].op_type;\n        stellarTransaction.source_acct = persistedTransaction.source_acct;\n        stellarTransaction.xdr_representation = persistedTransaction.xdr_representation;\n        stellarTransaction.description = persistedTransaction.description;\n        stellarTransaction.submitted = persistedTransaction.submitted;\n        stellarTransaction.error = persistedTransaction.error;\n        stellarTransaction.signers = persistedTransaction.signatures;\n        stellarTransaction.preAuthApprovers = persistedTransaction.approvers;\n        stellarTransaction.createdAt = persistedTransaction.createdAt;\n        stellarTransaction.hash = persistedTransaction.hash;\n        stellarTransaction.operations = persistedTransaction.operations;\n        logger.trace('_decorateStellarTransaction exit', persistedTransaction.id);\n        return stellarTransaction;\n    }\n};\n"]}