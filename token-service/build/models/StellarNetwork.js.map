{"version":3,"sources":["../../src/models/StellarNetwork.js"],"names":["StellarSDK","require","rp","log4js","logger","getLogger","level","process","env","LOG_LEVEL","server","STELLAR_NETWORK","Network","use","Server","allowHttp","useTestNetwork","_","i18n","path","configure","directory","join","__dirname","module","exports","StellarNetwork","bootstrapTestAccount","keyPair","Keypair","random","get","uri","qs","addr","publicKey","json","loadAccount","loadedAccount","getAccountDetails","trace","account","filteredAccount","thresholds","balances","signers","home_domain","flags","forEach","signer","public_key","key","master_weight","weight","master","getHistory","type","historyPageSize","historyPage","transactions","forAccount","limit","call","history","records","length","hasHistoryRecordsToDisplay","i","transaction","operationCount","operation_count","operations","memo_type","map","extend","memo","o","concat","next","filter","createAsset","assetCode","assetIssuer","asset","Asset","getBalances","returnValue","entry","item","network","balance","asset_type","asset_code","asset_issuer","push","getOffers","offers","getOrderbook","sell_asset_code","sell_asset_issuer","buy_asset_code","buy_asset_issuer","sellAsset","toUpperCase","native","buyAsset","orders","orderbook","checkTrustLine","assetIssuerAccount","trusted","balanceAssetCode","balanceAssetIssuer","submitSerializedTransaction","serializedXDR","rehydratedTransaction","Transaction","result","_transaction","error","payload","transactionResult","submitTransaction","hash","ledger"],"mappings":"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","file":"StellarNetwork.js","sourcesContent":["const StellarSDK = require('stellar-sdk');\nconst rp = require('request-promise');\nconst log4js = require('log4js');\nconst logger = log4js.getLogger('StellarNetwork');\nlogger.level = process.env.LOG_LEVEL || 'debug';\n\nlet server;\nif(process.env.STELLAR_NETWORK){\n    StellarSDK.Network.use(new StellarSDK.Network('Standalone Network ; February 2017'));\n    server = new StellarSDK.Server(process.env.STELLAR_NETWORK ,{allowHttp: true} );\n}else{\n    //global stellar variable\n    StellarSDK.Network.useTestNetwork();\n    server = new StellarSDK.Server('https://horizon-testnet.stellar.org');\n}\nconst _ = require('lodash');\nconst i18n = require('i18n');\nconst path = require('path');\ni18n.configure({\n    directory: path.join(__dirname, '/../locales')\n});\n\nmodule.exports = class StellarNetwork {\n\n    async bootstrapTestAccount() {\n        let keyPair = StellarSDK.Keypair.random();\n\n        await rp.get({\n            //get initial token from testnet firendbot\n            uri: 'https://horizon-testnet.stellar.org/friendbot',\n            qs: { addr: keyPair.publicKey() },\n            json: true\n        });\n        return keyPair;\n    }\n\n    async loadAccount(publicKey) {\n        const loadedAccount = await server.loadAccount(publicKey);\n        return loadedAccount;\n    }\n    async getAccountDetails(publicKey){\n        logger.trace('getAccountDetails entry', publicKey);\n        const account = await server.loadAccount(publicKey);\n        const filteredAccount = {\n            thresholds : account.thresholds,\n            balances : account.balances,\n            signers : account.signers,\n            home_domain: account.home_domain,\n            flags: account.flags\n        }\n        _.forEach( account.signers, function(signer) {\n            // make sure sometimes-missing public_key has always-present key value\n            signer.public_key = signer.key;\n            // match on passed in public key and check\n            // if current signer is account owner\n            if(publicKey === signer.public_key){\n                filteredAccount.thresholds.master_weight = signer.weight\n            }\n            signer.master = true;\n        });\n\n        logger.trace('getAccountDetails exit', filteredAccount);\n        return filteredAccount;\n    }\n\n    /* Getting History */\n    async getHistory(publicKey, type) {\n        logger.trace('getHistory entry', publicKey);\n        // const account = await server.loadAccount(publicKey);\n\n        const historyPageSize=50;\n        let historyPage = await server\n            .transactions()\n            .forAccount(publicKey)\n            .limit(historyPageSize)\n            .call();\n        let history = [];\n        logger.trace('getHistory history size:', [ historyPage.records.length])\n\n        let hasHistoryRecordsToDisplay = (historyPage.records.length !== 0);\n        while (hasHistoryRecordsToDisplay) {\n            for (let i = 0; i < historyPage.records.length; i += 1) {\n                let transaction = historyPage.records[i];\n                const operationCount = transaction.operation_count;\n                let operations = await transaction.operations({limit:operationCount});\n                logger.trace('getHistory operations size:', [operationCount, operations.records.length])\n                if(operations.records.length !== 0) {\n                    let records = operations.records;\n                    if(transaction.memo_type === 'text'){\n                        records = _.map(records, o => _.extend({memo: transaction.memo}, o));\n                    }\n                    history = _.concat(history, records)\n                }\n            }\n            // check to see if we filled the page size limit (might mean more records)\n            if(historyPage.records.length === historyPageSize){\n                historyPage = await historyPage.next();\n                hasHistoryRecordsToDisplay = (historyPage.records.length !== 0);\n            }else{\n                hasHistoryRecordsToDisplay=false;\n            }\n            logger.trace('getHistory hasHistoryRecordsToDisplay:', hasHistoryRecordsToDisplay)\n        }\n        if(type){\n            history = _.filter(history, {type : type} )\n        }\n        logger.trace('getHistory exit', history);\n        return history;\n    }\n\n    createAsset(assetCode, assetIssuer){\n        logger.trace('createAsset entry', [assetCode, assetIssuer]);\n        const asset = new StellarSDK.Asset(assetCode, assetIssuer);\n        logger.trace('createAsset exit', asset);\n        return asset;\n    }\n\n    /* Get Account Balance */\n    async getBalances(publicKey) {\n        logger.trace('getBalances entry', publicKey);\n        const account = await server.loadAccount(publicKey);\n        if(account.balances){\n            let returnValue = []\n            account.balances.forEach(function(entry) {\n                let item = {}\n                item.network = 'Stellar'\n                item.balance = entry.balance;\n                if(entry.asset_type === 'native'){\n                    item.asset_code = 'XLM'\n                }else{\n                    item.asset_code = entry.asset_code;\n                    item.asset_issuer = entry.asset_issuer;\n                }\n                returnValue.push(item);\n            });\n            logger.trace('getBalances exit', returnValue);\n            return returnValue;\n        }else{\n            logger.trace('getBalances exit', {});\n            return {};\n        }\n    }\n\n    /* Get Account Balance */\n    async getOffers(publicKey) {\n        logger.trace('getOffers entry', publicKey);\n        const offers = await server.offers('accounts', publicKey).call();\n        logger.trace('getOffers exit', offers.records);\n        return offers.records;\n    }\n\n\n    /* Get Orderbook*/\n    async getOrderbook(sell_asset_code, sell_asset_issuer, buy_asset_code, buy_asset_issuer){\n        logger.trace('getOrderBook entry', [sell_asset_code, sell_asset_issuer, buy_asset_code, buy_asset_issuer]);\n        let sellAsset;\n        if (sell_asset_code.toUpperCase() === 'XLM') {\n            sellAsset = new StellarSDK.Asset.native();\n        }else{\n            sellAsset = this.createAsset(sell_asset_code, sell_asset_issuer);\n        }\n        let buyAsset;\n        if (buy_asset_code.toUpperCase() === 'XLM') {\n            buyAsset = new StellarSDK.Asset.native();\n        }else{\n            buyAsset = this.createAsset(buy_asset_code, buy_asset_issuer);\n        }\n        const orders = await server.orderbook(sellAsset, buyAsset).call();\n        logger.trace('getOrderBook exit', orders);\n        return orders;\n    }\n\n\n    /* Check TrustLine */\n    async checkTrustLine(publicKey, assetCode, assetIssuerAccount) {\n        if (assetCode.toUpperCase() === 'XLM') {\n            return true;\n        } //always trust native crypto\n\n        logger.trace('checkTrustLine entry', [publicKey, assetCode, assetIssuerAccount]);\n\n        let trusted = false;\n        let account = await server.loadAccount(publicKey);\n\n        for (const balance of account.balances) {\n            let balanceAssetCode = balance.asset_code;\n            if (balanceAssetCode !== null && balanceAssetCode === assetCode) {\n                let balanceAssetIssuer = balance.asset_issuer;\n                if (balanceAssetIssuer !== null && balanceAssetIssuer === assetIssuerAccount) {\n                    trusted = true;\n                }\n            }\n        }\n\n        logger.trace('checkTrustLine exit', trusted);\n        return trusted;\n    }\n\n    async submitSerializedTransaction(serializedXDR) {\n        logger.trace('submitSerializedTransaction entry', [serializedXDR]);\n        const rehydratedTransaction = new StellarSDK.Transaction(serializedXDR);\n        let result;\n\n        try {\n            result = await this._transaction(rehydratedTransaction);\n        } catch (error){\n            logger.error('submitSerializedTransaction error before retry', error);\n            result = await this._transaction(rehydratedTransaction);\n        }\n\n        logger.trace('submitSerializedTransaction exit', [serializedXDR]);\n        return result;\n    }\n\n    async _transaction(payload){\n        logger.trace('_transaction entry');\n        const transactionResult = await server.submitTransaction(payload);\n        logger.trace('_transaction exit', [transactionResult.hash, transactionResult.ledger]);\n        return transactionResult;\n    }\n};\n"]}