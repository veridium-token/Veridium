{"version":3,"sources":["../../src/models/Account.js"],"names":["mongoose","require","AccountSchema","Schema","name","type","String","default","userId","min","required","tenantId","email","description","public_key","encrypted_secret","salt","passphrase","thresholds","select","balances","signers","pre_authorize_transactions","Boolean","read","usePushEach","timestamps","set","module","exports","model"],"mappings":";;AAAA,MAAMA,WAAWC,QAAQ,UAAR,CAAjB;;AAEA,MAAMC,gBAAgB,IAAIF,SAASG,MAAb,CAAoB;AACtCC,UAAM,EAAEC,MAAMC,MAAR,EAAgBC,SAAS,SAAzB,EADgC;AAEtCC,YAAQ;AACJH,cAAMC,MADF;AAEJG,aAAK,CAAC,CAAD,EAAI,mBAAJ,CAFD;AAGJC,kBAAU,CAAC,IAAD,EAAO,0BAAP;AAHN,KAF8B;AAOtCC,cAAU;AACNN,cAAMC,MADA;AAENG,aAAK,CAAC,CAAD,EAAI,uBAAJ,CAFC;AAGNC,kBAAU,CAAC,IAAD,EAAO,4BAAP;AAHJ,KAP4B;AAYtCE,WAAO;AACHP,cAAMC,MADH;AAEHG,aAAK,CAAC,CAAD,EAAI,yBAAJ,CAFF;AAGHC,kBAAU,CAAC,IAAD,EAAO,yBAAP;AAHP,KAZ+B;AAiBtCG,iBAAa;AACTJ,aAAK,CAAC,CAAD,EAAI,0BAAJ,CADI;AAETJ,cAAMC,MAFG;AAGTI,kBAAU,CAAC,IAAD,EAAO,gCAAP;AAHD,KAjByB;AAsBtCI,gBAAY;AACRT,cAAMC,MADE;AAERG,aAAK,CAAC,CAAD,EAAI,sBAAJ,CAFG;AAGRC,kBAAU,CAAC,IAAD,EAAO,8BAAP;AAHF,KAtB0B;AA2BtCK,sBAAkB;AACdV,cAAMC,MADQ;AAEdG,aAAK,CAAC,CAAD,EAAI,kBAAJ,CAFS;AAGdC,kBAAU,CAAC,IAAD,EAAO,0BAAP;AAHI,KA3BoB;AAgCtCM,UAAM;AACFX,cAAMC,MADJ;AAEFG,aAAK,CAAC,CAAD,EAAI,gBAAJ,CAFH;AAGFC,kBAAU,CAAC,IAAD,EAAO,wBAAP;AAHR,KAhCgC;AAqCtCO,gBAAY,EAAEZ,MAAMC,MAAR,EAAiBI,UAAU,CAAC,IAAD,EAAO,8BAAP,CAA3B,EArC0B;AAsCtCQ,gBAAY,EAAEb,MAAMC,MAAR,EAAgBa,QAAQ,KAAxB,EAtC0B;AAuCtCC,cAAU,EAAEf,MAAMC,MAAR,EAAgBa,QAAQ,KAAxB,EAvC4B;AAwCtCE,aAAS,EAAEhB,MAAMC,MAAR,EAAgBa,QAAQ,KAAxB,EAxC6B;AAyCtCG,gCAA4BC;AAzCU,CAApB,EA0CpB;AACEC,UAAM,SADR;AAEEC,iBAAa,IAFf;AAGEC,gBAAY;AAHd,CA1CoB,CAAtB;;AAgDAxB,cAAcyB,GAAd,CAAkB,WAAlB,EAA+B,IAA/B;AACAC,OAAOC,OAAP,GAAiB7B,SAAS8B,KAAT,CAAe,SAAf,EAA0B5B,aAA1B,CAAjB","file":"Account.js","sourcesContent":["const mongoose = require('mongoose');\n\nconst AccountSchema = new mongoose.Schema({\n    name: { type: String, default: 'account' },\n    userId: {\n        type: String,\n        min: [4, 'user id too short'],\n        required: [true, 'Missing required userId.']\n    },\n    tenantId: {\n        type: String,\n        min: [4, 'tenantId id too short'],\n        required: [true, 'Missing required tenantId.']\n    },\n    email: {\n        type: String,\n        min: [4, 'email address too short'],\n        required: [true, 'Missing required email.']\n    },\n    description: {\n        min: [4, 'description is too short'],\n        type: String,\n        required: [true, 'Missing required  description.']\n    },\n    public_key: {\n        type: String,\n        min: [4, 'public key too short'],\n        required: [true, 'Missing required public key.']\n    },\n    encrypted_secret: {\n        type: String,\n        min: [4, 'secret too short'],\n        required: [true, 'Missing required secret.']\n    },\n    salt: {\n        type: String,\n        min: [4, 'salt too short'],\n        required: [true, 'Missing required salt.']\n    },\n    passphrase: { type: String,  required: [true, 'Missing required passphrase.'] },\n    thresholds: { type: String, select: false },\n    balances: { type: String, select: false },\n    signers: { type: String, select: false },\n    pre_authorize_transactions: Boolean\n},{\n    read: 'nearest',\n    usePushEach: true,\n    timestamps: true\n});\n\nAccountSchema.set('autoIndex', true);\nmodule.exports = mongoose.model('Account', AccountSchema);\n"]}