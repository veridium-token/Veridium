{"version":3,"sources":["../src/app.js"],"names":["express","require","ApolloServer","schema","jwt","resolvers","mongoose","auth","secret","process","env","JWT_SECRET","credentialsRequired","getToken","fromHeaderOrQuerystring","req","headers","authorization","split","context","user","app","use","get","res","connection","readyState","status","json","error","message","path","server","typeDefs","introspection","playground","applyMiddleware","module","exports"],"mappings":";;AAAA,MAAMA,UAAUC,QAAQ,SAAR,CAAhB;AACA,MAAM,EAAEC,YAAF,KAAmBD,QAAQ,uBAAR,CAAzB;AACA,MAAME,SAASF,QAAQ,kBAAR,CAAf;AACA,MAAMG,MAAMH,QAAQ,aAAR,CAAZ;AACA,MAAMI,YAAYJ,QAAQ,qBAAR,CAAlB;AACAA,QAAQ,gCAAR;AACA,MAAMK,WAAWL,QAAQ,UAAR,CAAjB;;AAIA;AACA,MAAMM,OAAOH,IAAI;AACbI,YAAQC,QAAQC,GAAR,CAAYC,UADP;AAEbC,yBAAqB,KAFR;AAGbC,cAAU,SAASC,uBAAT,CAAiCC,GAAjC,EAAsC;AAC5C,YAAIA,IAAIC,OAAJ,CAAYC,aAAZ,IAA6BF,IAAIC,OAAJ,CAAYC,aAAZ,CAA0BC,KAA1B,CAAgC,GAAhC,EAAqC,CAArC,MAA4C,QAA7E,EAAuF;AACnF,mBAAOH,IAAIC,OAAJ,CAAYC,aAAZ,CAA0BC,KAA1B,CAAgC,GAAhC,EAAqC,CAArC,CAAP;AACH;AACD,eAAO,IAAP;AACH;AARY,CAAJ,CAAb;;AAWA;AACA,MAAMC,UAAU,CAAC,EAAEJ,GAAF,EAAD,KAAa;AACzB,UAAMK,OAAOL,IAAIK,IAAjB;AACA,WAAO,EAAEA,IAAF,EAAP;AACH,CAHD;;AAMA;AACA,MAAMC,MAAMrB,SAAZ;AACAqB,IAAIC,GAAJ,CAAQf,IAAR;;AAEAc,IAAIE,GAAJ,CAAQ,YAAR,EAAsB,UAAUR,GAAV,EAAeS,GAAf,EAAoB;AACtC,QAAIlB,SAASmB,UAAT,CAAoBC,UAApB,IAAkC,CAAtC,EAAyC;AAAI;AACzCF,YAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,OAAO,gDAAT,EAArB;AACH,KAFD,MAEO,IAAIvB,SAASmB,UAAT,CAAoBC,UAApB,IAAkC,CAAtC,EAAyC;AAAE;AAC9CF,YAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEE,SAAS,iDAAX,EAArB;AACH;AACJ,CAND;AAOAT,IAAIE,GAAJ,CAAQ,WAAR,EAAqB,UAAUR,GAAV,EAAeS,GAAf,EAAoB;AACrC,QAAIlB,SAASmB,UAAT,CAAoBC,UAApB,IAAkC,CAAtC,EAAyC;AAAI;AACzCF,YAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,OAAO,6DAAT,EAArB;AACH,KAFD,MAEO,IAAIvB,SAASmB,UAAT,CAAoBC,UAApB,IAAkC,CAAtC,EAAyC;AAAE;AAC9CF,YAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEE,SAAS,iDAAX,EAArB;AACH;AACJ,CAND;;AASA,MAAMC,OAAO,UAAb;AACAV,IAAIU,IAAJ,GAAWA,IAAX;;AAEA,MAAMC,SAAS,IAAI9B,YAAJ,CAAiB,EAAE+B,UAAU9B,MAAZ,EAAoBE,SAApB,EAA+Bc,SAASA,OAAxC,EAAiDe,eAAe,IAAhE,EAAsEC,YAAY,IAAlF,EAAjB,CAAf;AACAH,OAAOI,eAAP,CAAuB,EAAEf,GAAF,EAAOU,IAAP,EAAvB;;AAEAM,OAAOC,OAAP,GAAiBjB,GAAjB","file":"app.js","sourcesContent":["const express = require('express');\nconst { ApolloServer } = require('apollo-server-express');\nconst schema = require('./data/schema.js')\nconst jwt = require('express-jwt')\nconst resolvers = require('./data/resolvers.js')\nrequire('./config/initializers/database');\nconst mongoose = require('mongoose');\n\n\n\n// auth middleware\nconst auth = jwt({\n    secret: process.env.JWT_SECRET,\n    credentialsRequired: false,\n    getToken: function fromHeaderOrQuerystring(req) {\n        if (req.headers.authorization && req.headers.authorization.split(' ')[0] === 'Bearer') {\n            return req.headers.authorization.split(' ')[1];\n        }\n        return null;\n    }\n})\n\n// authenticate for schema usage\nconst context = ({ req }) => {\n    const user = req.user;\n    return { user }\n};\n\n\n// create our express app\nconst app = express()\napp.use(auth);\n\napp.get('/readiness', function (req, res) {\n    if (mongoose.connection.readyState == 0) {   // not connected\n        res.status(500).json({ error: 'Account service not ready.  Waiting on MongoDB' });\n    } else if (mongoose.connection.readyState == 1) { // connected\n        res.status(200).json({ message: 'Account service is ready.  MongoDB is connected' });\n    }\n})\napp.get('/liveness', function (req, res) {\n    if (mongoose.connection.readyState == 0) {   // not connected\n        res.status(500).json({ error: 'Account service not alive.  Waiting on MongoDB to reconnect' });\n    } else if (mongoose.connection.readyState == 1) { // connected\n        res.status(200).json({ message: 'Account service is alive.  MongoDB is connected' });\n    }\n})\n\n\nconst path = '/account';\napp.path = path;\n\nconst server = new ApolloServer({ typeDefs: schema, resolvers, context: context, introspection: true, playground: true});\nserver.applyMiddleware({ app, path });\n\nmodule.exports = app\n"]}